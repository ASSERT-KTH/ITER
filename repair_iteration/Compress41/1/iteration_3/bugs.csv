bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  skipped  +=(x  <  >  0)?  skipped  :  x;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  <  >  0)?  skipped  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  >  0)?  skipped  :  x;	  skipped    +=(x    <    >    0)?    rem    :    x;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
2	[BUG]  [BUGGY]  skipped  +=(x  <  >  3)?  rem  :  x;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  <  >  3)?  rem  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  >  3)?  rem  :  x;	  skipped    +=(x    <    >    0)?    rem    :    x;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
3	[BUG]  [BUGGY]  skipped  +=(x  <  >  1)?  rem  :  x;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  <  >  1)?  rem  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  >  1)?  rem  :  x;	  skipped    +=(x    <    >    0)?    rem    :    x;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
4	[BUG]  [BUGGY]  skipped  +=(rem  <  >  0)?  x  :  x;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(rem  <  >  0)?  x  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(rem  <  >  0)?  x  :  x;	  skipped    +=(x    <    >    0)?    rem    :    x;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
5	[BUG]  [BUGGY]  skipped  +=(x  >  0)?  rem  :  x;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  >  0)?  rem  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  >  0)?  rem  :  x;	  skipped    +=(x    <    >    0)?    rem    :    x;    	non-compiled	[CE]  <identifier>  expected	71	None	replace
6	[BUG]  [BUGGY]  skipped  *=  X;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  X;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  X;	  skipped    *=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
7	[BUG]  [BUGGY]  skipped  *=  2;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  2;	  skipped    *=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
8	[BUG]  [BUGGY]  skipped  *=  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  1;	  skipped    *=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
9	[BUG]  [BUGGY]  skipped  *=  3;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  3;	  skipped    *=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	81	None	replace
10	[BUG]  [BUGGY]  skipped  -=  rem  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem  +  1;	  skipped    -=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  skipped  -=  x  *  1;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *  1;	  skipped    -=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  skipped  -=  x  +  3;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  3;	  skipped    -=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  skipped  -=  x  +  4;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  4;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  4;	  skipped    -=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  skipped  -=  x  *(x  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *(x  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(x  -  1);	  skipped    -=    x    *(rem    -    1);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
15	[BUG]  [BUGGY]  skipped  -=  x  *(x  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *(x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(x  +  1);	  skipped    -=    x    *(rem    -    1);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
16	[BUG]  [BUGGY]  skipped  -=  x  *(rem  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *(rem  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(rem  +  1);	  skipped    -=    x    *(rem    -    1);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
17	[BUG]  [BUGGY]  skipped  -=  rem  *(x  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem  *(x  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem  *(x  -  1);	  skipped    -=    x    *(rem    -    1);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
18	[BUG]  [BUGGY]  skipped  -=  x  *(max  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *(max  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(max  -  1);	  skipped    -=    x    *(rem    -    1);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
19	[BUG]  [BUGGY]  skipped  +=  rem  +  2;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  +  2;	  skipped    +=    rem    +    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
20	[BUG]  [BUGGY]  skipped  +=  rem  +  3;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  +  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  +  3;	  skipped    +=    rem    +    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
21	[BUG]  [BUGGY]  skipped  /=  rem  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  rem  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  rem  +  1;	  skipped    +=    rem    +    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
22	[BUG]  [BUGGY]  skipped  +=  rem  +  4;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  +  4;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  +  4;	  skipped    +=    rem    +    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
23	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    skipped    =    0;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
24	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    skipped    =    0;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
25	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    skipped    =    0;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
26	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  skipped  =  0;  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  skipped  =  0;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  skipped  =  0;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    skipped    =    0;    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
27	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  x  :  x);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  >  0)?  x  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
28	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  skipped  :  x);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  skipped  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  >  0)?  skipped  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
29	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0));  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  >  0));	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
30	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  <  0)?  skipped  :  x);  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  <  0)?  skipped  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  <  0)?  skipped  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
31	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  rem  :  x);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  rem  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  >  0)?  rem  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
32	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  >  0)?  x  :  x);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  >  0)?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(x  >  0)?  x  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
33	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Context.reportCodeChange();	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
34	[BUG]  [BUGGY]  skipped  +=  value  *(x  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  value  *(x  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  value  *(x  -  1);	  skipped    +=    x    *(x    -    1);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
35	[BUG]  [BUGGY]  skipped  /=  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  1;	  skipped    /=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
36	[BUG]  [BUGGY]  skipped  /=  X;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  X;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  X;	  skipped    /=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
37	[BUG]  [BUGGY]  skipped  /=  8;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  8;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  8;	  skipped    /=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
38	[BUG]  [BUGGY]  skipped  /=  3;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  3;	  skipped    /=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
39	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
40	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
41	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
42	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
43	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  skipped  -=  x;  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
44	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
45	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
46	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  x)?  x  :  XML_BUF.length);	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
47	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  x  :  x);  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  x  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
48	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  rem  :  x);  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  rem  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  rem?  rem  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
49	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length);  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length);	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
50	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max)?  x  :  x);  [CE]  <identifier>  expected  [FE]                                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max)?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max)?  x  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
51	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  YML_BUF.length));  [CE]  <identifier>  expected  [FE]                                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  YML_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(XML_BUF.length  >  rem?  x  :  YML_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
52	[BUG]  [BUGGY]  skipd  -=  x;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  -=  x;	  skipped    -=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
53	[BUG]  [BUGGY]  skipped  -=  0;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  0;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  0;	  skipped    -=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
54	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
55	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
56	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipd;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipd;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipd;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
57	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
58	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
59	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  ==  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  ==  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  ==  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
60	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x.length;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x.length;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x.length;  i++)  {  if(skipped  >  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
61	[BUG]  [BUGGY]  skipped  /=  4;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  4;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  4;	  skipped    /=    2;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
62	[BUG]  [BUGGY]  skipped  /=  10;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  10;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  10;	  skipped    /=    2;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
63	[BUG]  [BUGGY]  skipped  /=  6;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  6;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  6;	  skipped    /=    2;    	non-compiled	[CE]  <identifier>  expected	72	None	replace
64	[BUG]  [BUGGY]  pendingThread()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  pendingThread()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	pendingThread()  {  throw  new  IllegalArgumentException( " ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
65	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	throw  new  IllegalArgumentException( " ");	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
66	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
67	[BUG]  [BUGGY]  pending(1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  pending(1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	pending(1)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
68	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(entry);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(entry);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(entry);	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
69	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(entry,  encoding);  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(entry,  encoding);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(entry,  encoding);	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
70	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	aughtExceptionHandler.throwInternal();	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
71	[BUG]  [BUGGY]  skipped  /=  x  *  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  *  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  *  1;	  skipped    /=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
72	[BUG]  [BUGGY]  skipped  /=  x  +  3;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  +  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  +  3;	  skipped    /=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
73	[BUG]  [BUGGY]  skipped  *=  x  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  x  +  1;	  skipped    /=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
74	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
75	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
76	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
77	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
78	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  <  0)  {  skip  =  csize;  }  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  <  0)  {  skip  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize  <  0)  {  skip  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
79	[BUG]  [BUGGY]  pendingThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  pendingThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	pendingThan  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
80	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
81	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(false)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(false)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(false)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
82	[BUG]  [BUGGY]  read(x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  read(x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	read(x)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
83	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(entry,  x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(entry,  x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(entry,  x)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
84	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(x,  skip);  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(x,  skip);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(x,  skip);	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
85	[BUG]  [BUGGY]  x  -=  x;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  x  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	x  -=  x;	  skipped    -=    x;    x    -=    x;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
86	[BUG]  [BUGGY]  skipped  -=  rem;  x  -=  x;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem;  x  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem;  x  -=  x;	  skipped    -=    x;    x    -=    x;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
87	[BUG]  [BUGGY]  skipped  -=  x  +  1;  x  -=  x;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  x  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  x  -=  x;	  skipped    -=    x;    x    -=    x;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
88	[BUG]  [BUGGY]  skipped  -=  x;  x  -=  rem;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  x  -=  rem;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  x  -=  rem;	  skipped    -=    x;    x    -=    x;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
89	[BUG]  [BUGGY]  skipped  -=  x;  x  -=  x  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  x  -=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  x  -=  x  +  1;	  skipped    -=    x;    x    -=    x;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
90	[BUG]  [BUGGY]  int  skipped  -=  x;  x  -=  x;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  skipped  -=  x;  x  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  skipped  -=  x;  x  -=  x;	  skipped    -=    x;    x    -=    x;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
91	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  <  0));  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  <  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  <  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
92	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  <  0));  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  <  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  <  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
93	[BUG]  [BUGGY]  final  int  x  =  read(CKIP_BUF,  0,  (int)(x  <  0));  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(CKIP_BUF,  0,  (int)(x  <  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(CKIP_BUF,  0,  (int)(x  <  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
94	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  <  0));  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  <  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(x  <  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
95	[BUG]  [BUGGY]  final  int  x  =  read(ZipArchiveEntry.SHORT_BUF,  0,  (int)(x  <  0));  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(ZipArchiveEntry.SHORT_BUF,  0,  (int)(x  <  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(ZipArchiveEntry.SHORT_BUF,  0,  (int)(x  <  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
96	[BUG]  [BUGGY]  final  int  x  =  read(REM,  0,  (int)(x  <  0));  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(REM,  0,  (int)(x  <  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(REM,  0,  (int)(x  <  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
97	[BUG]  [BUGGY]  final  int  x  =  read(RCS_DEFAULT,  0,  (int)(x  <  0));  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(RCS_DEFAULT,  0,  (int)(x  <  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(RCS_DEFAULT,  0,  (int)(x  <  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  <identifier>  expected	24	None	replace
98	[BUG]  [BUGGY]  skipped  -=  x  *(skipped  +  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *(skipped  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(skipped  +  1);	  skipped    -=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
99	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max)?  rem  :  x);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max)?  rem  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max)?  rem  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
100	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max));  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  >  max));	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
101	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  max));  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  >  max));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  >  max));	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
102	[BUG]  [BUGGY]  skipped  +=  rem  *  2  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  *  2  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *  2  +  1;	  skipped    +=    x    *    2    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
103	[BUG]  [BUGGY]  skipped  +=  x  *  4  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  4  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  4  +  1;	  skipped    +=    x    *    2    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
104	[BUG]  [BUGGY]  skipped  +=  x  *  3  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  3  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  3  +  1;	  skipped    +=    x    *    2    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
105	[BUG]  [BUGGY]  skipped  -=  x  *  2  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *  2  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *  2  +  1;	  skipped    +=    x    *    2    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
106	[BUG]  [BUGGY]  skipped  -=  x  /  2;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  /  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  /  2;	  skipped    -=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
107	[BUG]  [BUGGY]  skipped  -=  x  *  4;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *  4;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *  4;	  skipped    -=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
108	[BUG]  [BUGGY]  skipped  -=  rem  *  2;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem  *  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem  *  2;	  skipped    -=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
109	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
110	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
111	[BUG]  [BUGGY]  if(x  >  0)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
112	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    return    skipped;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
113	[BUG]  [BUGGY]  skipped  -=  value  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  value  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  value  +  1;	  skipped    -=    value;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
114	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  x);	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
115	[BUG]  [BUGGY]  int  x  =  read(x,  0,  rem);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(x,  0,  rem);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(x,  0,  rem);	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
116	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
117	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
118	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
119	[BUG]  [BUGGY]  skipped  -=  rem;  int  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem;  int  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem;  int  x  =  read(x,  0,  x);	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
120	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
121	[BUG]  [BUGGY]  skipped  +=  x  /  2  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  /  2  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  /  2  +  1;	  skipped    +=    x    /    2;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
122	[BUG]  [BUGGY]  skipped  +=  rem  /  2;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  /  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  /  2;	  skipped    +=    x    /    2;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
123	[BUG]  [BUGGY]  skipped  +=  x  /  4;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  /  4;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  /  4;	  skipped    +=    x    /    2;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
124	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
125	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
126	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
127	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  x);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  x);	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
128	[BUG]  [BUGGY]  int  x  =  read(rem,  0,  x);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(rem,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(rem,  0,  x);	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
129	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
130	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
131	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
132	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
133	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
134	[BUG]  [BUGGY]  skipped  -=  rem;  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem;  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem;  x  =  read(x,  0,  x);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
135	[BUG]  [BUGGY]  skipped  -=  x  +  1;  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  x  =  read(x,  0,  x);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
136	[BUG]  [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  value);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  value);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  x  =  read(x,  0,  value);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
137	[BUG]  [BUGGY]  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	x  =  read(x,  0,  x);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
138	[BUG]  [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  rem);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  rem);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  x  =  read(x,  0,  rem);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
139	[BUG]  [BUGGY]  final  int  skipped  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  skipped  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  skipped  =  read(x,  0,  x);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  max;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
143	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  max));  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  max));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  >  max));	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
144	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
147	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
148	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
149	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
150	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
151	[BUG]  [BUGGY]  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
152	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
153	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	77	None	replace
154	[BUG]  [BUGGY]  x  +=  x  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  x  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	x  +=  x  +  1;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
155	[BUG]  [BUGGY]  skipped  -=  x  +  1;  x  +=  x  +  1;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  x  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  x  +=  x  +  1;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
156	[BUG]  [BUGGY]  x  +=  x;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  x  +=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	x  +=  x;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
157	[BUG]  [BUGGY]  skipped  +=  rem  +  1;  x  +=  x  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  +  1;  x  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  +  1;  x  +=  x  +  1;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
158	[BUG]  [BUGGY]  skipped  +=  x  +  1;  x  +=  rem  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  +  1;  x  +=  rem  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  1;  x  +=  rem  +  1;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
159	[BUG]  [BUGGY]  skipped  +=  x  +  1;  x  +=  x  +  2;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  +  1;  x  +=  x  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  1;  x  +=  x  +  2;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
160	[BUG]  [BUGGY]  skipped  -=  rem  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem  -  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem  -  1;	  skipped    +=    rem    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
161	[BUG]  [BUGGY]  skipped  +=  rem  /  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  /  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  /  1;	  skipped    +=    rem    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
162	[BUG]  [BUGGY]  skipped  /=  rem  -  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  rem  -  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  rem  -  1;	  skipped    +=    rem    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
163	[BUG]  [BUGGY]  skipped  +=  rem  -  2;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  -  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  -  2;	  skipped    +=    rem    -    1;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
164	[BUG]  [BUGGY]  skipped  /=  x  *  3;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  *  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  *  3;	  skipped    /=    x    *    4;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
165	[BUG]  [BUGGY]  skipped  /=  x  *  4  +  1;  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  *  4  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  *  4  +  1;	  skipped    /=    x    *    4;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
166	[BUG]  [BUGGY]  skipped  /=  rem  *  4;  [CE]  <identifier>  expected  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  rem  *  4;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  rem  *  4;	  skipped    /=    x    *    4;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
167	[BUG]  [BUGGY]  skipped  +=  rem  *  4;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  *  4;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *  4;	  skipped    +=    x    *    4;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
168	[BUG]  [BUGGY]  skipped  +=  x  *  5;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  5;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  5;	  skipped    +=    x    *    4;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
169	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	101	None	replace
170	[BUG]  [BUGGY]  final  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	101	None	replace
171	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	101	None	replace
172	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	101	None	replace
173	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	101	None	replace
174	[BUG]  [BUGGY]  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	101	None	replace
175	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
176	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
177	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  2;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  2;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
178	[BUG]  [BUGGY]  final  int  x  =  read(REM,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(REM,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(REM,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
179	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  x);  skipped  +=  x;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  x);  skipped  +=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  x);  skipped  +=  x;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
180	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  3;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  3;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
181	[BUG]  [BUGGY]  skipped  /=  x  *  2  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  *  2  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  *  2  +  1;	  skipped    /=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
182	[BUG]  [BUGGY]  skipped  /=  x  /  2;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  /  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  /  2;	  skipped    /=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
183	[BUG]  [BUGGY]  skipped  /=  rem  *  2;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  rem  *  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  rem  *  2;	  skipped    /=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
184	[BUG]  [BUGGY]  skipped  -=  x  /  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  /  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  /  1;	  skipped    +=    x    /    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
185	[BUG]  [BUGGY]  skipped  +=  x  /  3;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  /  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  /  3;	  skipped    +=    x    /    1;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
186	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  -  rem));  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  -  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  -  rem));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
187	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  -  x));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  -  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(value  -  x));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  ';'  expected	20	None	replace
188	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  -  rem));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  -  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(rem  -  rem));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  ';'  expected	20	None	replace
189	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  -  x));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  -  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(rem  -  x));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  ';'  expected	20	None	replace
190	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(value  -  x));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(value  -  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(value  -  x));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  ';'  expected	20	None	replace
191	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  -  x));  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  -  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(rem  -  x));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
192	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(rem  -  x));  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(rem  -  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(rem  -  x));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  <identifier>  expected	20	None	replace
193	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  x);  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(value,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(value,  0,  x);	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
194	[BUG]  [BUGGY]  int  x  =  read(value,  0,  x);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(value,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(value,  0,  x);	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
195	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
196	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
197	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
198	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
199	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
200	[BUG]  [BUGGY]  skipped  +=  rem  *  1;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  *  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *  1;	  skipped    +=    x    *    1;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
201	[BUG]  [BUGGY]  skipped  -=  rem  +  2;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem  +  2;	  skipped    -=    x    +    2;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
202	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skip;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skip;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
203	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
204	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1));  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
205	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
206	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
207	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
208	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1));  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
209	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
210	[BUG]  [BUGGY]  final  int  x  =  read(REM,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(REM,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(REM,  0,  (int)(x  +  1));  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	37	None	replace
211	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
212	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
213	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
214	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
215	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  value;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
216	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  rem;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
217	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
218	[BUG]  [BUGGY]  skipped  *=  x  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  x  -  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  x  -  1;	  skipped    *=    x;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
219	[BUG]  [BUGGY]  skipped  *=  x  +  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  x  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  x  +  2;	  skipped    *=    x;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
220	[BUG]  [BUGGY]  skipped  *=  x.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  x.length;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  x.length;	  skipped    *=    x;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
221	[BUG]  [BUGGY]  skipped  *=  x  +  3;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  x  +  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  x  +  3;	  skipped    *=    x;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
222	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  x);  skipped  -=  x;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  x);  skipped  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  x);  skipped  -=  x;	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
223	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
224	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
225	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
226	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
227	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
228	[BUG]  [BUGGY]  skipped  +=  x  *(max  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *(max  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *(max  -  1);	  skipped    +=    x    *(rem    -    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
229	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  rem);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(value,  0,  rem);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(value,  0,  rem);	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
230	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  value.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(value,  0,  value.length);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(value,  0,  value.length);	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
231	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  size);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(value,  0,  size);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(value,  0,  size);	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
232	[BUG]  [BUGGY]  final  int  x  =  read(skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(skipped,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(skipped,  0,  x);	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
233	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  value);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(value,  0,  value);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(value,  0,  value);	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
234	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(SKIP_BUF,  0,  x  +  1);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
235	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  x  +  1);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
236	[BUG]  [BUGGY]  x  =  read(SKIP_BUF,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  x  =  read(SKIP_BUF,  0,  x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	x  =  read(SKIP_BUF,  0,  x  +  1);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
237	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(SKIP_BUF,  0,  x);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
238	[BUG]  [BUGGY]  skipped  +=  x;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x;  int  x  =  read(SKIP_BUF,  0,  x  +  1);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
239	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x  +  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x  +  2);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(SKIP_BUF,  0,  x  +  2);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
240	[BUG]  [BUGGY]  skipped  +=  rem  *(value  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  *(value  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *(value  -  1);	  skipped    +=    x    *(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
241	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
242	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  skipped  +=  x;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
243	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
244	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  skipCount;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
245	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  ==  0)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  ==  0)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  ==  0)  {  skipped  +=  x;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
246	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  length;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
247	[BUG]  [BUGGY]  skipped  -=  value  *(x  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  value  *(x  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  value  *(x  -  1);	  skipped    -=    x    *(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
248	[BUG]  [BUGGY]  skipped  -=  rem  *(value  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem  *(value  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem  *(value  -  1);	  skipped    -=    x    *(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
249	[BUG]  [BUGGY]  skipped  -=  x  *(value  /  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *(value  /  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(value  /  1);	  skipped    -=    x    *(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
250	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
251	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
252	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
253	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
254	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
255	[BUG]  [BUGGY]  skipped  +=  rem  *(x  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  *(x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *(x  +  1);	  skipped    +=    rem    *(x    -    1);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
256	[BUG]  [BUGGY]  skipped  /=  rem  +  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  rem  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  rem  +  2;	  skipped    /=    x    +    2;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
257	[BUG]  [BUGGY]  skipd  -=  rem  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  -=  rem  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  -=  rem  +  1;	  skipd    -=    rem;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
258	[BUG]  [BUGGY]  rem  -=  skipd;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  rem  -=  skipd;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	rem  -=  skipd;	  skipd    -=    rem;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
259	[BUG]  [BUGGY]  rem  -=  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  rem  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	rem  -=  x;	  skipd    -=    rem;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
260	[BUG]  [BUGGY]  skip  -=  x;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skip  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skip  -=  x;	  skipd    -=    rem;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
261	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  2;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
262	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
263	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  3;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  3;	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
264	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
265	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
266	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
267	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
268	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  2;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  2;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  2;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
269	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
270	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  3;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  3;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  3;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
271	[BUG]  [BUGGY]  skipped  /=  x.length  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x.length  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x.length  +  1;	  skipped    /=    x.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
272	[BUG]  [BUGGY]  skipped  /=  x.length  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x.length  -  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x.length  -  1;	  skipped    /=    x.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
273	[BUG]  [BUGGY]  skipped  /=  x.length  *  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x.length  *  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x.length  *  2;	  skipped    /=    x.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
274	[BUG]  [BUGGY]  skipped  /=  x.length  +  2;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x.length  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x.length  +  2;	  skipped    /=    x.length;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
275	[BUG]  [BUGGY]  final  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(value,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
276	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(value,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
277	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(value,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
278	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(value,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
279	[BUG]  [BUGGY]  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(value,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
280	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(value,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
281	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
282	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
283	[BUG]  [BUGGY]  if(x  <  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
284	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
285	[BUG]  [BUGGY]  if(x  <  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
286	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
287	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
288	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  2;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  2;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  2;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
289	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
290	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  3;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  3;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  3;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
291	[BUG]  [BUGGY]  skipped  +=(x  >=  0)?  rem  :  x;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  >=  0)?  rem  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  >=  0)?  rem  :  x;	  skipped    +=(x    <    =    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
292	[BUG]  [BUGGY]  skipped  +=(x  <  =  0)?  skipped  :  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  <  =  0)?  skipped  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  =  0)?  skipped  :  x;	  skipped    +=(x    <    =    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
293	[BUG]  [BUGGY]  skipped  +=(x  ==  0)?  rem  :  x;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  ==  0)?  rem  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  ==  0)?  rem  :  x;	  skipped    +=(x    <    =    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
294	[BUG]  [BUGGY]  skipped  +=(rem  <  =  0)?  x  :  x;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(rem  <  =  0)?  x  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(rem  <  =  0)?  x  :  x;	  skipped    +=(x    <    =    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
295	[BUG]  [BUGGY]  skipped  +=(x  <  0)?  skipped  :  x;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  <  0)?  skipped  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  0)?  skipped  :  x;	  skipped    +=(x    <    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
296	[BUG]  [BUGGY]  skipped  +=(rem  <  0)?  x  :  x;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(rem  <  0)?  x  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(rem  <  0)?  x  :  x;	  skipped    +=(x    <    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
297	[BUG]  [BUGGY]  skipped  +=(x  <  0)?  skip  :  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  <  0)?  skip  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  0)?  skip  :  x;	  skipped    +=(x    <    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
298	[BUG]  [BUGGY]  skipped  +=(x  <  0)?  skipped  :  rem;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  <  0)?  skipped  :  rem;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  0)?  skipped  :  rem;	  skipped    +=(x    <    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
299	[BUG]  [BUGGY]  skipped  %=  x;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  %=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  %=  x;	  skipped    /=    rem;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
300	[BUG]  [BUGGY]  skipped  /=(x  +  rem);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=(x  +  rem);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=(x  +  rem);	  skipped    /=    rem;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
301	[BUG]  [BUGGY]  skipped  /=  rem  *  x;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  rem  *  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  rem  *  x;	  skipped    /=    rem;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
302	[BUG]  [BUGGY]  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
303	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
304	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
305	[BUG]  [BUGGY]  final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem.skip();  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem.skip();  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem.skip();  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
306	[BUG]  [BUGGY]  final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
307	[BUG]  [BUGGY]  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  2;	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
308	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
309	[BUG]  [BUGGY]  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	((  ZipArchiveEntry)rem).skip();  skipped  -=  x;	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
310	[BUG]  [BUGGY]  if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
311	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
312	[BUG]  [BUGGY]  if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
313	[BUG]  [BUGGY]  final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem.skip();  skipped  -=  x;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem.skip();  skipped  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  ZipArchiveEntry  rem  =(ZipArchiveEntry)rem.skip();  skipped  -=  x;	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
314	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  x));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  x));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
315	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  rem));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  rem));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
316	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  rem));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  rem));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
317	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  +  rem));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  +  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(x  +  rem));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
318	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  rem));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  +  rem));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
319	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
320	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  +  3));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  +  3));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(rem  +  3));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
321	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
322	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
323	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
324	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
325	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
326	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
327	[BUG]  [BUGGY]  lastStoredEntry  =  entry.getValue();  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  lastStoredEntry  =  entry.getValue();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  =  entry.getValue();	  lastStoredEntry    =    ze.getValue();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
328	[BUG]  [BUGGY]  lastStoredEntry  =  ze.getLastChunk();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  lastStoredEntry  =  ze.getLastChunk();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  =  ze.getLastChunk();	  lastStoredEntry    =    ze.getValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
329	[BUG]  [BUGGY]  lastStoredEntry  =  ze.getValue()  +  1;  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  lastStoredEntry  =  ze.getValue()  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  =  ze.getValue()  +  1;	  lastStoredEntry    =    ze.getValue();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
330	[BUG]  [BUGGY]  lastStoredEntry  =  entry.getKey();  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  lastStoredEntry  =  entry.getKey();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  =  entry.getKey();	  lastStoredEntry    =    ze.getValue();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
331	[BUG]  [BUGGY]  lastStoredEntry  =  ze.getLastChild();  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  lastStoredEntry  =  ze.getLastChild();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  =  ze.getLastChild();	  lastStoredEntry    =    ze.getValue();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
332	[BUG]  [BUGGY]  skipped  +=  rem  -  3;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  -  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  -  3;	  skipped    +=    x    -    3;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
333	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
334	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  SKIP_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
335	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
336	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(XML_BUF.length  >  rem?  x  :  XML_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
337	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(X_BUF.length  >  rem?  x  :  X_BUF.length));  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(X_BUF.length  >  rem?  x  :  X_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(X_BUF.length  >  rem?  x  :  X_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
338	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  ZERO_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
339	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  XML_BUF.length));  [CE]  <identifier>  expected  [FE]                                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  XML_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  XML_BUF.length));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
340	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
341	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
342	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
343	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
344	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
345	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
346	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
347	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
348	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  2;  }  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  2;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  2;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
349	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  3;  }  }  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  3;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  3;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
350	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y  +  1;  }  }  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  y  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
351	[BUG]  [BUGGY]  skipped  -=  x  *  3;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *  3;	  skipped    +=    x    *    3;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
352	[BUG]  [BUGGY]  skipped  +=  x  *  10;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  10;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  10;	  skipped    +=    x    *    3;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
353	[BUG]  [BUGGY]  skipped  *=  rem  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  rem  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  rem  +  1;	  skipped    *=    rem;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
354	[BUG]  [BUGGY]  skipped  *=(x  +  rem));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=(x  +  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=(x  +  rem));	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
355	[BUG]  [BUGGY]  skipped  *=(x  +  rem)/  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=(x  +  rem)/  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=(x  +  rem)/  2;	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
356	[BUG]  [BUGGY]  skipped  *=(x  +  rem)+  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=(x  +  rem)+  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=(x  +  rem)+  1;	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
357	[BUG]  [BUGGY]  skipped  *=(x  +  rem);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=(x  +  rem);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=(x  +  rem);	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
358	[BUG]  [BUGGY]  skipped  +=  rem  *(read  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  *(read  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *(read  -  1);	  skipped    +=    x    *(read    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
359	[BUG]  [BUGGY]  skipped  +=  read  *(x  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  read  *(x  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  read  *(x  -  1);	  skipped    +=    x    *(read    -    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
360	[BUG]  [BUGGY]  skipped  -=  rem;  long  x  =  read(x,  0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem;  long  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem;  long  x  =  read(x,  0,  x);	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
361	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
362	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
363	[BUG]  [BUGGY]  long  x  =  read(x,  0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  long  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	long  x  =  read(x,  0,  x);	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
364	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped,  0,  x);  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
365	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
366	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  x);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  x);	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
367	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  rem);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  rem);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  rem);	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
368	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  x);	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
369	[BUG]  [BUGGY]  final  int  x  =  read(WRITE_BUF,  0,  WRITE_BUF);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(WRITE_BUF,  0,  WRITE_BUF);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(WRITE_BUF,  0,  WRITE_BUF);	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
370	[BUG]  [BUGGY]  final  int  x  =  read(ZipArchiveEntry.SHORT_BUF,  0,  x);  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(ZipArchiveEntry.SHORT_BUF,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(ZipArchiveEntry.SHORT_BUF,  0,  x);	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
371	[BUG]  [BUGGY]  final  int  x  =  read(WRITE_BUF,  0,  WRITE_BUF.length);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(WRITE_BUF,  0,  WRITE_BUF.length);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(WRITE_BUF,  0,  WRITE_BUF.length);	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
372	[BUG]  [BUGGY]  skipped  &=  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  &=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  &=  x;	  skipped    &=    rem;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
373	[BUG]  [BUGGY]  skipped  |=  rem;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  |=  rem;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  |=  rem;	  skipped    &=    rem;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
374	[BUG]  [BUGGY]  skipped  %=  rem;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  %=  rem;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  %=  rem;	  skipped    &=    rem;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
375	[BUG]  [BUGGY]  skipped  &=  rem  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  &=  rem  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  &=  rem  +  1;	  skipped    &=    rem;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
376	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
377	[BUG]  [BUGGY]  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
378	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
379	[BUG]  [BUGGY]  if(x  >  max)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
380	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
381	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
382	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  value);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  value);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  value);	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
383	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  value);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  value);	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
384	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  value);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  value);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  value);	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
385	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  value);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  value);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  value);	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
386	[BUG]  [BUGGY]  final  int  x  =  read(skipped,  0,  value);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(skipped,  0,  value);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(skipped,  0,  value);	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
387	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  size);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  size);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  size);	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
388	[BUG]  [BUGGY]  ((  ZipArchiveEntry)rem).skipped  -=  x;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ((  ZipArchiveEntry)rem).skipped  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	((  ZipArchiveEntry)rem).skipped  -=  x;	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
389	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
390	[BUG]  [BUGGY]  if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
391	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
392	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
393	[BUG]  [BUGGY]  skipped  -=  rem;  ((  ZipArchiveEntry)rem).skipped  -=  x;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem;  ((  ZipArchiveEntry)rem).skipped  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem;  ((  ZipArchiveEntry)rem).skipped  -=  x;	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
394	[BUG]  [BUGGY]  skipped  -=  x.length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x.length  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x.length  +  1;	  skipped    -=    x.length;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
395	[BUG]  [BUGGY]  skipped  -=  x.length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x.length  -  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x.length  -  1;	  skipped    -=    x.length;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
396	[BUG]  [BUGGY]  skipped  -=  x.length  *  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x.length  *  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x.length  *  2;	  skipped    -=    x.length;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
397	[BUG]  [BUGGY]  skipped  -=  x.length  +  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x.length  +  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x.length  +  2;	  skipped    -=    x.length;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
398	[BUG]  [BUGGY]  skipped  -=  rem.length;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  rem.length;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem.length;	  skipped    -=    x.length;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
399	[BUG]  [BUGGY]  skipped  -=  x.length  -  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x.length  -  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x.length  -  2;	  skipped    -=    x.length;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
400	[BUG]  [BUGGY]  skipped  -=  XHORT_BUF  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XHORT_BUF  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XHORT_BUF  +  1;	  skipped    -=    XHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
401	[BUG]  [BUGGY]  skipped  -=  XHORT_BUF,  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XHORT_BUF,  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XHORT_BUF,  x;	  skipped    -=    XHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
402	[BUG]  [BUGGY]  skipped  -=  XHORT_BUF.length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XHORT_BUF.length;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XHORT_BUF.length;	  skipped    -=    XHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
403	[BUG]  [BUGGY]  skipped  -=  XHORT_BUF,  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XHORT_BUF,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XHORT_BUF,  x);	  skipped    -=    XHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
404	[BUG]  [BUGGY]  skipped  -=  XHORT_BUF  *  2;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XHORT_BUF  *  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XHORT_BUF  *  2;	  skipped    -=    XHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
405	[BUG]  [BUGGY]  skipped  -=  x  -  2;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  -  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  -  2;	  skipped    -=    x    -    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
406	[BUG]  [BUGGY]  skipped  -=  x  -  3;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  -  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  -  3;	  skipped    -=    x    -    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
407	[BUG]  [BUGGY]  skipped  +=  x  *  2  +  size;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  2  +  size;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  2  +  size;	  skipped    +=    x    *    2    +    length;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
408	[BUG]  [BUGGY]  skipped  +=  x  *  2  +  value;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  2  +  value;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  2  +  value;	  skipped    +=    x    *    2    +    length;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
409	[BUG]  [BUGGY]  skipped  +=  length  *  2  +  x;  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  length  *  2  +  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  length  *  2  +  x;	  skipped    +=    x    *    2    +    length;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
410	[BUG]  [BUGGY]  skipped  +=  x  *  2  +  length  +  1;  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  2  +  length  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  2  +  length  +  1;	  skipped    +=    x    *    2    +    length;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
411	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(entryEncoding,  encoding);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(entryEncoding,  encoding);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(entryEncoding,  encoding);	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
412	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(entryEncoding);  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(entryEncoding);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(entryEncoding);	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
413	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(entryEncoding,  value);  [CE]  <identifier>  expected  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(entryEncoding,  value);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(entryEncoding,  value);	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
414	[BUG]  [BUGGY]  allowStoredEntriesWithDataDescriptor(false);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  allowStoredEntriesWithDataDescriptor(false);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	allowStoredEntriesWithDataDescriptor(false);	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
415	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
416	[BUG]  [BUGGY]  final  int  x  =  read(ZipBuffer,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(ZipBuffer,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(ZipBuffer,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
417	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  rem);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  rem);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  rem);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
418	[BUG]  [BUGGY]  final  int  x  =  read(X,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(X,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(X,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
419	[BUG]  [BUGGY]  skipped  -=  X  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  +  1;	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
420	[BUG]  [BUGGY]  skipped  -=  X  *  x;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  *  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  *  x;	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
421	[BUG]  [BUGGY]  skipped  -=  X  *(x);  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  *(x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  *(x);	  skipped    -=    X;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
422	[BUG]  [BUGGY]  skipd  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  +=  x  +  1;	  skipd    +=    x;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
423	[BUG]  [BUGGY]  skipd  +=  rem;  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  +=  rem;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  +=  rem;	  skipd    +=    x;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
424	[BUG]  [BUGGY]  skipd  /=  x;  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  /=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  /=  x;	  skipd    +=    x;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
425	[BUG]  [BUGGY]  skipd  +=  x  *  2;  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  +=  x  *  2;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  +=  x  *  2;	  skipd    +=    x;    	non-compiled	[CE]  <identifier>  expected	110	None	replace
426	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
427	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
428	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
429	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
430	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  rem);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  rem);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(SKIP_BUF,  0,  rem);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    	non-compiled	[CE]  <identifier>  expected	100	None	replace
431	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
432	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }	  skipped    -=    x;    final    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
433	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  rem.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  rem.length);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  rem.length);	  skipped    -=    x;    final    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
434	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  size);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  size);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  size);	  skipped    -=    x;    final    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
435	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    final    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
436	[BUG]  [BUGGY]  skipped  +=  value  *(skipped  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  value  *(skipped  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  value  *(skipped  -  1);	  skipped    +=    rem    *(skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
437	[BUG]  [BUGGY]  skipped  +=  lfh  *(skipped  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  lfh  *(skipped  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  lfh  *(skipped  -  1);	  skipped    +=    rem    *(skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
438	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  <  0)?  0  :  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  <  0)?  0  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  <  0)?  0  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
439	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  skip(x):  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  skip(x):  0);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  >  0)?  skip(x):  0);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
440	[BUG]  [BUGGY]  read(x,  0,  x);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	read(x,  0,  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
441	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  1  :  x);  [CE]  <identifier>  expected  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  >  0)?  1  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  >  0)?  1  :  x);	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
442	[BUG]  [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  <  0)  {  skipped  =  csize;  }  [CE]  <identifier>  expected  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  csize  =  read(x,  0,  csize);  if(csize  <  0)  {  skipped  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  csize  =  read(x,  0,  csize);  if(csize  <  0)  {  skipped  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skipped    =    csize;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
443	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skipped  =  csize;  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skipped  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skipped  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skipped    =    csize;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
444	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  +  1);	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
445	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  +  1);	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
446	[BUG]  [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SKIP_BUF,  0,  (int)(x  +  1);	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
447	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  +  1));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  +  1));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(rem  +  1));	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
448	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(rem  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(rem  +  1);	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
449	[BUG]  [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(XML_BUF,  0,  (int)(x  +  1);	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
450	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  1));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  1));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  +  1));	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
451	[BUG]  [BUGGY]  skipped  +=(x  >=  >  0)?  rem  :  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  >=  >  0)?  rem  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  >=  >  0)?  rem  :  x;	  skipped    +=(x    <    >    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
452	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
453	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
454	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  else  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  else  {	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
455	[BUG]  [BUGGY]  skipped  /=  2L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  2L;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  2L;	  skipped    /=    2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
456	[BUG]  [BUGGY]  skipped  /=  2  +(skipped  <  =  0?  x  :  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  2  +(skipped  <  =  0?  x  :  0);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  2  +(skipped  <  =  0?  x  :  0);	  skipped    /=    2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
457	[BUG]  [BUGGY]  skipped  /=  2  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  2  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  2  +  1;	  skipped    /=    2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
458	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
459	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skippe  =  csize;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skippe  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skippe  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
460	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skippe  =  csize;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skippe  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skippe  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
461	[BUG]  [BUGGY]  if(skipped  >  0)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
462	[BUG]  [BUGGY]  skipped  +=  length  *(x  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  length  *(x  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  length  *(x  -  1);	  skipped    +=    x    *(x    -    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
463	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
464	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
465	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
466	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
467	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
468	[BUG]  [BUGGY]  skipped  -=  x  *(value  -  1L);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  *(value  -  1L);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(value  -  1L);	  skipped    -=    x    *(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
469	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skip  >  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skip  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skip  >  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
470	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
471	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
472	[BUG]  [BUGGY]  if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(rem  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  else  {	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
473	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
474	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip(i,  x);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip(i,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  skipped;  i++)  {  skip(i,  x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
475	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  null);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  null);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  null);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
476	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip(i,  x);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip(i,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  i++)  {  skip(i,  x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
477	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip(i,  x);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip(i,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  skip(i,  x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
478	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  i++)  {  skip(i,  x);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  i++)  {  skip(i,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  i++)  {  skip(i,  x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
479	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  skipped);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  skipped);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  skipped);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
480	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(value,  0,  x);  }	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
481	[BUG]  [BUGGY]  skipped  -=  x;  int  x  =  read(skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  int  x  =  read(skipped,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  int  x  =  read(skipped,  0,  x);	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
482	[BUG]  [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(value,  0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(value,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  int  x  =  read(value,  0,  x);	  skipped    -=    x;    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
483	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  +  rem));  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  +  rem));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  +  rem));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
484	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  +  rem));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  +  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(value  +  rem));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
485	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  rem);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  rem);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  rem);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
486	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  1);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  1);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
487	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
488	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
489	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
490	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  y);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  y);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  y);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
491	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  value);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  value);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  value);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
492	[BUG]  [BUGGY]  skipped  -=  value  *(skipped  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  value  *(skipped  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  value  *(skipped  -  1);	  skipped    -=    x    *(skipped    -    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
493	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
494	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
495	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
496	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
497	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
498	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
499	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
500	[BUG]  [BUGGY]  skipped  *=  rem  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  rem  -  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  rem  -  1;	  skipped    +=    rem    -    1;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
501	[BUG]  [BUGGY]  skipped  +=  value  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  value  -  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  value  -  1;	  skipped    +=    rem    -    1;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
502	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
503	[BUG]  [BUGGY]  if(rem  >=  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(rem  >=  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(rem  >=  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
504	[BUG]  [BUGGY]  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x  +  1;	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
505	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
506	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip(x);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skip(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
507	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped(x);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
508	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skip(x);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skip(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skip(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
509	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe(x);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skippe(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
510	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped(x);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
511	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
512	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
513	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
514	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
515	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
516	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  Math.max(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
517	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  rem?  rem  :  SKIP_BUF.length));	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
518	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.ceil(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.ceil(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.ceil(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
519	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.pow(10,  x);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.pow(10,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.pow(10,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
520	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  len;  i++)  {  skipped  +=  Math.max(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
521	[BUG]  [BUGGY]  skipped  -=  x  +  5;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  5;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  5;	  skipped    -=    x    +    2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
522	[BUG]  [BUGGY]  if(skipped  >=  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >=  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >=  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
523	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
524	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipd  -=  x;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipd  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipd  -=  x;  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
525	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  size);  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  size);  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  size);  skipped  -=  x;  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
526	[BUG]  [BUGGY]  skipped  *=  XHORT_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  XHORT_BUF;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  XHORT_BUF;	  skipped    -=    XHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
527	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
528	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
529	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
530	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
531	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {	  skipped    -=    x;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
532	[BUG]  [BUGGY]  skipd  *=  x;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  *=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  *=  x;	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
533	[BUG]  [BUGGY]  skipped  *=  xx;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  xx;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  xx;	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
534	[BUG]  [BUGGY]  skipped  *=  rem.length;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  rem.length;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  rem.length;	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
535	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
536	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
537	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  y);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  y);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  y);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
538	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  value);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  value);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  value);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
539	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  rem);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  rem);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  rem);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
540	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skip,  x);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skip,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skip,  x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
541	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  Math.min(skipped,  x);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  Math.min(skipped,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  Math.min(skipped,  x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
542	[BUG]  [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
543	[BUG]  [BUGGY]  skipped  +=  x  *  8;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  8;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  8;	  skipped    +=    x    *    3;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
544	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skipped    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
545	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skipped    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
546	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
547	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
548	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  size);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  size);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  size);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
549	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
550	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >>  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >>  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >>  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
551	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
552	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
553	[BUG]  [BUGGY]  readFully(x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  readFully(x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	readFully(x)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
554	[BUG]  [BUGGY]  safeNegate(x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  safeNegate(x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	safeNegate(x)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
555	[BUG]  [BUGGY]  safeGet(x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  safeGet(x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	safeGet(x)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
556	[BUG]  [BUGGY]  readFully(x,  rem)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  readFully(x,  rem)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	readFully(x,  rem)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
557	[BUG]  [BUGGY]  readFully(x)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  readFully(x)  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	readFully(x)  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
558	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
559	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  else  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  }  else  {	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
560	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
561	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  else  {	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
562	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
563	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
564	[BUG]  [BUGGY]  skipped  -=  x  +  1L;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1L;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1L;	  skipped    -=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
565	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }	  skipped    -=    x;    final    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
566	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
567	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  }  else  {	  skipped    -=    x;    final    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
568	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
569	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize!=  0)  {  skipped  =  0;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
570	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >>  0)  {  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >>  0)  {  skipped  =  0;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >>  0)  {  skipped  =  0;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
571	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  skipped  =  0;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  skipped  =  0;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  ==  0)  {  skipped  =  0;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >=    0)    {    skipped    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
572	[BUG]  [BUGGY]  skipped  *=  8;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  8;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  8;	  skipped    *=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
573	[BUG]  [BUGGY]  skipped  *=  10;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  10;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  10;	  skipped    *=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
574	[BUG]  [BUGGY]  if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
575	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
576	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
577	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
578	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  -  1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  -  1);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  -  1);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
579	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  -  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  -  1);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  -  1);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
580	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
581	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
582	[BUG]  [BUGGY]  lastStoredEntry  -=  x;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  lastStoredEntry  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  -=  x;	  skipd    -=    rem;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
583	[BUG]  [BUGGY]  skipd  -=  value;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  -=  value;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  -=  value;	  skipd    -=    rem;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
584	[BUG]  [BUGGY]  lastStoredEntry  -=  rem;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  lastStoredEntry  -=  rem;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  -=  rem;	  skipd    -=    rem;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
585	[BUG]  [BUGGY]  skipped  /=  x  +  1L;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  +  1L;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  +  1L;	  skipped    /=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
586	[BUG]  [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  size);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  size);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  x  =  read(x,  0,  size);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
587	[BUG]  [BUGGY]  skipped  -=  1;  x  =  read(x,  0,  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  1;  x  =  read(x,  0,  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  1;  x  =  read(x,  0,  1);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
588	[BUG]  [BUGGY]  skipped  -=  x;  x  =  read(skipped,  0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  x  =  read(skipped,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  x  =  read(skipped,  0,  x);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
589	[BUG]  [BUGGY]  skipped  -=  X  +(int)Math.pow(10,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  +(int)Math.pow(10,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  +(int)Math.pow(10,  x);	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
590	[BUG]  [BUGGY]  skipped  -=  X  +(int)Math.ceil(x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  +(int)Math.ceil(x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  +(int)Math.ceil(x);	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
591	[BUG]  [BUGGY]  skipped  -=  X  +(int)Math.rint(x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  +(int)Math.rint(x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  +(int)Math.rint(x);	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
592	[BUG]  [BUGGY]  skipped  -=  X  +(int)Math.floor(x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  +(int)Math.floor(x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  +(int)Math.floor(x);	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
593	[BUG]  [BUGGY]  skipped  -=  X  +(int)Math.pow(0,  x);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  +(int)Math.pow(0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  +(int)Math.pow(0,  x);	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
594	[BUG]  [BUGGY]  skipped  +=  x  +  1;  x  +=  x  +  3;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  +  1;  x  +=  x  +  3;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  1;  x  +=  x  +  3;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
595	[BUG]  [BUGGY]  skipped  +=  x  +  1;  x  +=  y  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  +  1;  x  +=  y  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  1;  x  +=  y  +  1;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
596	[BUG]  [BUGGY]  skipped  +=  x  +  1;  x  +=  length  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  +  1;  x  +=  length  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  1;  x  +=  length  +  1;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
597	[BUG]  [BUGGY]  skipped  -=  value  *(rem  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  value  *(rem  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  value  *(rem  -  1);	  skipped    -=    x    *(rem    -    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
598	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
599	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
600	[BUG]  [BUGGY]  skipped  -=  x.longValue;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x.longValue;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x.longValue;	  skipped    -=    value;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
601	[BUG]  [BUGGY]  skipped  -=  x.longValue();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x.longValue();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x.longValue();	  skipped    -=    value;    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
602	[BUG]  [BUGGY]  if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
603	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
604	[BUG]  [BUGGY]  if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >=  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
605	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
606	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
607	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
608	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
609	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
610	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
611	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
612	[BUG]  [BUGGY]  skipped  -=  x  +  1;  long  x  =  read(x,  0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  long  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  long  x  =  read(x,  0,  x);	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
613	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
614	[BUG]  [BUGGY]  (int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  (int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	(int)(x  >  max))  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
615	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
616	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
617	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  size;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
618	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  value;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
619	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  1;  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  1;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
620	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  rem;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  rem;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  rem;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
621	[BUG]  [BUGGY]  skipped  -=  x  +  1;  x  -=  0;  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  x  -=  0;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  x  -=  0;	  skipped    -=    x;    x    -=    x;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
622	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
623	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
624	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
625	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
626	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
627	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
628	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
629	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
630	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
631	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
632	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
633	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
634	[BUG]  [BUGGY]  skipped  *=  MIN_WORD_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  MIN_WORD_BUF;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  MIN_WORD_BUF;	  skipped    -=    MIN_WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
635	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
636	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
637	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(ch,  0,  skipped,  0,  x);  }  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(ch,  0,  skipped,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(ch,  0,  skipped,  0,  x);  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
638	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(ceiling,  0,  skipped,  0,  x);  }  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(ceiling,  0,  skipped,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(ceiling,  0,  skipped,  0,  x);  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
639	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(buf,  0,  skipped,  0,  x);  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(buf,  0,  skipped,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  System.arraycopy(buf,  0,  skipped,  0,  x);  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
640	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
641	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skippe;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skippe;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skippe;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
642	[BUG]  [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
643	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skip  >  0)  {  return  skip;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skip  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skip  >  0)  {  return  skip;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
644	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
645	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  }  else  {  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
646	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
647	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
648	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
649	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [CE]  <identifier>  expected  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
650	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  1;  }  [CE]  <identifier>  expected  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  1;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
651	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [CE]  <identifier>  expected  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  length;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
652	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [CE]  <identifier>  expected  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  y;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
653	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [CE]  <identifier>  expected  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  size;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
654	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  in.read();  }  [CE]  <identifier>  expected  [FE]                                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  in.read();  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  in.read();  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
655	[BUG]  [BUGGY]  skipped  +=(x!=  0)?  rem  :  x;  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x!=  0)?  rem  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x!=  0)?  rem  :  x;	  skipped    +=(x    <    =    0)?    rem    :    x;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
656	[BUG]  [BUGGY]  skipped  +=  x  *(read  *  2  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *(read  *  2  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *(read  *  2  -  1);	  skipped    +=    x    *(read    -    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
657	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
658	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
659	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
660	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
661	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
662	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
663	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.max(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.max(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.max(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
664	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
665	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
666	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  y);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  y);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  y);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
667	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
668	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  value);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  value);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  value);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
669	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
670	[BUG]  [BUGGY]  skipped  -=  x;  int  x  =  read(SKIP_BUF,  0,  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  int  x  =  read(SKIP_BUF,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  int  x  =  read(SKIP_BUF,  0,  x);	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
671	[BUG]  [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(rem,  0,  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(rem,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  int  x  =  read(rem,  0,  x);	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
672	[BUG]  [BUGGY]  skipped  /=  x  *  8;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  *  8;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  *  8;	  skipped    /=    x    *    4;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
673	[BUG]  [BUGGY]  if(x  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
674	[BUG]  [BUGGY]  if(x  <  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  -1)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
675	[BUG]  [BUGGY]  if(x  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
676	[BUG]  [BUGGY]  if(x  <  -1)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  -1)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  -1)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
677	[BUG]  [BUGGY]  if(x  <  0)  {  throw  new  IllegalArgumentException( " ".length());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  throw  new  IllegalArgumentException( " ".length());  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  throw  new  IllegalArgumentException( " ".length());  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
678	[BUG]  [BUGGY]  if(x  <  0)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  throw  new  IllegalArgumentException( ". ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
679	[BUG]  [BUGGY]  if(x  <  0)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
680	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  read(x);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  read(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  skipped  +=  read(x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
681	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  read(x);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  read(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  size;  ++i)  {  skipped  +=  read(x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
682	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  read(x);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  read(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipd  +=  read(x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
683	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(0);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(0);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(0);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
684	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(y);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(y);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(y);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
685	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  skipped  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  skipped  =  read(x,  0,  (int)(SHORT_BUF.length  >  rem?  SHORT_BUF.length  :  x);	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
686	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
687	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
688	[BUG]  [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >=  -1)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
689	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  else  {	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
690	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  else  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  else  {  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  }  else  {	  skipped    +=    x    +    1;    int    x    =    read(value,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
691	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
692	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x  +  1);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x  +  1);  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
693	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(value  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(value  +  1);	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
694	[BUG]  [BUGGY]  final  int  x  =  read(X,  0,  (int)(x  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(X,  0,  (int)(x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(X,  0,  (int)(x  +  1);	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
695	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  len;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
696	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  y;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  y;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  y;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
697	[BUG]  [BUGGY]  skipped  *=  MIN_DWORD_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  MIN_DWORD_BUF;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  MIN_DWORD_BUF;	  skipped    -=    MIN_DWORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
698	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
699	[BUG]  [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
700	[BUG]  [BUGGY]  skipped  +=  x  *  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
701	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
702	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
703	[BUG]  [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(x,  0,  x);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x  +  1;  int  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;  int  x  =  read(x,  0,  x);	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
704	[BUG]  [BUGGY]  int  x  =  read(x,  0,  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(x,  0,  x);	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
705	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
706	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
707	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  skipped  -=  x;  }  else  {  }	  skipped    -=    x;    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
708	[BUG]  [BUGGY]  skipped  +=  skipped  *(value  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  skipped  *(value  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  skipped  *(value  -  1);	  skipped    +=    x    *(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
709	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
710	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped(i,  x);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped(i,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped(i,  x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
711	[BUG]  [BUGGY]  Integer  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Integer  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Integer  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
712	[BUG]  [BUGGY]  Integer  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Integer  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Integer  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip(i,    x);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
713	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skipped    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
714	[BUG]  [BUGGY]  if(skipped  >  0)  {  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skipped  =  csize;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skipped  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skipped  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skipped    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
715	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipd  =  csize;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipd  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipd  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skipped    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
716	[BUG]  [BUGGY]  skipped  +=  x  -  1  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  -  1  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  -  1  +  1;	  skipped    +=    x    *    2    +    1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
717	[BUG]  [BUGGY]  skipped  /=  x  /  4;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  x  /  4;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  /  4;	  skipped    /=    x    *    4;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
718	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
719	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
720	[BUG]  [BUGGY]  int  x  =  read(x,  0,  x);  skipped  -=  x;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(x,  0,  x);  skipped  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(x,  0,  x);  skipped  -=  x;	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
721	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  break;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  break;  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
722	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
723	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  [Delete]  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	[Delete]	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
724	[BUG]  [BUGGY]  parent  <  0  ||  x  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  parent  <  0  ||  x  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	parent  <  0  ||  x  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
725	[BUG]  [BUGGY]  parent  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  parent  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	parent  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
726	[BUG]  [BUGGY]  parent  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  parent  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	parent  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
727	[BUG]  [BUGGY]  parent  <  0  ||  x  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  parent  <  0  ||  x  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	parent  <  0  ||  x  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
728	[BUG]  [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  String,Integer>(x);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  String,Integer>(x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	pendingTwins  =  new  LinkedHashMap  <  String,Integer>(x);	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
729	[BUG]  [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  String,Integer>();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  pendingTwins  =  new  LinkedHashMap  <  String,Integer>();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	pendingTwins  =  new  LinkedHashMap  <  String,Integer>();	  if(x    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
730	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
731	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
732	[BUG]  [BUGGY]  ||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
733	[BUG]  [BUGGY]  skipped  -=  X  +(skipped  -  x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  +(skipped  -  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  +(skipped  -  x);	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
734	[BUG]  [BUGGY]  skipped  -=  X  +(skipped  /  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X  +(skipped  /  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X  +(skipped  /  x);	  skipped    -=    X;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
735	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  x);  skipped  +=  x;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  x);  skipped  +=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  x);  skipped  +=  x;	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
736	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
737	[BUG]  [BUGGY]  read(x)>  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  read(x)>  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	read(x)>  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
738	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
739	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
740	[BUG]  [BUGGY]  Integer  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Integer  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Integer  x  =  read(x,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
741	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipd  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipd  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipd  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(x,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
742	[BUG]  [BUGGY]  if(x  <  0  ||  x  >  rem)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0  ||  x  >  rem)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0  ||  x  >  rem)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
743	[BUG]  [BUGGY]  ||  x  <  0  ||  x  >  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0  ||  x  >  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0  ||  x  >  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skip;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
744	[BUG]  [BUGGY]  skipd  &=  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipd  &=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  &=  x;	  skipped    &=    rem;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
745	[BUG]  [BUGGY]  skipped  %  2  =  x;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  %  2  =  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  %  2  =  x;	  skipped    &=    rem;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
746	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
747	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
748	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x  +  1;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }	  if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
749	[BUG]  [BUGGY]  skipped  +=  x  *  1;  x  +=  x  *  1;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  x  *  1;  x  +=  x  *  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  1;  x  +=  x  *  1;	  skipped    +=    x    +    1;    x    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
750	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
751	[BUG]  [BUGGY]  Integer  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Integer  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Integer  x  =  read(value,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(value,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
752	[BUG]  [BUGGY]  skipped  /=  2  +(skipped  <  =  0?  x  :  x);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  2  +(skipped  <  =  0?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  2  +(skipped  <  =  0?  x  :  x);	  skipped    /=    2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
753	[BUG]  [BUGGY]  skipped  /=  2  +(skipped  <  =  x)?  0  :  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  /=  2  +(skipped  <  =  x)?  0  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  2  +(skipped  <  =  x)?  0  :  x;	  skipped    /=    2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
754	[BUG]  [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
755	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skip(x);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skip(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skip(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
756	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skip(x);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skip(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  rem;  ++i)  {  skip(x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skip(x);    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
757	[BUG]  [BUGGY]  skipped  -=  X_WORD_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X_WORD_BUF;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X_WORD_BUF;	  skipped    -=    MIN_WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
758	[BUG]  [BUGGY]  skipped  -=  XML_SHORT_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XML_SHORT_BUF;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XML_SHORT_BUF;	  skipped    -=    MIN_WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
759	[BUG]  [BUGGY]  skipped  -=  XY_WORD_BUF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XY_WORD_BUF;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XY_WORD_BUF;	  skipped    -=    MIN_WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
760	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
761	[BUG]  [BUGGY]  read(x)>  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  read(x)>  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	read(x)>  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
762	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
763	[BUG]  [BUGGY]  read(x)>  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  read(x)>  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	read(x)>  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
764	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(skipped,  x);  }  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(skipped,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(skipped,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.max(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
765	[BUG]  [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  while(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	while(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
766	[BUG]  [BUGGY]  ||  x  <  0  ||  x  >  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0  ||  x  >  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0  ||  x  >  size)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
767	[BUG]  [BUGGY]  ||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
768	[BUG]  [BUGGY]  skipped  *=  x  +(skipped  <  =  0?  x  :  x);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  x  +(skipped  <  =  0?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  x  +(skipped  <  =  0?  x  :  x);	  skipped    *=    x;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
769	[BUG]  [BUGGY]  skipped  *=  x  +(int)(value  /  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  x  +(int)(value  /  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  x  +(int)(value  /  x);	  skipped    *=    x;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
770	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  -  x));  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  -  x));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  -  x));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
771	[BUG]  [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  -  x));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(rem,  0,  (int)(x  -  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(rem,  0,  (int)(x  -  x));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
772	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  -  x));  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  -  x));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  -  x));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(rem    -    x));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
773	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  *  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  *  1);	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    (int)(x    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
774	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
775	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {  break;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  }  else  {  break;  }	  skipped    +=    x    +    1;    ((    ZipArchiveEntry)rem).skip();    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
776	[BUG]  [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;  x  =  read(x,  0,  x  +  1);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
777	[BUG]  [BUGGY]  double  -=  x;  x  =  read(x,  0,  x);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  double  -=  x;  x  =  read(x,  0,  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	double  -=  x;  x  =  read(x,  0,  x);	  skipped    -=    x;    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
778	[BUG]  [BUGGY]  skip  -=  x;  x  -=  x;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skip  -=  x;  x  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skip  -=  x;  x  -=  x;	  skipped    -=    x;    x    -=    x;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
779	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
780	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
781	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
782	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipd  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
783	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
784	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
785	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  long  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped);  }	  skipped    -=    x;    long    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
786	[BUG]  [BUGGY]  skipped  -=(x  <  0)?  rem  :  x;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=(x  <  0)?  rem  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=(x  <  0)?  rem  :  x;	  skipped    +=(x    <    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
787	[BUG]  [BUGGY]  skipped  +=(x  <  0)?  value  :  x;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=(x  <  0)?  value  :  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  0)?  value  :  x;	  skipped    +=(x    <    0)?    rem    :    x;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
788	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
789	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
790	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    +=    x    +    1;    final    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
791	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
792	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
793	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
794	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    value);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
795	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  }  else  {  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
796	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    (int)(x    +    1));    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
797	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
798	[BUG]  [BUGGY]  skipped  -=  XHORT_BUF  *  x;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XHORT_BUF  *  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XHORT_BUF  *  x;	  skipped    -=    XHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
799	[BUG]  [BUGGY]  skipped  -=  XHORT_BUF  +  x;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XHORT_BUF  +  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XHORT_BUF  +  x;	  skipped    -=    XHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
800	[BUG]  [BUGGY]  skipped  +=  rem  *  2  +  length;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  rem  *  2  +  length;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *  2  +  length;	  skipped    +=    x    *    2    +    length;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
801	[BUG]  [BUGGY]  Integer  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Integer  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Integer  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
802	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipd  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipd  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipd  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
803	[BUG]  [BUGGY]  skipped  -=  XYEAR_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  XYEAR_BUF;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XYEAR_BUF;	  skipped    -=    SHORT_BUF;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
804	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
805	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  System.arraycopy(x,  0,  skipped);  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
806	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  break;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  break;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  int  x  =  read(x,  0,  x);  }  else  {  break;  }	  skipped    -=    x;    int    x    =    read(x,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
807	[BUG]  [BUGGY]  skipped  -=  X_DWORD_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  X_DWORD_BUF;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X_DWORD_BUF;	  skipped    -=    MIN_DWORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
808	[BUG]  [BUGGY]  LastStoredEntry  entry  =  ze.getValue();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  LastStoredEntry  entry  =  ze.getValue();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	LastStoredEntry  entry  =  ze.getValue();	  lastStoredEntry    =    ze.getValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
809	[BUG]  [BUGGY]  lastStoredEntry  =  ze.getLastSegmentedEntry();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  lastStoredEntry  =  ze.getLastSegmentedEntry();  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  =  ze.getLastSegmentedEntry();	  lastStoredEntry    =    ze.getValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
810	[BUG]  [BUGGY]  pendingEntry()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  pendingEntry()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	pendingEntry()  {  throw  new  IllegalArgumentException( " ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
811	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	aughtExceptionHandler.throwAsIOException( " ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
812	[BUG]  [BUGGY]  aughtException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  aughtException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	aughtException( " ");  }	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
813	[BUG]  [BUGGY]  pendingEntry  =  entryEncoding.decode(x,  0,  rem);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  pendingEntry  =  entryEncoding.decode(x,  0,  rem);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	pendingEntry  =  entryEncoding.decode(x,  0,  rem);	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
814	[BUG]  [BUGGY]  pendingEntry  =  entryEncoding.skip(x);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  pendingEntry  =  entryEncoding.skip(x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	pendingEntry  =  entryEncoding.skip(x);	  if(x    ==    -1)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
815	[BUG]  [BUGGY]  while(x  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  while(x  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	while(x  <  =  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
816	[BUG]  [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  x?  x  :  x);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  x?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  x  =  read(SKIP_BUF,  0,  (int)(SKIP_BUF.length  >  x?  x  :  x);	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    x;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
817	[BUG]  [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  skipped  -=  x;  int  x  =  read(rem,  0,  x);  }  else  {  throw  new  IllegalStateException( " ");  }	  skipped    -=    x;    int    x    =    read(rem,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
818	[BUG]  [BUGGY]  skipped  -=  skipped  *(value  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  -=  skipped  *(value  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  skipped  *(value  -  1);	  skipped    -=    x    *(value    -    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
819	[BUG]  [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	while(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
820	[BUG]  [BUGGY]  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
821	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x);	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
822	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  read(x);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  read(x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  read(x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
823	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x,  0,  x);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x,  0,  x);  }	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
824	[BUG]  [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  skipped  =  read(x,  0,  (int)(SKIP_BUF.length  >  rem?  x  :  x));	  if(skipped    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    read(x);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
825	[BUG]  [BUGGY]  read(x)>  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  read(x)>  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	read(x)>  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
826	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
827	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  value);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  value);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  value);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
828	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  rem);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  rem);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  rem);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
829	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x  +  1;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
830	[BUG]  [BUGGY]  read(x)>  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  read(x)>  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	read(x)>  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    Math.min(skipped,    x);    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
831	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
832	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  skipped    -=    x;    final    int    x    =    read(value,    0,    x);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
833	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
834	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skip  =  csize;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skip  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skip  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
835	[BUG]  [BUGGY]  if(skipped  >  0)  {  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skip  =  csize;  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skip  =  csize;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  final  int  x  =  read(x,  0,  csize);  if(x  >  0)  {  skip  =  csize;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    skip    =    csize;    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
836	[BUG]  [BUGGY]  Integer  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Integer  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Integer  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(value,    x    +    1);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
837	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
838	[BUG]  [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(x  <  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(SHORT_BUF,  0,  (int)(x  <  0));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(SHORT_BUF,  0,  (int)(x  <  0));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
839	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  <  0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  <  0);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  <  0);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    <    0));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
840	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
841	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
842	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipd;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipd;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipd;  }	  if(x    >    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    final    int    csize    =    read(x,    0,    csize);    if(csize    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
843	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  skipped  +=  x  +  1;  }  else  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    ++i)    {    skipped    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
844	[BUG]  [BUGGY]  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
845	[BUG]  [BUGGY]  Integer  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Integer  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Integer  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
846	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipd  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipd  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipd  +=  x  +  1;  }	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
847	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  +  rem));  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  +  rem));  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  +  rem));  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
848	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  *  rem));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  *  rem));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  *  rem));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
849	[BUG]  [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  length));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  final  int  x  =  read(x,  0,  (int)(x  +  length));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	final  int  x  =  read(x,  0,  (int)(x  +  length));	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
850	[BUG]  [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  rem);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  rem);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  skipped  -=  x;  final  int  x  =  read(x,  0,  x  +  rem);  }	  skipped    -=    x;    final    int    x    =    read(x,    0,    (int)(x    +    rem));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
851	[BUG]  [BUGGY]  skipped  +=  lfh  *(x  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  lfh  *(x  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  lfh  *(x  -  1);	  skipped    +=    rem    *(x    -    1);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
852	[BUG]  [BUGGY]  skipped  +=  skipped  *(x  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  +=  skipped  *(x  -  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  skipped  *(x  -  1);	  skipped    +=    rem    *(x    -    1);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
853	[BUG]  [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
854	[BUG]  [BUGGY]  ||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  ||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	||  x  <  0  ||  x  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
855	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skipped;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skipped;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >=  0)  {  return  skipped;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
856	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipd;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipd;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipd;  }	  if(x    <    =    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    if(skipped    >    0)    {    return    skipped;    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
857	[BUG]  [BUGGY]  Integer  x  =  read(SKIP_BUF,  0,  x  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  Integer  x  =  read(SKIP_BUF,  0,  x  +  1);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	Integer  x  =  read(SKIP_BUF,  0,  x  +  1);	  skipped    +=    x    +    1;    int    x    =    read(SKIP_BUF,    0,    x    +    1);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
858	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  }	  skipped    +=    x    +    1;    final    int    x    =    read(rem,    0,    x);    skipped    +=    x    +    1;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
859	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
860	[BUG]  [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  <  =  0)  {  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }	  skipped    +=    x    +    1;    if(x    <    0)    {    for(int    i    =    0;    i    <    x;    i++)    {    skip    +=    x    +    1;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
861	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(skipped,  x);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(skipped,  x);  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(skipped,  x);  }	  if(x    >    max)    {    for(int    i    =    0;    i    <    x;    i++)    {    skipped    +=    Math.min(rem,    x);    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
862	[BUG]  [BUGGY]  skipped  *=  XMLCharacterEncoding.quoteAsString(x);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  XMLCharacterEncoding.quoteAsString(x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  XMLCharacterEncoding.quoteAsString(x);	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
863	[BUG]  [BUGGY]  skipped  *=  XMLCharacterEncoding.UTF8;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  XMLCharacterEncoding.UTF8;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  XMLCharacterEncoding.UTF8;	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
864	[BUG]  [BUGGY]  skipped  *=  XMLCharacterEncoding.quoteAsString(x));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  XMLCharacterEncoding.quoteAsString(x));  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  XMLCharacterEncoding.quoteAsString(x));	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
865	[BUG]  [BUGGY]  skipped  *=  XMLCharacterEncoding.quote(x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  skipped  *=  XMLCharacterEncoding.quote(x);  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  XMLCharacterEncoding.quote(x);	  skipped    *=    rem;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
866	[BUG]  [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(skipped  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
867	[BUG]  [BUGGY]  if(x  <  =  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  if(x  <  =  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  }	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
868	[BUG]  [BUGGY]  int  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }      [BUGGY]  int  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  [BUGGY]      }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	int  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;	  skipped    -=    x;    ((    ZipArchiveEntry)rem).skip();    skipped    -=    x;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
