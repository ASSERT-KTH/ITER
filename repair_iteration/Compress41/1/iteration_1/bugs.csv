bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  -=  x;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	add	skipped  -=  x;	skipped  +=  x;  	compilable	  [FE]  AssertionError  	1	2	replace
2	[BUG]  [BUGGY]  skipped  -=  x;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  -=  x;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x;	skipped  +=  x;  	compilable	  [FE]  AssertionError  	1	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  +=  x  +  1;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	add	skipped  +=  x  +  1;	skipped  +=  x;  	compilable	  [FE]  AssertionError  	1	2	replace
4	[BUG]  [BUGGY]  skipped  +=  x  +  1;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  +=  x  +  1;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  1;	skipped  +=  x;  	compilable	  [FE]  AssertionError  	1	2	replace
5	[BUG]  [BUGGY]  skipped  +=  rem;  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  +=  rem;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem;	skipped  +=  x;  	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  skipped  /=  x;  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  /=  x;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x;	skipped  +=  x;  	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  skipped  +=  x  *  2;  [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  +=  x  *  2;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  2;	skipped  +=  x;  	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  skipped  +=  x  -  1;  [CE]  <identifier>  expected  [FE]              AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  +=  x  -  1;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  -  1;	skipped  +=  x;  	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]    [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	  	skipped  +=  x;  	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  skipped  +=  SHORT_BUF;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  +=  SHORT_BUF;  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  SHORT_BUF;	skipped  +=  x;  	non-compiled	[CE]  <identifier>  expected	1	None	replace
11	[BUG]  [BUGGY]  skipped  +=  x  *(skipped  -  1);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }  [BUGGY]  skipped  +=  x  *(skipped  -  1);  [BUGGY]  }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *(skipped  -  1);	skipped  +=  x;  	non-compiled	[CE]  <identifier>  expected	1	None	replace
