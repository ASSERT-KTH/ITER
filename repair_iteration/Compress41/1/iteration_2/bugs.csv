bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  skipped  /=  x  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  /=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  +  1;	  skipped    /=    x;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  skipped  /=  rem;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  /=  rem;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  rem;	  skipped    /=    x;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  skipped  /=  x  *  2;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  /=  x  *  2;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  *  2;	  skipped    /=    x;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  skipped  /=  x.length;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  /=  x.length;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x.length;	  skipped    /=    x;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
5	[BUG]  [BUGGY]  skipped  /=  x  +  2;  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  /=  x  +  2;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  +  2;	  skipped    /=    x;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  skipped  /=  x  *  4;  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  /=  x  *  4;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  x  *  4;	  skipped    /=    x;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  skipped  -=  x  +  1;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  1;	  skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  skipped  -=  rem;  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  rem;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  rem;	  skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  skipped  -=  x  *  2;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x  *  2;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *  2;	  skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  skipped  -=  x  -  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x  -  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  -  1;	  skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  skipped  -=  x.length;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x.length;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x.length;	  skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  skipped  -=  x  +  2;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x  +  2;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  +  2;	  skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  skipped  +=  x  /  2;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  /  2;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  /  2;	  skipped    +=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
14	[BUG]  [BUGGY]  skipped  +=  x  *  4;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *  4;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  4;	  skipped    +=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
15	[BUG]  [BUGGY]  skipped  +=  x  *  1;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  1;	  skipped    +=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  skipped  +=  x  *  3;  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *  3;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  3;	  skipped    +=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  skipped  -=  x;  x  -=  x;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  x  -=  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    x  -=  x;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
18	[BUG]  [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    final  int  x  =  read(x,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
19	[BUG]  [BUGGY]  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  final  int  x  =  read(rem,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    final  int  x  =  read(rem,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
20	[BUG]  [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(rem  -  x));  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    final  int  x  =  read(x,  0,  (int)(rem  -  x));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
21	[BUG]  [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  value);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    final  int  x  =  read(x,  0,  value);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
22	[BUG]  [BUGGY]  skipped  -=  x;  int  x  =  read(rem,  0,  x);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  int  x  =  read(rem,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    int  x  =  read(rem,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
23	[BUG]  [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  +  rem));  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  +  rem));  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    final  int  x  =  read(x,  0,  (int)(x  +  rem));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
24	[BUG]  [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  final  int  x  =  read(x,  0,  (int)(x  <  0));  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    final  int  x  =  read(x,  0,  (int)(x  <  0));	  	non-compiled	[CE]  <identifier>  expected	1	None	add
25	[BUG]  [BUGGY]  skipped  +=  rem  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  rem  -  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  -  1;	  skipped    +=    x    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
26	[BUG]  [BUGGY]  skipped  +=  x  /  1;  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  /  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  /  1;	  skipped    +=    x    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
27	[BUG]  [BUGGY]  skipped  +=  x  -  2;  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  -  2;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  -  2;	  skipped    +=    x    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  skipped  +=  x  -  3;  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  -  3;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  -  3;	  skipped    +=    x    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  skipped  /=  SHORT_BUF;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  /=  SHORT_BUF;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  SHORT_BUF;	  skipped    +=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
30	[BUG]  [BUGGY]  skipped  -=  SHORT_BUF;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  SHORT_BUF;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  SHORT_BUF;	  skipped    +=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
31	[BUG]  [BUGGY]  skipped  -=  X;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  X;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  X;	  skipped    +=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
32	[BUG]  [BUGGY]  skipped  -=  XHORT_BUF;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  XHORT_BUF;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  XHORT_BUF;	  skipped    +=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
33	[BUG]  [BUGGY]  skipped  *=  x;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  *=  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  x;	  skipped    +=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
34	[BUG]  [BUGGY]  skipped  +=  x  +  1;  x  +=  x  +  1;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  x  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    x  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
35	[BUG]  [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    final  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
36	[BUG]  [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    final  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
37	[BUG]  [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    final  int  x  =  read(x,  0,  (int)(x  +  1));  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
38	[BUG]  [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    final  int  x  =  read(x,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
39	[BUG]  [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    final  int  x  =  read(rem,  0,  (int)(x  +  1));  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
40	[BUG]  [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    final  int  x  =  read(x,  0,  (int)(x  +  1);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
41	[BUG]  [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    final  int  x  =  read(x,  0,  (int)(x  +  1);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
42	[BUG]  [BUGGY]  if(x  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  if(x  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  ==  -1)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
44	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.min(rem,  x);  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
45	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
46	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(rem,  x);  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
47	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
48	[BUG]  [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  max)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  Math.max(rem,  x);  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
49	[BUG]  [BUGGY]  skipped  *=  rem;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  *=  rem;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  rem;	  skipped    +=    rem;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  skipped  +=  rem  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  rem  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  +  1;	  skipped    +=    rem;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
51	[BUG]  [BUGGY]  skipped  &=  rem;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  &=  rem;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  &=  rem;	  skipped    +=    rem;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
52	[BUG]  [BUGGY]  skipped  +=  x  +  2;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  2;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  2;	  skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
53	[BUG]  [BUGGY]  skipped  +=  x  +  3;  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  3;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  3;	  skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
54	[BUG]  [BUGGY]  skipped  +=  x  +  4;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  4;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  +  4;	  skipped    +=    x    +    1;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
55	[BUG]  [BUGGY]  skipped  +=  x  *(rem  -  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *(rem  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *(rem  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
56	[BUG]  [BUGGY]  skipped  +=  x  *(value  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *(value  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *(value  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
57	[BUG]  [BUGGY]  skipped  +=  rem  *(x  -  1);  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  rem  *(x  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *(x  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
58	[BUG]  [BUGGY]  skipped  +=  x  *(x  -  1);  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *(x  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *(x  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
59	[BUG]  [BUGGY]  skipped  +=  rem  *(skipped  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  rem  *(skipped  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  rem  *(skipped  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
60	[BUG]  [BUGGY]  skipped  +=  x  *(read  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *(read  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *(read  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
61	[BUG]  [BUGGY]  skipped  -=  x;  int  x  =  read(value,  0,  x);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  int  x  =  read(value,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    int  x  =  read(value,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
62	[BUG]  [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  x  =  read(x,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    x  =  read(x,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
63	[BUG]  [BUGGY]  skipped  -=  x;  int  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  int  x  =  read(x,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    int  x  =  read(x,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
64	[BUG]  [BUGGY]  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  final  int  x  =  read(value,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    final  int  x  =  read(value,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
65	[BUG]  [BUGGY]  skipped  -=  x;  long  x  =  read(x,  0,  x);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  long  x  =  read(x,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    long  x  =  read(x,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
66	[BUG]  [BUGGY]  skipped  -=  value;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  value;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  value;	  skipped    -=    x;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
67	[BUG]  [BUGGY]  skipped  -=  x  *(skipped  -  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x  *(skipped  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(skipped  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
68	[BUG]  [BUGGY]  skipped  -=  x  *(value  -  1);  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x  *(value  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(value  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
69	[BUG]  [BUGGY]  skipped  +=(x  <  0)?  rem  :  x;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=(x  <  0)?  rem  :  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  0)?  rem  :  x;	  skipped    +=    rem;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
70	[BUG]  [BUGGY]  skipped  +=(x  <  =  0)?  rem  :  x;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=(x  <  =  0)?  rem  :  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  =  0)?  rem  :  x;	  skipped    +=    rem;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
71	[BUG]  [BUGGY]  skipped  +=(x  <  >  0)?  rem  :  x;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=(x  <  >  0)?  rem  :  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=(x  <  >  0)?  rem  :  x;	  skipped    +=    rem;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
72	[BUG]  [BUGGY]  skipped  /=  2;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  /=  2;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  /=  2;	  skipped    /=    x;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
73	[BUG]  [BUGGY]  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skipped  +=  x  +  1;  }	  	non-compiled	[CE]  <identifier>  expected	3	None	add
74	[BUG]  [BUGGY]  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    if(x  <  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  x  +  1;  }	  	non-compiled	[CE]  <identifier>  expected	3	None	add
75	[BUG]  [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    int  x  =  read(rem,  0,  x);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
76	[BUG]  [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    int  x  =  read(value,  0,  x);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
77	[BUG]  [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    int  x  =  read(x,  0,  x);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
78	[BUG]  [BUGGY]  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip  +=  x  +  1;  }	  	non-compiled	[CE]  <identifier>  expected	3	None	add
79	[BUG]  [BUGGY]  skipped  +=  x  *  2  +  1;  [CE]  <identifier>  expected  [FE]                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *  2  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  2  +  1;	  skipped    +=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
80	[BUG]  [BUGGY]  skipped  +=  x  *  2  +  length;  [CE]  <identifier>  expected  [FE]                  AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  *  2  +  length;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  +=  x  *  2  +  length;	  skipped    +=    x    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
81	[BUG]  [BUGGY]  skipped  *=  SHORT_BUF;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  *=  SHORT_BUF;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  *=  SHORT_BUF;	  skipped    +=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
82	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  skip(i,  x);  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
83	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
84	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skipped;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
85	[BUG]  [BUGGY]  lastStoredEntry  =  ze.getValue();  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  lastStoredEntry  =  ze.getValue();  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	lastStoredEntry  =  ze.getValue();	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
86	[BUG]  [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  =  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  return  skip;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
87	[BUG]  [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x);  }  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x);  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(skipped  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  read(x);  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
88	[BUG]  [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  <  0)  {  for(int  i  =  0;  i  <  x;  i++)  {  if(skipped  >  0)  {  skipped  +=  x;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
89	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }  [CE]  <identifier>  expected  [FE]                    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skip(x);  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
90	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [CE]  <identifier>  expected  [FE]                      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  skipped  +=  Math.min(skipped,  x);  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
91	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  return  skipped;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
92	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }  [CE]  <identifier>  expected  [FE]                          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  return  skipped;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
93	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }  [CE]  <identifier>  expected  [FE]                            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >=  0)  {  skipped  =  0;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
94	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  [CE]  <identifier>  expected  [FE]                              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skipped  =  csize;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
95	[BUG]  [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  [CE]  <identifier>  expected  [FE]                                AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	if(x  >  0)  {  for(int  i  =  0;  i  <  x;  ++i)  {  final  int  csize  =  read(x,  0,  csize);  if(csize  >  0)  {  skip  =  csize;  }	      	non-compiled	[CE]  <identifier>  expected	9	None	replace
96	[BUG]  [BUGGY]  skipped  -=  x  *(rem  -  1);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x  *(rem  -  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  x  *(rem  -  1);	  skipped    +=    x    *(skipped    -    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
97	[BUG]  [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    int  x  =  read(SKIP_BUF,  0,  x);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
98	[BUG]  [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    int  x  =  read(SKIP_BUF,  0,  x  +  1);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
99	[BUG]  [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x  +  1);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    int  x  =  read(SKIP_BUF,  0,  x  +  1);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
100	[BUG]  [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(SKIP_BUF,  0,  x);  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    int  x  =  read(SKIP_BUF,  0,  x);	  	non-compiled	[CE]  <identifier>  expected	3	None	add
101	[BUG]  [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    int  x  =  read(value,  x  +  1);  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
102	[BUG]  [BUGGY]  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  +=  x  +  1;  ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    +=    x    +    1;    ((  ZipArchiveEntry)rem).skip();  skipped  +=  x  +  1;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
103	[BUG]  [BUGGY]  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  ((  ZipArchiveEntry)rem).skipped  -=  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    ((  ZipArchiveEntry)rem).skipped  -=  x;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
104	[BUG]  [BUGGY]  skipped  -=  x;  skipped  -=  x;  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  skipped  -=  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    skipped  -=  x;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
105	[BUG]  [BUGGY]  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    ((  ZipArchiveEntry)rem).skip();  skipped  -=  x;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
106	[BUG]  [BUGGY]  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  x;  int  x  =  read(x,  0,  x);  skipped  -=  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped    -=    x;    int  x  =  read(x,  0,  x);  skipped  -=  x;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
107	[BUG]  [BUGGY]  skipped  -=  MIN_WORD_BUF;  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  MIN_WORD_BUF;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  MIN_WORD_BUF;	  skipped    +=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
108	[BUG]  [BUGGY]  skipped  -=  MIN_DWORD_BUF;  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipped  -=  MIN_DWORD_BUF;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipped  -=  MIN_DWORD_BUF;	  skipped    +=    SHORT_BUF;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
109	[BUG]  [BUGGY]  skipd  -=  rem;  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipd  -=  rem;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  -=  rem;	  skipped    +=    rem;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
110	[BUG]  [BUGGY]  skipd  +=  x;  [CE]  <identifier>  expected  [FE]              AssertionError    [CONTEXT]    public  long  skip(final  long  value)  throws  IOException  {  if  (value  >=  0)  {  long  skipped  =  0;  while  (skipped  <  value)  {  final  long  rem  =  value  -  skipped;  final  int  x  =  read(SKIP_BUF,  0,  (int)  (SKIP_BUF.length  >  rem  ?  rem  :  SKIP_BUF.length));  if  (x  ==  -1)  {  return  skipped;  }    [BUGGY]  skipd  +=  x;  [BUGGY]    }  return  skipped;  }  throw  new  IllegalArgumentException();  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  skip  [RETURN_TYPE]  long  final  long  value  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  rem  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	skipd  +=  x;	  skipped    +=    rem;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
