projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=SHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*(skipped-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x.length;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x*4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x.length;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x/2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;finalintx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;finalintx=read(rem,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;finalintx=read(x,0,(int)(rem-x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;finalintx=read(x,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;intx=read(rem,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;finalintx=read(x,0,(int)(x+rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;finalintx=read(x,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x/1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x-2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x-3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=SHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=SHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;x+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;finalintx=read(x,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;finalintx=read(rem,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;finalintx=read(x,0,(int)(x+1));skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;finalintx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;finalintx=read(rem,0,(int)(x+1));skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;finalintx=read(x,0,(int)(x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;finalintx=read(x,0,(int)(x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x==-1){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;++i){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=Math.max(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped&=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*(rem-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*(value-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*(skipped-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*(read-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;intx=read(value,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;intx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;finalintx=read(value,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;longx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=value;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(skipped-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(value-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<=0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<>0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;if(x<0){for(inti=0;i<x;++i){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;intx=read(rem,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;intx=read(value,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;intx=read(x,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*2+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*2+length;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=SHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;i++){skip(i,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){for(inti=0;i<x;i++){if(skipped>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry=ze.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){for(inti=0;i<x;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){skipped+=read(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){skip(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){skipped+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>=0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>=0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skipped=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skip=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(rem-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;intx=read(SKIP_BUF,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;intx=read(SKIP_BUF,0,x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;intx=read(SKIP_BUF,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;intx=read(SKIP_BUF,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;intx=read(value,x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;((ZipArchiveEntry)rem).skip();skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;((ZipArchiveEntry)rem).skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;intx=read(x,0,x);skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=MIN_WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=MIN_DWORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd-=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd+=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<>0)?skipped:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<>3)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<>1)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(rem<>0)?x:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x>0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=X;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(rem+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(max-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=rem+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem+4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize>=0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize!=0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize!=0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize==0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x>0)?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x>0)?skipped:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x>0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x<0)?skipped:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x>0)?rem:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(x>0)?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Context.reportCodeChange();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=value*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=X;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=8;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped-=x;skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;skipped-=x;}else{System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped-=x;skipped-=x;}else{System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(XML_BUF.length>rem?x:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(XML_BUF.length>x)?x:XML_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x>rem?rem:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(XML_BUF.length>rem?x:XML_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x>max)?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(XML_BUF.length>rem?x:YML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=0;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<size;i++){if(skipped>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>0){returnskipd;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<len;i++){if(skipped>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>=0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped==0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x.length;i++){if(skipped>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=10;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=6;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556pendingThread(){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556aughtExceptionHandler.throwAsIOException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556pending(1){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(entry);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(entry,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556aughtExceptionHandler.throwInternal();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x*1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize>0){skip=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skip=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize>0){skipped=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skipped=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize<0){skip=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556pendingThan<=0){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(false){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556read(x){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(entry,x){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(x,skip);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556x-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem;x-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;x-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x-=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x-=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intskipped-=x;x-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(CKIP_BUF,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(ZipArchiveEntry.SHORT_BUF,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(REM,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(RCS_DEFAULT,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(skipped+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x>max)?rem:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x>max));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x>max));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*2+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*4+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*3+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*2+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x/2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){finalintcsize=read(x,0,csize);if(csize>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){returnskipped
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=value+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(x,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;intx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem;intx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;intx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x/2+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem/2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x/4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>0){returnskip;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<size;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){for(inti=0;i<size;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(rem,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(rem,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(rem,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;intx=read(rem,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;intx=read(rem,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(rem,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem;x=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;x=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x=read(x,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556x=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x=read(x,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintskipped=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<max;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;i++){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x>max));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped+=x+1;intx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(x,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(x,0,x);skipped+=x+1;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(x,0,x);skipped+=x+1;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556x+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;x+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556x+=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem+1;x+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;x+=rem+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;x+=x+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem/1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=rem-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem-2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x*3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x*4+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=rem*4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*5;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;intx=read(value,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(value,x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(value,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){skipped+=x+1;intx=read(value,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(value,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(value,x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,x);skipped+=x+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(REM,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,x);skipped+=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,x);skipped+=x+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x*2+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x/2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=rem*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x/1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x/3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x-rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(value-x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(rem-rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(rem-x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(value-x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(rem-x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(rem-x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(value,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(value,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(value,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;intx=read(value,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(value,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;intx=read(value,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(value,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>=0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<len;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x+1));skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+1));skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;finalintx=read(x,0,(int)(x+1));skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;}else{finalintx=read(x,0,(int)(x+1));skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(x+1));skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;}else{finalintx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(REM,0,(int)(x+1));skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<len;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<value;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<x;i++){skipped+=rem;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<skipCount;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=x-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=x+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=x.length;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=x+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,x);skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,x);skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(x,0,x);skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;intx=read(x,0,x);skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,x);skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(x,0,x);skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*(max-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(value,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(value,0,value.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(value,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(value,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(SKIP_BUF,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556x=read(SKIP_BUF,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(SKIP_BUF,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x;intx=read(SKIP_BUF,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(SKIP_BUF,0,x+2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*(value-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<size;i++){if(skipped>0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>=0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>0){skipped+=x;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<skipCount;i++){if(skipped>0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped==0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<length;i++){if(skipped>0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=value*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem*(value-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(value/1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize>=0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>=0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize!=0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize!=0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize!=0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*(x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=rem+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd-=rem+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556rem-=skipd;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556rem-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skip-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+1));skipped+=x+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+1));skipped+=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+1));skipped+=x+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;++i){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;++i){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;++i){skipped+=x+2;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;++i){skipd+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;++i){skipped+=x+3;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x.length+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x.length-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x.length*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x.length+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(value,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;intx=read(value,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(value,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(value,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(value,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped+=x+1;intx=read(value,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(SKIP_BUF,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<-1){skipped+=x+1;intx=read(SKIP_BUF,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(SKIP_BUF,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<-1){skipped+=x+1;intx=read(SKIP_BUF,0,x);skipped+=x+1;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;i++){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;i++){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;i++){skipped+=x+2;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;i++){skipd+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{for(inti=0;i<x;i++){skipped+=x+3;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x>=0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<=0)?skipped:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x==0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(rem<=0)?x:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<0)?skipped:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(rem<0)?x:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<0)?skip:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<0)?skipped:rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped%=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=(x+rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=rem*x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556((ZipArchiveEntry)rem).skip();skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;((ZipArchiveEntry)rem).skip();skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;((ZipArchiveEntry)rem).skip();skipped+=x+1;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalZipArchiveEntryrem=(ZipArchiveEntry)rem.skip();skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalZipArchiveEntryrem=(ZipArchiveEntry)rem).skip();skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556((ZipArchiveEntry)rem).skip();skipped+=x+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556((ZipArchiveEntry)rem).skip();skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(rem>0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(rem>0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalZipArchiveEntryrem=(ZipArchiveEntry)rem.skip();skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x+rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(x+rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x+rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(rem+3));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;finalintx=read(x,0,(int)(x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;}else{finalintx=read(x,0,(int)(x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;finalintx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry=entry.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry=ze.getLastChunk();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry=ze.getValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry=entry.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry=ze.getLastChild();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem-3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(SHORT_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(XML_BUF.length>rem?x:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(X_BUF.length>rem?x:X_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(SKIP_BUF.length>rem?rem:ZERO_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:XML_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;intx=read(SKIP_BUF,0,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(SKIP_BUF,0,x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+2;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+3;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=y+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*10;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=rem+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=(x+rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=(x+rem)/2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=(x+rem)+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=(x+rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*(read-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=read*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem;longx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;longx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;longx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556longx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;longx=read(x,0,x);}else{System.arraycopy(x,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;longx=read(x,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(WRITE_BUF,0,WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(ZipArchiveEntry.SHORT_BUF,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(WRITE_BUF,0,WRITE_BUF.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped&=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped|=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped%=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped&=rem+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(rem,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){skipped+=x+1;intx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped+=x+1;intx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(rem,0,x);skipped+=x+1;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(skipped,0,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556((ZipArchiveEntry)rem).skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;((ZipArchiveEntry)rem).skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(rem>0){skipped-=x;((ZipArchiveEntry)rem).skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;((ZipArchiveEntry)rem).skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;((ZipArchiveEntry)rem).skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem;((ZipArchiveEntry)rem).skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x.length+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x.length-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x.length*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x.length+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=rem.length;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x.length-2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XHORT_BUF+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XHORT_BUF,x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XHORT_BUF.length;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XHORT_BUF,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XHORT_BUF*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x-2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x-3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*2+size;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*2+value;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=length*2+x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*2+length+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(entryEncoding,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(entryEncoding,value);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556allowStoredEntriesWithDataDescriptor(false);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(ZipBuffer,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,rem);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(X,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X*x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X*(x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd+=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd/=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd+=x*2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(SKIP_BUF,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(SKIP_BUF,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(SKIP_BUF,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(rem,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(rem,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,rem.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(rem,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=value*(skipped-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=lfh*(skipped-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x<0)?0:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x>0)?skip(x):0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x>0)?1:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintcsize=read(x,0,csize);if(csize<0){skipped=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,csize);if(x>0){skipped=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SKIP_BUF,0,(int)(x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(rem+1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(rem+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(XML_BUF,0,(int)(x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x+1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x>=>0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;intx=read(SKIP_BUF,0,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;intx=read(SKIP_BUF,0,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x+1);skipped+=x+1;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=2L;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=2+(skipped<=0?x:0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=2+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skip=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skippe=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skippe=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){finalintcsize=read(x,0,csize);if(csize>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=length*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;finalintx=read(rem,0,(int)(x+1));skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;finalintx=read(rem,0,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(rem,0,(int)(x+1));skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;finalintx=read(rem,0,(int)(x+1));skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(rem,0,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x*(value-1L);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skip>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(rem>0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;i++){skip(i,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<skipped;i++){skip(i,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;i++){skip(i,null);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<size;i++){skip(i,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<len;i++){skip(i,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<rem;i++){skip(i,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;i++){skip(i,skipped);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(value,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;intx=read(skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;intx=read(value,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,(int)(x+rem));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(value+rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,x+rem);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<size;i++){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<len;i++){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipd+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=Math.min(rem,y);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=Math.min(rem,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=value*(skipped-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;if(x>=0){for(inti=0;i<x;i++){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=rem-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=value-1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;((ZipArchiveEntry)rem).skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(rem>=0){skipped-=x;((ZipArchiveEntry)rem).skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;((ZipArchiveEntry)rem).skipped-=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skip(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<size;++i){skip(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skipped(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<len;++i){skip(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){skippe(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){skipped(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(value,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(value,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(value,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(value,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(value,0,x);}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<size;i++){skipped+=Math.max(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>rem?rem:SKIP_BUF.length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=Math.ceil(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=Math.pow(10,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<len;i++){skipped+=Math.max(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+5;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>=0){skipped-=x;intx=read(x,0,x);skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,x);skipped-=x;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,x);skipd-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,size);skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=XHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,x);}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd*=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=xx;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=rem.length;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skipped+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skipped+=Math.min(skipped,y);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skipped+=Math.min(skipped,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skipped+=Math.min(skipped,rem);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skipped+=Math.min(skip,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;++i){skipd+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;intx=read(SKIP_BUF,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*8;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skipped=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skipped=
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,value);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,size);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,value);}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize==0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>=0){returnskipped
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556readFully(x){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556safeNegate(x){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556safeGet(x){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556readFully(x,rem){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556readFully(x){thrownewIllegalArgumentException("".getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;intx=read(SKIP_BUF,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x);skipped+=x+1;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;intx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(x,0,x);skipped+=x+1;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;finalintx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1L;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(rem,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(rem,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(rem,0,x);}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>=0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize!=0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>>0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize==0){skipped=0;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=8;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=10;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>=0){skipped+=x+1;finalintx=read(x,0,(int)(x+1));skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,(int)(x+1));skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;finalintx=read(x,0,(int)(x+1));skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(x,0,(int)(rem-x));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(x,0,x-1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,x-1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,(int)(rem-x));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped-=x;finalintx=read(x,0,(int)(rem-x));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd-=value;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry-=rem;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x+1L;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x=read(x,0,size);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=1;x=read(x,0,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x=read(skipped,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X+(int)Math.pow(10,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X+(int)Math.ceil(x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X+(int)Math.rint(x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X+(int)Math.floor(x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X+(int)Math.pow(0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;x+=x+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;x+=y+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x+1;x+=length+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=value*(rem-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;intx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(rem,0,x);skipped+=x+1;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x.longValue;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x.longValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>=0){skipped+=x+1;finalintx=read(x,0,(int)(x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,(int)(x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>=0){skipped+=x+1;finalintx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,(int)(x<0));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;finalintx=read(x,0,(int)(x<0));}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;intx=read(value,x+1);skipped+=x+1;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;intx=read(value,x+1);skipped+=x+1;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(value,x+1);skipped+=x+1;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;longx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;longx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;longx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;longx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556(int)(x>max)){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<size;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=value;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<rem;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;x-=0;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;if(x<0){for(inti=0;i<x;++i){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;if(x<0){for(inti=0;i<x;++i){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;if(x<0){for(inti=0;i<x;++i){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;if(x<0){for(inti=0;i<x;++i){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;if(x<0){for(inti=0;i<x;++i){skipped+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;if(x<0){for(inti=0;i<x;++i){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;finalintx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;finalintx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;finalintx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;finalintx=read(x,0,x);}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,x);}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=MIN_WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;skipped-=x;}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;skipped-=x;}else{System.arraycopy(ch,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;skipped-=x;}else{System.arraycopy(ceiling,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;skipped-=x;}else{System.arraycopy(buf,0,skipped,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=0){for(inti=0;i<x;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>0){returnskippe;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=0){for(inti=0;i<x;i++){if(skipped>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skip>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;((ZipArchiveEntry)rem).skip();skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;}else{((ZipArchiveEntry)rem).skip();skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;}else{((ZipArchiveEntry)rem).skip();skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;((ZipArchiveEntry)rem).skip();skipped+=x+1;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){skipd+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){skipped+=1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){skipped+=length;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){skipped+=size;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){skipped+=in.read();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x!=0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*(read*2-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;++i){skipped+=Math.max(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<size;++i){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<len;++i){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;++i){skipped+=Math.min(rem,y);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;++i){skipd+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;++i){skipped+=Math.min(rem,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped-=x;intx=read(rem,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;intx=read(SKIP_BUF,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;intx=read(rem,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x*8;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<-1){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<-1){thrownewIllegalArgumentException("".length);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){thrownewIllegalArgumentException("".length());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){thrownewIllegalArgumentException("".length);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<len;++i){skipped+=read(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<size;++i){skipped+=read(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){skipd+=read(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){skipped+=read(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){skipped+=read(y);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intskipped=read(x,0,(int)(SHORT_BUF.length>rem?SHORT_BUF.length:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;finalintx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>=-1){skipped+=x+1;finalintx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(rem,0,x);skipped+=x+1;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(value,0,x);skipped+=x+1;}else{
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,(int)(x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(value+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(X,0,(int)(x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<len;i++){if(skipped>0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x;i++){if(skipped>0){skipped+=y;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=MIN_DWORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x+1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;intx=read(SKIP_BUF,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*1;intx=read(SKIP_BUF,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x+1);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x+1;intx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;skipped-=x;}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;skipped-=x;}else{}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=skipped*(value-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556while(skipped>0){for(inti=0;i<x;i++){skip(i,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556while(skipped>0){for(inti=0;i<x;i++){skipped(i,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Integerskipped=read(x,0,(int)(SKIP_BUF.length>rem?x:x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Integerskipped=read(x,0,(int)(SKIP_BUF.length>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skipped=csize;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){finalintx=read(x,0,csize);if(x>0){skipped=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skipd=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x-1+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=x/4;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;}else{finalintx=read(x,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(x,0,x);skipped-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,x);skipped-=x;}else{break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;intx=read(x,0,x);skipped-=x;}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556[Delete]
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556parent<0||x<=0){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556parent<=0){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556parent<0){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556parent<0||x<0){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556pendingTwins=newLinkedHashMap<String,Integer>(x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556pendingTwins=newLinkedHashMap<String,Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<x;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0||x>0){for(inti=0;i<x;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X+(skipped-x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X+(skipped/x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,x);skipped+=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;++i){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556read(x)>max){for(inti=0;i<x;++i){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;++i){skipped+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;++i){skipped+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Integerx=read(x,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(x,0,x);skipd+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0||x>rem){for(inti=0;i<x;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0||x>size){for(inti=0;i<x;i++){if(skipped>0){returnskip;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipd&=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped%2=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;i++){if(skipped>0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;i++){if(skipped>0){skipped+=x;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){for(inti=0;i<x+1;i++){if(skipped>0){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=x*1;x+=x*1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;}else{intx=read(SKIP_BUF,0,x+1);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Integerx=read(value,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=2+(skipped<=0?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped/=2+(skipped<=x)?0:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x>0){for(inti=0;i<x;++i){skip(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x+1;++i){skip(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<rem;++i){skip(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X_WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XML_SHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XY_WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;i++){skipped+=Math.max(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556read(x)>max){for(inti=0;i<x;i++){skipped+=Math.max(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;i++){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556read(x)>max){for(inti=0;i<x;i++){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>max){for(inti=0;i<x;i++){skipped+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556while(x<0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0||x>size){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0||x>0){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=x+(skipped<=0?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=x+(int)(value/x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,(int)(x-x));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(rem,0,(int)(x-x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;finalintx=read(x,0,(int)(x-x));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x*1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped+=x+1;((ZipArchiveEntry)rem).skip();skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;((ZipArchiveEntry)rem).skip();skipped+=x+1;}else{break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=x;x=read(x,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556double-=x;x=read(x,0,x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skip-=x;x-=x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skipd+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;longx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;longx=read(x,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;longx=read(x,0,x);}else{System.arraycopy(x,0,skipped);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=(x<0)?rem:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=(x<0)?value:x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;finalintx=read(x,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped+=x+1;finalintx=read(x,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,value);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;}else{finalintx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped+=x+1;finalintx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XHORT_BUF*x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XHORT_BUF+x;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=rem*2+length;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Integerx=read(rem,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(rem,0,x);skipd+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=XYEAR_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(x,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(x,0,x);}else{System.arraycopy(x,0,skipped);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;intx=read(x,0,x);}else{break;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=X_DWORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556LastStoredEntryentry=ze.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556lastStoredEntry=ze.getLastSegmentedEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556pendingEntry(){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556aughtExceptionHandler.throwAsIOException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556aughtException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556pendingEntry=entryEncoding.decode(x,0,rem);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556pendingEntry=entryEncoding.skip(x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556while(x<=max){for(inti=0;i<x;i++){skipped+=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intx=read(SKIP_BUF,0,(int)(SKIP_BUF.length>x?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<0){skipped-=x;intx=read(rem,0,x);}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped-=skipped*(value-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556while(skipped>0){for(inti=0;i<x;++i){skipped+=read(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556read(x,0,(int)(SKIP_BUF.length>rem?x:x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intskipped=read(x,0,(int)(SKIP_BUF.length>rem?x:x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x+1;++i){skipped+=read(x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){skipped+=read(x,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intskipped=read(x,0,(int)(SKIP_BUF.length>rem?x:x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556read(x)>0){for(inti=0;i<x;++i){skipped+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){skipped+=Math.min(skipped,value);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x;++i){skipped+=Math.min(skipped,rem);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){for(inti=0;i<x+1;++i){skipped+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556read(x)>0){for(inti=0;i<x;++i){skipped+=Math.min(rem,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(value,0,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(value,0,x);}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){skip=csize;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,csize);if(x>0){skip=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){finalintx=read(x,0,csize);if(x>0){skip=csize;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Integerx=read(value,x+1);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,(int)(x<0));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(SHORT_BUF,0,(int)(x<0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,x<0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){returnskipped;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){for(inti=0;i<x;++i){finalintcsize=read(x,0,csize);if(csize>0){returnskipd;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){skipped+=x+1;}else{for(inti=0;i<x;++i){skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556x=read(SKIP_BUF,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Integerx=read(SKIP_BUF,0,x);skipped+=x+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped+=x+1;intx=read(SKIP_BUF,0,x);skipd+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,(int)(x+rem));}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x*rem));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556finalintx=read(x,0,(int)(x+length));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x>0){skipped-=x;finalintx=read(x,0,x+rem);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=lfh*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped+=skipped*(x-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0){for(inti=0;i<x;i++){if(skipped>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556||x<0||x>0){for(inti=0;i<x;i++){if(skipped>0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){for(inti=0;i<x;i++){if(skipped>=0){returnskipped;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){for(inti=0;i<x;i++){if(skipped>0){returnskipd;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556Integerx=read(SKIP_BUF,0,x+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped+=x+1;finalintx=read(rem,0,x);skipped+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped<=0){skipped+=x+1;if(x<0){for(inti=0;i<x;i++){skip+=x+1;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556for(inti=0;i<x;i++){skipped+=Math.min(skipped,x);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=XMLCharacterEncoding.quoteAsString(x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=XMLCharacterEncoding.UTF8;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=XMLCharacterEncoding.quoteAsString(x));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556skipped*=XMLCharacterEncoding.quote(x);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(skipped>0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556if(x<=0){skipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java556intskipped-=x;((ZipArchiveEntry)rem).skip();skipped-=x;
