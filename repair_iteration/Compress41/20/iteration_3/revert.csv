projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522in.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522inf.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();i++){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()!=Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(JsonDeserializer.SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()!=Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("Unclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("JSC_CLOSE_EXP_32closed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("Currentaccessor:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("JSC_CLOSE_EXTRA_FIELD_NAME"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("Unclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("Currentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententrycannotbeclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException(""));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententrycannotbeclosed");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shutdown=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[inf.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=in;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=Inflater.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[in.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NU
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();System.exit(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();this.closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522fermeture=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure="";
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ze.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=ze.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputFile();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipEncoding>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Close=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522open();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522openEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_SOURCE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_TIME_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_FILE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.entryEncoding.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf!=null){inf=newZipArchiveEntry();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ze.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8")+"-"+inf.getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8").encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;ioe.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522openInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522openFiles();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.AUTO_CLOSE_DECLARED_FILE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_FILE,closed));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasUTF8Flag&&isEnabled(Feature.AUTO_CLOSE_DECLARED_FILE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_FILE,encoding));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.isEnabled(Feature.AUTO_CLOSE_DECLARED_FILE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,close(Feature.AUTO_CLOSE_DECLARED_FILE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf==null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputStream();if(inf!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.getInputStream();if(inf!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=newjava.util.ArrayList<ZipEncoding>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522this.closed=newjava.util.ArrayList<ZipEncoding>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipEncoding>(encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipEncoding>(inf.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipEncoding>(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Currentaccessor:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Currentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("Currentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionErrorie=newSecureAssertionError("Currentaccessor:"+ie.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522RuntimeException.println("Currentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.AUTO_CLOSE_TIME_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_TIME_BUF,closed));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_TIME_BUF,encoding));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_TIME_BUF,closing));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_TIME_BUF,close));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.isEnabled(Feature.AUTO_CLOSE_TIME_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_TIME_BUF,csize));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveEntrycannotbeclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententrycannotbeclosed.n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashSet<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=newLinkedList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newArrayList<ZipArchiveEntry>(inf.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveEntryhasbeenclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.",in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.",close);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Close=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Close=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Close:false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Close:null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("Currentaccessor:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Currentaccessor:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Currentaccessor:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Currentaccessor:"+i);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("Currentaccessor:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(false));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(true));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(jsonString));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(closed));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(inf));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsBooleanValue(JsonStringEncoder.getInstance().encodeAsBooleanValue(this));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522in.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ze.closeEntry(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522inf.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522entry.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;ioe.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[in.length()+1];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[in.length()-1];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[in.length()*2];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[in.length()+2];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveEntrycannotbeclosed");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententrycannotbeclosed",in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententrycannotbeclosed",ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=newbyte[inf.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=newArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=newbyte[in.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf==null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputStream();if(inf!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<Integer>(inf.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<Integer>(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=newjava.util.ArrayList<Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522this.closed=newjava.util.ArrayList<Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<Integer>(0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()!=Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()>>Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()>=Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()==Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()>=Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()==Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MIN_VALUE||inf.getCharset()==Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MIN_VALUE||inf.getCharset()==Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()!=Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MIN_VALUE&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(inf,"UTF-8");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","UTF-8");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(in,"UTF-8");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8_");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8",in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,closed);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,close);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,close(Feature.AUTO_CLOSE_DECLARED_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newZipArchiveEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newZipInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newZipArchiveEntry(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newZipArchiveEntry(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=this;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){in.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522in.flush();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=newZipInputStream(in.read());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newZipArchiveEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newjava.util.ArrayList<ZipArchiveEntry>(inf.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newbyte[inf.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=Inflater.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newjava.util.ArrayList<ZipEncoding>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shutdown=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ShuffleInputStreamshutdown=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ShuffleInputStreamshutdown=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shutting=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shutdown=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shutting=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(inf.getClass().getName())+"-"+inf.getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8")+"-",inf.getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8")+",-"+inf.getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8")+".-"+inf.getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=Inflater.getInstance(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=in.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=Inflater.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=Inflater.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522inf=Inflater.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522fermeture=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522fermeture=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JSC_CLOSE_EXTRA_FIELD_NAME"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("JSC_CLOSE_EXTRA_FIELD_NAME"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("JSC_CLOSE_EXTRA_FIELD_NAME"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522RuntimeException.println("JSC_CLOSE_EXTRA_FIELD_NAME"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JSC_CLOSE_EXTRA_FIELD_NAME:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{System.err.println("Unclosedentry:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Unclosedentry:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("Unclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{System.err.println("Unclosedentry:"+i);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Unclosedentry:"+i);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Closedentry:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ze.flush();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522fileName.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("]");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("closed:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currentlineisnotsupported.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_CLOSE_ERROR,");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_CLOSE_EXPR_RESULT_ERROR");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_CLOSE_ERROR",closed);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminputStream=getInputStream();if(inputStream!=null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522this.closed=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveEntryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveentryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Zipentryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryisnotadirectory.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveEntryisnull!");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()||in.close()){in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.isEnabled()){in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(JsonDeserializer.SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,hasDataDescriptor(JsonDeserializer.SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,closed(JsonDeserializer.SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(JsonDeserializer.SCRIPT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(JsonDeserializer.SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(JsonDeserializer.SHELL_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(JsonDeserializer.SHORT_BUF,closed));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe,ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Integer>(inf.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newArrayList<String,Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Integer>(in.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Integer>(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Integer>(in.size());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf!=null){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf.length()>0){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf!=null){inf.close();}else{thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf!=null){inf.close();}else{thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=newZipArchiveEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf==null){inf=newZipArchiveEntry();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522inf=newZipArchiveEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=newZipArchiveEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf!=null){inf=newZipArchiveEntry();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newArrayList<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Object>(inf.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Object>(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=newLinkedHashMap<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newTreeMap<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()==Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()==Integer.MIN_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MIN_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()!=Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()!=Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()>Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE||inf.getCharset()==Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE||inf.getCharset()!=Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithoutclosedfilename:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;ioe.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.AUTO_CLOSE_SOURCE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_SOURCE,encoding));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_SOURCE,closed));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.isEnabled(Feature.AUTO_CLOSE_SOURCE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_SOURCE,fileNameLen));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_SOURCE,inf));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_SOURCE,fileName));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();i++){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.length();i++){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length();i++){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length();i++){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.length();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[inf.length()+1];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[inf.length()-1];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[inf.length()*2];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[inf.length()+2];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("]"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_CLOSE_EXP_32"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_UNKNOWN_EXP_32"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_UNKNOWN_EXP_64"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_UNKNOWN_EXPR_ERROR"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("crc:closed"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("JSC_CLOSE_EXP_32closed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JSC_CLOSE_EXP_32closed:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("JSC_CLOSE_EXP_32closed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("JSC_CLOSE_EXP_32closed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522RuntimeException.println("JSC_CLOSE_EXP_32closed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JSC_CLOSE_EXP_32closed:"+close);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf==null){for(inti=0;i<inf.size();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()>>Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,inf.getCharset()>=Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()>=Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522openEntry(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,fileNameLen);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,this);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,out);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(inf,closed);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(inputStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(outputStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(inf,true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(inf,buffer);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInflater();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream(true);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream().openStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.inputStream;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()||in.close()){in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()||in.close()){in.close();closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}elseif(in.close()){in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}elseif(in.close()){in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,encoding));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,closed));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,close));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,fileName));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR,inf));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_CLOSED,encoding));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_CLOSED,closed));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.isEnabled(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_CLOSED,true));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_CLOSED,close));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,close(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Unclosedentry:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Unclosedentry:"+entry.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;ioe.println("Unclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Closedentry:"+entry.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Failedtocloseentry:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Closedentry:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(inf,"UTF-8").encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","UTF-8").encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8").encodeAsString(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(encoding,"UTF-8").encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputFile();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputFile().close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputFileInput();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getCurrentInputFile();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.getOutputFile();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newjava.util.ArrayList<ZipArchiveEntry>(Integer.MAX_VALUE,Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newjava.util.ArrayList<ZipArchiveEntry>(Integer.parseInt(encoding));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newjava.util.ArrayList<ZipArchiveEntry>(Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newjava.util.ArrayList<ZipArchiveEntry>(Integer.MAX_VALUE,Integer.MIN_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()||out.close()){in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()||in.close()){in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){closed=true;}else{in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=in.read();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=inf;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=in.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe,ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}elseif(in.close()){in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}elseif(in.close()){in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();this.closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.entryEncoding.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=entryEncoding.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=zipEncoding.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.entryEncoding.openStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.entryEncoding.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.entryEncoding.openInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=entry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.ze.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.entry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=ze.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=currentEntry.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();System.exit(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();System.exit(1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()||in.close()){in.close();System.exit(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();System.exit(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()||in.close()){in.close();System.exit(1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();System.exit(1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithoutclosedfilename:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosedfilename:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Closedfilename:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{in.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522inf.flush();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Cannotcloseaccessor:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Currentaccessor:"+close);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedList<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newArrayHashMap<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=System.currentTimeMillis();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newFileInputStream(in.getAbsolutePath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newStringBuffer();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newjava.util.ArrayList<ZipEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newbyte[inf.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newBoundedInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newjava.util.ArrayList<ZipEncoding>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newjava.util.ArrayList<ZipEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newjava.sql.InputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf==null){for(inti=0;i<inf.size();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;ioe.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("UnicodeExtraFieldsclosed:"+close);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;ioe.println("UnicodeExtraFieldsclosed:"+close);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;System.err.println("JSC_closed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{in.close();closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>(2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>(8);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()>=Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.read()==Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.enabled(Feature.AUTO_CLOSE_SOURCE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("JSC_CLOSE_EXP_32closed:"+close);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JSC_CLOSE_EXP_64closed:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ze.closeEntry(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ze.close(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()>>Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522FileInputStreamin=newFileInputStream(inf.getAbsolutePath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522FileInputStreaminf=newFileInputStream(in.getAbsolutePath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522FileInputStreaminf=newFileInputStream(inf.getAbsolutePath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522FileInputStreamin=newFileInputStream(inf.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522FileInputStreamin=newFileInputStream(inf.getParent());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522FileInputStreaminf=newFileInputStream(inf.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){closed=true;}else{in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.zipEncoding.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasUTF8Flag(Feature.AUTO_CLOSE_TIME_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,close(Feature.AUTO_CLOSE_TIME_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf==null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_STRING).encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_KEY).encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=Inflater.getInstance(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in!=null){in.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in!=null){in.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in!=null){in.close();}else{System.err.println("InputStreamclosed:"+inputStream);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in!=null){in.close();}else{System.err.println("UnicodeExtraFieldswithclosedinputstream");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in!=null){in.close();}else{System.err.println("UnicodeExtraFieldsclosed.");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.",ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.",sourceName);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException(ze,"Currententryhasbeenclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Closedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("UnicodeExtraFieldsclosed:",+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=newjava.util.ArrayList<Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<Integer>(8);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=newjava.util.ArrayList<ZipEncoding>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipEncoding>(8);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{in.close();System.exit(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{in.close();System.exit(1);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Close="";
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasDataDescriptor&&isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,zipEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,inputStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInflater(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(inf,inputStream);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=openInflater(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInputStream(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf==null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newBoundedInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newLinkedHashMap<String,Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newLinkedHashMap<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newLinkedList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=this.closed;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=this.in;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf==null){for(inti=0;i<inf.length();i++){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosedentry:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ze.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputFile().getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputFile().openInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().decodeAsIOException("Currententrycannotbeclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveEntrynotclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasUTF8Flag&&isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasDataDescriptor&&isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,close(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf==null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithoutclosedentry:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosedentry:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;ioe.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldswithclosedentry:"+ze);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_FILE),inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("JSC_CLOSE_EXTRA_FIELD_NAME:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JSC_CLOSE_EXTRA_FIELD_NAME"+getName());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasUTF8Flag&&isEnabled(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasDataDescriptor&&isEnabled(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Surrententryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Turrententryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryisnotsupported.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Thisentryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()>>Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("-closed:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_UNKNOWN_EXPR_ERROR");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_UNKNOWN_SYNTHETIC_ERROR");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("JSC_UNKNOWN_EXPR_TYPE");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522open(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522openDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=inputStream.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newArrayList<ZipArchiveEntry>(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream(in.read());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream().close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.openInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,hasDataDescriptor&&isEnabled(JsonDeserializer.SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,hasDataDescriptor||isEnabled(JsonDeserializer.SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(JsonDeserializer.SHIT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedList<String,Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<String,Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Integer>(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getInputStream();if(inf==null){for(inti=0;i<inf.length();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[inf.length()+3];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){in.close();this.closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(!closed){Closed=true;}else{in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){closed=true;}else{in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){close=true;}else{in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MIN_VALUE+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.read()==Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;ioe.println("Currentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Cannotcloseaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Turrentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Unclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Closedentry:"+ze.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Unclosedentry:"+ze.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionError.println("Closingentry:"+ze.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("n"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ioContext.close"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ioContext.closed"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ioContext.close()"));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf==null){inf=newZipArchiveEntry();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessFactoryze=newSecureRandomAccessFactory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessFactoryze=newSecureRandomAccessFactory();closed=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessFactoryze=newSecureRandomAccessFactory(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureBoundedEntry<Void,V>inf=openBoundedEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessFactoryze=newSecureRandomAccessFactory();closed=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessFactoryze=newSecureRandomAccessFactory(in);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(encoding,"UTF-8");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(ENCODING_UTF8);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=false;System.err.println("Currententry'"+entry.getKey()+"'closed:"+entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=false;System.err.println("Currententry'"+entry.getValue()+"'closed:"+entry.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=false;System.err.println("Currententry'"+entry.getValue()+"'closed:"+entry.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=false;System.err.println("Currententry'"+entry.getValue()+"'closed:"+entry.getByteBuffer());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=false;System.err.println("Currententry'"+entry.getValue()+"'closed:"+entry.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","ISO-8859-1");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8","null");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(entriesZip64,closed);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf,closed);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.enabled(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasDataDescriptor(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE||inf.getCharset()==Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522CloseEntryentry=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522CloseEntryinf=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522CloseEntryentry=openEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionErrorioe=newSecureAssertionError("Currentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionErrorioe=newSecureAssertionErrorImpl("Currentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionErrorioe=newSecureAssertionError("Currentaccessor:["+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shuttingdown();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream!=null){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inf.close();}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getOutputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream!=null){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=false;}else{in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(encoding).encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(encoding+"UTF-8").encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryisnotavailable.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=newbyte[inf.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.enabled(Feature.AUTO_CLOSE_TIME_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasDataDescriptor(Feature.AUTO_CLOSE_TIME_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("UnicodeExtraFieldsclosed:{0}");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currentpointisclosed");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{in.close();System.exit(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,close(Feature.AUTO_CLOSE_SOURCE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasDataDescriptor(Feature.AUTO_CLOSE_SOURCE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream==null){Inflaterinf=getInputStream();if(inf!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[in.getBytes()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+close);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JavaExtraFieldsclosed:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+closed);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();close=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();closing=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessor.closeEntry(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream!=null){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();++i){inf.close();}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream!=null){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=newjava.util.ArrayList<ZipEncoding>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.enabled(Feature.AUTO_CLOSE_DECLARED_FILE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasDataDescriptor(Feature.AUTO_CLOSE_DECLARED_FILE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.",encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException(encoding,"Currententryhasbeenclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JSC_CLOSE_EXTRA_FIELD_NAME."+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){in.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){in.close();}else{System.err.println("UnicodeExtraFieldsclosed.");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf!=null){in.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.isEnabled()){in.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){in.close();}else{System.err.println("Failedtocloseentry.");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.enabled(Feature.AUTO_CLOSE_DECLARED_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE||inf.getCharset()==Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=Inflater.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf.length>0){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf.close()){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf!=null){inf.close();}else{System.err.println("UnicodeExtraFieldsclosed");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream!=null){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();i++){inf.close();}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream!=null){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();i++){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.enabled(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,hasDataDescriptor(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=entry.openStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream(in.readLine());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();this.closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=false;}else{in.close();this.closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(Feature.QUOTE_LITERAL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureZipEncoding.closeEntry(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessor.closeEntry(inf,entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessor.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureZipEncoding.closeEntry(inf,entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessor.closeEntry(inf,ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=newLinkedHashMap<String,ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=newLinkedHashMap<String,Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ClosedEntry<ZipArchiveEntry>closed=newClosedEntry<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=newLinkedList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=Inflater.createInflater(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newLinkedHashMap<String,ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JavaExtraFieldsclosed:"+ioe.getMessage());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}catch(IOExceptionioe){System.err.println("JSC_CLOSE_EXP_32closed:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("JSC_CLOSE_EXP_32closed:"+inf.toString());}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=newLinkedHashMap<String,InputStream>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true,isEnabled(JsonDeserializer.SHRT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522this.entryEncoding.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522this.entryEncoding.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>(inf.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>(4);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(inf,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententrycannotbeclosed",encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=newjava.util.ArrayList<Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<Integer>(inf.size());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream!=null){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inf.close();}}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522InputStreaminf=getOutputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inputStream!=null){Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newLinkedHashMap<ZipEncoding,ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newjava.util.ArrayList<ZipArchiveEntry>(inf.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=newLinkedHashMap<String,InputStream>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureRandomAccessor.closeEntry(ze);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureZipEncoding.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureFileEntry.closeEntry(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522SecureAssertionErrore=newSecureAssertionError("Currentaccessor:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(closed){Closed=true;}else{System.err.println("Failedtocloseaccessor:"+ioe);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(encoding,"UTF-8")+"-"+inf.getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString(inf,"UTF-8")+"-"+inf.getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryisclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("UnicodeExtraFieldswithencoding:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("UnicodeExtraFields:closed");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("ZipArchiveentrycannotbeclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(in.close()){Closed=true;}else{in.close();closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;}elseif(in.close()){in.close();close=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closeEntry=false;
