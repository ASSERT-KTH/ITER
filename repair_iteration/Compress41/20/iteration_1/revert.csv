projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=false;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522in.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length;++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522inf.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.size();++i){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){for(inti=0;i<inf.length();i++){inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()!=Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(JsonDeserializer.SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()!=Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MIN_VALUE;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,inf.getCharset()==Integer.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("Unclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("JSC_CLOSE_EXP_32closed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("Currentaccessor:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("JSC_CLOSE_EXTRA_FIELD_NAME"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("Unclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("Currentaccessor:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsZip64(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententrycannotbeclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException(""));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententrycannotbeclosed");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shutdown=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522shut=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[inf.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=in;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=Inflater.getInstance();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newbyte[in.length()];
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522close=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NU
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.QUOTE_LITERAL_NULL_NON_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL_NULL));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();closed=false;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();System.exit(0);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();this.closed=true;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}elseif(in.close()){in.close();out.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure=null;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522fermeture=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure="";
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ze.close();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=ze.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getOutputFile();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=createInflater(inf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Integer>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newArrayList<ZipArchiveEntry>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newjava.util.ArrayList<ZipEncoding>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Close=true;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522open();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522openEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_SOURCE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_TIME_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_ERROR);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_DECLARED_FILE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=false,isEnabled(Feature.AUTO_CLOSE_CLOSED));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=this.entryEncoding.getInputStream();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522if(inf!=null){inf=newZipArchiveEntry();}else{inf.close();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522ze.closeEntry();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Inflaterinf=getInputStream();if(inf!=null){return;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8")+"-"+inf.getClass().getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsString("UTF-8").encodeAsString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closure|=JsonStringEncoder.getInstance().encodeAsIOException("Currententryhasbeenclosed.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522closed=newLinkedHashMap<String,Object>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedfilename:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldswithclosedentry:"+ioe.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java522Closed=true;}catch(IOExceptionioe){System.err.println("UnicodeExtraFieldsclosed:"+ioe.getMessage());
