bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] skipped += x; [FE] AssertionError [CONTEXT] public long skip(final long value) throws IOException { if (value >= 0) { long skipped = 0; while (skipped < value) { final long rem = value - skipped; final int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length)); if (x == -1) { return skipped; } [BUGGY] skipped += x; [BUGGY] } return skipped; } throw new IllegalArgumentException(); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] skip [RETURN_TYPE] long  final long value [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos rem size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public long skip(final long value) throws IOException { if (value >= 0) { long skipped = 0; while (skipped < value) { final long rem = value - skipped; final int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length)); if (x == -1) { return skipped; } [BUGGY] [BUGGY] skipped += x; } return skipped; } throw new IllegalArgumentException(); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] skip [RETURN_TYPE] long  final long value [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos rem size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	556	556	2	add	
3	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public long skip(final long value) throws IOException { if (value >= 0) { long skipped = 0; while (skipped < value) { final long rem = value - skipped; final int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length)); if (x == -1) { return skipped; } skipped += x; [BUGGY] } [BUGGY] return skipped; } throw new IllegalArgumentException(); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] skip [RETURN_TYPE] long  final long value [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos rem size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public long skip(final long value) throws IOException { if (value >= 0) { long skipped = 0; while (skipped < value) { final long rem = value - skipped; final int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length)); if (x == -1) { return skipped; } skipped += x; [BUGGY] [BUGGY] } return skipped; } throw new IllegalArgumentException(); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] skip [RETURN_TYPE] long  final long value [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos rem size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.7071067811865475	557	557	2	add	
5	[BUG] [BUGGY] off += 3 * WORD; [FE] AssertionError [CONTEXT] if (!current.hasDataDescriptor) { current.entry.setCrc(ZipLong.getValue(LFH_BUF, off)); off += WORD; cSize = new ZipLong(LFH_BUF, off); off += WORD; size = new ZipLong(LFH_BUF, off); off += WORD; } else { [BUGGY] off += 3 * WORD; [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding GeneralPurposeBit gpFlag ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen off versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF extraData fileName CurrentEntry current ZipLong cSize sig size boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry EOFException e ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (!current.hasDataDescriptor) { current.entry.setCrc(ZipLong.getValue(LFH_BUF, off)); off += WORD; cSize = new ZipLong(LFH_BUF, off); off += WORD; size = new ZipLong(LFH_BUF, off); off += WORD; } else { [BUGGY] [BUGGY] off += 3 * WORD; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding GeneralPurposeBit gpFlag ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen off versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF extraData fileName CurrentEntry current ZipLong cSize sig size boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry EOFException e ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	285	285	2	add	
7	[BUG] [BUGGY] readDataDescriptor(); [FE] AssertionError [CONTEXT] current.bytesReadFromStream -= diff; }  if (currentEntryHasOutstandingBytes()) { drainCurrentEntryData(); } } if (lastStoredEntry == null && current.hasDataDescriptor) { [BUGGY] readDataDescriptor(); [BUGGY] } inf.reset(); buf.clear().flip(); current = null; lastStoredEntry = null; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] closeEntry [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max pos rem size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] current.bytesReadFromStream -= diff; }  if (currentEntryHasOutstandingBytes()) { drainCurrentEntryData(); } } if (lastStoredEntry == null && current.hasDataDescriptor) { [BUGGY] [BUGGY] readDataDescriptor(); } inf.reset(); buf.clear().flip(); current = null; lastStoredEntry = null; } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] closeEntry [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max pos rem size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	644	644	2	add	
9	[BUG] [BUGGY] readFully(WORD_BUF); [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { [BUGGY] readFully(WORD_BUF); [BUGGY] ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());    [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { [BUGGY] [BUGGY] readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());    [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	729	729	2	add	
11	[BUG] [BUGGY] ZipLong val = new ZipLong(WORD_BUF); [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); [BUGGY] ZipLong val = new ZipLong(WORD_BUF); [BUGGY] if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());     [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); [BUGGY] [BUGGY] ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());     [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	add	
13	[BUG] [BUGGY] if (ZipLong.DD_SIG.equals(val)) { [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); [BUGGY] if (ZipLong.DD_SIG.equals(val)) { [BUGGY]  readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());      [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); [BUGGY] [BUGGY] if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());      [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	731	731	2	add	
15	[BUG] [BUGGY] readFully(WORD_BUF); [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  [BUGGY] readFully(WORD_BUF); [BUGGY] val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());       [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  [BUGGY] [BUGGY] readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());       [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	733	733	2	add	
17	[BUG] [BUGGY] val = new ZipLong(WORD_BUF); [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); [BUGGY] val = new ZipLong(WORD_BUF); [BUGGY] } current.entry.setCrc(val.getValue());        [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); [BUGGY] [BUGGY] val = new ZipLong(WORD_BUF); } current.entry.setCrc(val.getValue());        [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	add	
19	[BUG] [BUGGY] current.entry.setCrc(val.getValue()); [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } [BUGGY] current.entry.setCrc(val.getValue()); [BUGGY]           [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private void readDataDescriptor() throws IOException { readFully(WORD_BUF); ZipLong val = new ZipLong(WORD_BUF); if (ZipLong.DD_SIG.equals(val)) {  readFully(WORD_BUF); val = new ZipLong(WORD_BUF); } [BUGGY] [BUGGY] current.entry.setCrc(val.getValue());          [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	add	
21	[BUG] [BUGGY] readFully(TWO_DWORD_BUF); [FE] AssertionError [CONTEXT]          [BUGGY] readFully(TWO_DWORD_BUF); [BUGGY] final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]          [BUGGY] [BUGGY] readFully(TWO_DWORD_BUF); final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	749	749	2	add	
23	[BUG] [BUGGY] final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); [FE] AssertionError [CONTEXT]         readFully(TWO_DWORD_BUF); [BUGGY] final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); [BUGGY] if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	750	750	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]         readFully(TWO_DWORD_BUF); [BUGGY] [BUGGY] final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	750	750	2	add	
25	[BUG] [BUGGY] if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { [FE] AssertionError [CONTEXT]        readFully(TWO_DWORD_BUF); final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); [BUGGY] if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { [BUGGY] pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]        readFully(TWO_DWORD_BUF); final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); [BUGGY] [BUGGY] if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	751	751	2	add	
27	[BUG] [BUGGY] pushback(TWO_DWORD_BUF, DWORD, DWORD); [FE] AssertionError [CONTEXT]       readFully(TWO_DWORD_BUF); final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { [BUGGY] pushback(TWO_DWORD_BUF, DWORD, DWORD); [BUGGY] current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]       readFully(TWO_DWORD_BUF); final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { [BUGGY] [BUGGY] pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	add	
29	[BUG] [BUGGY] current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); [FE] AssertionError [CONTEXT]      readFully(TWO_DWORD_BUF); final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); [BUGGY] current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); [BUGGY] current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]      readFully(TWO_DWORD_BUF); final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD); if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); [BUGGY] [BUGGY] current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	753	753	2	add	
31	[BUG] [BUGGY] current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); [FE] AssertionError [CONTEXT] if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); [BUGGY] current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); [BUGGY] } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); [BUGGY] [BUGGY] current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	add	
33	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	759	759	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) { pushback(TWO_DWORD_BUF, DWORD, DWORD); current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF)); current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD)); } else { current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF)); current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD)); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] readDataDescriptor [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN count diff entriesRead extraLen fileNameLen i l length off offset read toRead versionMadeBy x long TWO_EXP_32 bytesRead bytesReadFromStream csize inB max n pos rem remaining size skipped time value byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF b buffer expected extraData fileName lfh missedLfhBytes signature CurrentEntry current ZipLong potentialSig val boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	759	759	2	add	
35	[BUG] [BUGGY] return null; [FE] AssertionError [CONTEXT] } catch (final EOFException e) { return null; } final ZipLong sig = new ZipLong(LFH_BUF); if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG)) { hitCentralDirectory = true; skipRemainderOfArchive(); } if (!sig.equals(ZipLong.LFH_SIG)) { [BUGGY] return null; [BUGGY] } int off = WORD; current = new CurrentEntry(); final int versionMadeBy = ZipShort.getValue(LFH_BUF, off); off += SHORT; current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding GeneralPurposeBit gpFlag ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen off versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF extraData fileName CurrentEntry current ZipLong cSize sig size boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry EOFException e ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } catch (final EOFException e) { return null; } final ZipLong sig = new ZipLong(LFH_BUF); if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG)) { hitCentralDirectory = true; skipRemainderOfArchive(); } if (!sig.equals(ZipLong.LFH_SIG)) { [BUGGY] [BUGGY] return null; } int off = WORD; current = new CurrentEntry(); final int versionMadeBy = ZipShort.getValue(LFH_BUF, off); off += SHORT; current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding GeneralPurposeBit gpFlag ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen off versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF extraData fileName CurrentEntry current ZipLong cSize sig size boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry EOFException e ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	add	
37	[BUG] [BUGGY] if (!closed) { [FE] AssertionError [CONTEXT] public void close() throws IOException { [BUGGY] if (!closed) { [BUGGY] closed = true; try { in.close(); } finally { inf.end(); } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	521	521	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void close() throws IOException { [BUGGY] [BUGGY] if (!closed) { closed = true; try { in.close(); } finally { inf.end(); } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	521	521	2	add	
39	[BUG] [BUGGY] closed = true; [FE] AssertionError [CONTEXT] public void close() throws IOException { if (!closed) { [BUGGY] closed = true; [BUGGY] try { in.close(); } finally { inf.end(); } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	522	522	2	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void close() throws IOException { if (!closed) { [BUGGY] [BUGGY] closed = true; try { in.close(); } finally { inf.end(); } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	522	522	2	add	
41	[BUG] [BUGGY] in.close(); [FE] AssertionError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; try { [BUGGY] in.close(); [BUGGY] } finally { inf.end(); } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; try { [BUGGY] [BUGGY] in.close(); } finally { inf.end(); } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	add	
43	[BUG] [BUGGY] inf.end(); [FE] AssertionError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; try { in.close(); } finally { [BUGGY] inf.end(); [BUGGY] } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	526	526	2	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; try { in.close(); } finally { [BUGGY] [BUGGY] inf.end(); } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	526	526	2	add	
45	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; try { in.close(); } finally { inf.end(); [BUGGY] } [BUGGY] } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	527	527	2	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public void close() throws IOException { if (!closed) { closed = true; try { in.close(); } finally { inf.end(); [BUGGY] [BUGGY] } } } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] close [RETURN_TYPE] void  [VARIABLES] ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead extraLen fileNameLen l length off offset read toRead versionMadeBy long TWO_EXP_32 bytesRead bytesReadFromStream csize max pos size time byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF buffer extraData fileName lfh missedLfhBytes CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed firstEntry hasDataDescriptor hasUTF8Flag hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry ze Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	527	527	2	add	
48	[BUG] [BUGGY] this(inputStream, ZipEncodingHelper.UTF8); [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream) { [BUGGY] this(inputStream, ZipEncodingHelper.UTF8); [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream inputStream [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	168	168	2	replace	
49	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream) { [BUGGY] [BUGGY] this(inputStream, ZipEncodingHelper.UTF8); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream inputStream [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	168	168	2	add	
50	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream) { this(inputStream, ZipEncodingHelper.UTF8); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream inputStream [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	169	169	2	replace	
51	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream) { this(inputStream, ZipEncodingHelper.UTF8); [BUGGY] [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] InputStream)  InputStream inputStream [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	169	169	2	add	
52	[BUG] [BUGGY] this(inputStream, encoding, true); [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding) { [BUGGY] this(inputStream, encoding, true); [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream inputStream String encoding [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	179	179	2	replace	
53	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding) { [BUGGY] [BUGGY] this(inputStream, encoding, true); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream inputStream String encoding [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	179	179	2	add	
54	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding) { this(inputStream, encoding, true); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream inputStream String encoding [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	180	180	2	replace	
55	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding) { this(inputStream, encoding, true); [BUGGY] [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String)  InputStream inputStream String encoding [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	180	180	2	add	
56	[BUG] [BUGGY] this(inputStream, encoding, useUnicodeExtraFields, false); [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields) { [BUGGY] this(inputStream, encoding, useUnicodeExtraFields, false); [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	191	191	2	replace	
57	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields) { [BUGGY] [BUGGY] this(inputStream, encoding, useUnicodeExtraFields, false); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	191	191	2	add	
58	[BUG] [BUGGY] } [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields) { this(inputStream, encoding, useUnicodeExtraFields, false); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	192	192	2	replace	
59	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields) { this(inputStream, encoding, useUnicodeExtraFields, false); [BUGGY] [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	192	192	2	add	
60	[BUG] [BUGGY] final boolean allowStoredEntriesWithDataDescriptor) { [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, [BUGGY] final boolean allowStoredEntriesWithDataDescriptor) { [BUGGY] this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	208	208	2	replace	
61	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, [BUGGY] [BUGGY] final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	208	208	2	add	
62	[BUG] [BUGGY] private final Inflater inf = new Inflater(true); [FE] AssertionError [CONTEXT] [BUGGY] private final Inflater inf = new Inflater(true); [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	92	92	2	replace	
63	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private final Inflater inf = new Inflater(true); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	92	92	2	add	
64	[BUG] [BUGGY] private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE); [FE] AssertionError [CONTEXT] [BUGGY] private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE); [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	95	95	2	replace	
65	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE); [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	95	95	2	add	
66	[BUG] [BUGGY] private CurrentEntry current = null; [FE] AssertionError [CONTEXT] [BUGGY] private CurrentEntry current = null; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	98	98	2	replace	
67	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private CurrentEntry current = null; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	98	98	2	add	
68	[BUG] [BUGGY] private boolean closed = false; [FE] AssertionError [CONTEXT] [BUGGY] private boolean closed = false; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	101	101	2	replace	
69	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private boolean closed = false; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	101	101	2	add	
70	[BUG] [BUGGY] private boolean hitCentralDirectory = false; [FE] AssertionError [CONTEXT] [BUGGY] private boolean hitCentralDirectory = false; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	104	104	2	replace	
71	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private boolean hitCentralDirectory = false; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	104	104	2	add	
72	[BUG] [BUGGY] private ByteArrayInputStream lastStoredEntry = null; [FE] AssertionError [CONTEXT] [BUGGY] private ByteArrayInputStream lastStoredEntry = null; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	111	111	2	replace	
73	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private ByteArrayInputStream lastStoredEntry = null; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	111	111	2	add	
74	[BUG] [BUGGY] private boolean allowStoredEntriesWithDataDescriptor = false; [FE] AssertionError [CONTEXT] [BUGGY] private boolean allowStoredEntriesWithDataDescriptor = false; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	114	114	2	replace	
75	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private boolean allowStoredEntriesWithDataDescriptor = false; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	114	114	2	add	
76	[BUG] [BUGGY] private final byte[] LFH_BUF = new byte[LFH_LEN]; [FE] AssertionError [CONTEXT] [BUGGY] private final byte[] LFH_BUF = new byte[LFH_LEN]; [BUGGY]  [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	155	155	2	replace	
77	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] [BUGGY] [BUGGY] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	155	155	2	add	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	156	156	2	replace	
79	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	156	156	2	add	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	157	157	2	replace	
81	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] LFH_BUF = new byte[LFH_LEN]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	157	157	2	add	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] SKIP_BUF = new byte[1024]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	158	158	2	replace	
83	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] SKIP_BUF = new byte[1024]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	158	158	2	add	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] SHORT_BUF = new byte[SHORT]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	159	159	2	replace	
85	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] SHORT_BUF = new byte[SHORT]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	159	159	2	add	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	161	161	2	replace	
87	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD]; [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream  [VARIABLES] 	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	161	161	2	add	
88	[BUG] [BUGGY] this.encoding = encoding; [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { [BUGGY] this.encoding = encoding; [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	209	209	2	replace	
89	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { [BUGGY] [BUGGY] this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	209	209	2	add	
90	[BUG] [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	210	210	2	replace	
91	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; [BUGGY] [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	210	210	2	add	
92	[BUG] [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	211	211	2	replace	
93	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	211	211	2	add	
94	[BUG] [BUGGY] in = new PushbackInputStream(inputStream, buf.capacity()); [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] in = new PushbackInputStream(inputStream, buf.capacity()); [BUGGY] this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	212	212	2	replace	
95	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] [BUGGY] in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	212	212	2	add	
96	[BUG] [BUGGY] this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor; [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); [BUGGY] this.allowStoredEntriesWithDataDescriptor =   allowStoredEntriesWithDataDescriptor; [BUGGY] allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	213	214	2	replace	
97	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public ZipArchiveInputStream(final InputStream inputStream, final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); [BUGGY] [BUGGY] this.allowStoredEntriesWithDataDescriptor =   allowStoredEntriesWithDataDescriptor; allowStoredEntriesWithDataDescriptor;  buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	213	214	2	add	
98	[BUG] [BUGGY] buf.limit(0); [FE] AssertionError [CONTEXT] final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  [BUGGY] buf.limit(0); [BUGGY] } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	216	216	2	replace	
99	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] final String encoding, final boolean useUnicodeExtraFields, final boolean allowStoredEntriesWithDataDescriptor) { this.encoding = encoding; zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.capacity()); this.allowStoredEntriesWithDataDescriptor = allowStoredEntriesWithDataDescriptor;  [BUGGY] [BUGGY] buf.limit(0); } [CLASS] ZipArchiveInputStream CurrentEntry BoundedInputStream [METHOD] <init> [RETURN_TYPE] String,boolean,boolean)  InputStream inputStream String encoding final boolean useUnicodeExtraFields final boolean allowStoredEntriesWithDataDescriptor [VARIABLES] ZipEncoding zipEncoding CRC32 crc InputStream in inputStream String encoding ByteBuffer buf int CFH_LEN LFH_LEN entriesRead long TWO_EXP_32 bytesRead bytesReadFromStream max pos byte[] CFH DD LFH LFH_BUF SHORT_BUF SKIP_BUF TWO_DWORD_BUF WORD_BUF CurrentEntry current boolean allowStoredEntriesWithDataDescriptor closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields usesZip64 ByteArrayInputStream lastStoredEntry ZipArchiveEntry entry Inflater inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.35355339059327373	216	216	2	add	
