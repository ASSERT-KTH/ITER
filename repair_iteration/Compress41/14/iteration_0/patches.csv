bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
2	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  DWORD);  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_DWORD_BUF,  WORD,  DWORD);	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
3	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
4	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DWORD);	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
5	[BUG]  [BUGGY]  pushback(potentialSig,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(potentialSig,  DWORD,  DWORD);  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  DWORD,  DWORD);	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
6	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  DWORD);  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  DWORD);	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
7	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD));  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  DWORD));	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	  	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
9	[BUG]  [BUGGY]  pushback(possibleSig,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(possibleSig,  DWORD,  DWORD);  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  DWORD,  DWORD);	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
10	[BUG]  [BUGGY]  pushback(PREFIX,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(PREFIX,  DWORD,  DWORD);  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  DWORD,  DWORD);	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
11	[BUG]  [BUGGY]  pushback(potentialSig,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(potentialSig,  WORD,  DWORD);  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  WORD,  DWORD);	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
12	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  DWORD));  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  DWORD));	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
13	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  DWORD));  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  DWORD));	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
14	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]        readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  LFH_BUF));  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  DWORD,  LFH_BUF));	pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  	non-compiled	[CE]  illegal  start  of  type	27	None	replace
