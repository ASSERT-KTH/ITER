bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  pushback(new  ZipLong(FH_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(FH_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(FH_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD,  potentialSig));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  WORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_DWORD_BUF,  WORD,  WORD);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
9	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  TWO_DWORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD,  TWO_DWORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
10	[BUG]  [BUGGY]  pushback(current.entry,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  WORD,  TWO_DWORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  WORD,  TWO_DWORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
11	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(TWO_DWORD_BUF,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_DWORD_BUF,  WORD);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
12	[BUG]  [BUGGY]  pushback(TWO_DWORD,  WORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(TWO_DWORD,  WORD,  WORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_DWORD,  WORD,  WORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
13	[BUG]  [BUGGY]  pushback(t,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(t,  WORD,  TWO_DWORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(t,  WORD,  TWO_DWORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
14	[BUG]  [BUGGY]  pushback(peek,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(peek,  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(peek,  WORD,  DWORD);	  pushback(peek,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
15	[BUG]  [BUGGY]  pushback(peek,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(peek,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(peek,  DWORD,  WORD);	  pushback(peek,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
16	[BUG]  [BUGGY]  pushback(WORD,  DWORD,  peek);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(WORD,  DWORD,  peek);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(WORD,  DWORD,  peek);	  pushback(peek,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
17	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  DWORD,  DWORD));	  pushback(peek,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
18	[BUG]  [BUGGY]  pushback(wORD,  DWORD,  peek);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(wORD,  DWORD,  peek);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(wORD,  DWORD,  peek);	  pushback(peek,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
19	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  WORD_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  WORD_BUF,  DWORD));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
20	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  WORD,  DWORD));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
21	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
22	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  WORD_BUF,  LFH_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
23	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
24	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  LFH_BUF,  WORD));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
25	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  WORD,  LFH_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
26	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
27	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
28	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
29	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
30	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD)+  1,  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
31	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  CFH_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  CFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  CFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  PotentialSig.LFH_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  PotentialSig.LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  1,  PotentialSig.LFH_SIG);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
33	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)),  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LONG_SIG),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
34	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)-  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)-  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)-  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LONG_SIG),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
35	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  WORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LONG_SIG),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
36	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_LEN));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
37	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_LEN),  potentialSig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_LEN),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_LEN),  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
38	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  100));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  100));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  100));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
39	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
40	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
41	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
42	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
43	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
44	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
45	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
46	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF),  LFH,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF),  LFH,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF),  LFH,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
47	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
48	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
49	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
50	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
51	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
52	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_BUF,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  LFH_BUF,  WORD_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
53	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  SHORT_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  SHORT_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  SHORT_BUF,  LFH_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
54	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_BUF,  WORD_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
55	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD_BUF,  LFH_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
56	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
57	[BUG]  [BUGGY]  if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
58	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
59	[BUG]  [BUGGY]  if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
60	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
61	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
62	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
63	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
64	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
65	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
66	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  DEFAULT_SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  DEFAULT_SKIP_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  DEFAULT_SKIP_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
67	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
68	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
69	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
70	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF),  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF),  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF),  LFH_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
71	[BUG]  [BUGGY]  Pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	Pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
72	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  LFH));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD,  LFH));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
73	[BUG]  [BUGGY]  pressback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pressback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pressback(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
74	[BUG]  [BUGGY]  pushback(new  ZipLong(FH_LEN,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(FH_LEN,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(FH_LEN,  WORD,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
75	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
76	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  FH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  FH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  FH_LEN));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
77	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  LFH_LEN));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
78	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  FH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  FH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  FH_LEN,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
79	[BUG]  [BUGGY]  pushback(new  ZipLong(FH_LEN,  LFH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(FH_LEN,  LFH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(FH_LEN,  LFH_LEN,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
80	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD,  LFH_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
81	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  LFH_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
82	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  DWORD,  WORD_BUF));	  pushback(new    ZipLong(TWO_EXP_32,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
83	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  DWORD,  WORD));	  pushback(new    ZipLong(TWO_EXP_32,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DESC_WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DESC_WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  DESC_WORD,  LFH_BUF));	  pushback(new    ZipLong(TWO_EXP_32,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
86	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
87	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
88	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  LFH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  CFH_SIG));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  CFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  CFH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
90	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
91	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  LFH_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  LFH_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  LFH_SIG),  potentialSig);	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
92	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
93	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
94	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
95	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
96	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValu  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValu  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValu	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
97	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BU  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BU  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BU	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
98	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
99	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  CFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  CFH_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
100	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  100));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  100));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  100));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
101	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  FH_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  FH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  FH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
102	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  DEFAULT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  DEFAULT_SIG));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
103	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG),  potentialSig);	  pushback(ZipLong.getValue(TWO_WORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
104	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD,  DEFAULT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD,  DEFAULT_SIG));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
105	[BUG]  [BUGGY]  pushback(prefix,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(prefix,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(prefix,  DWORD,  WORD);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
106	[BUG]  [BUGGY]  pushback(preFIX,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(preFIX,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(preFIX,  DWORD,  WORD);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
107	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(TWO_EXP_32,  WORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_EXP_32,  WORD,  PREFIX);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
108	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  DWORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(TWO_EXP_32,  DWORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_EXP_32,  DWORD,  PREFIX);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
109	[BUG]  [BUGGY]  pushback(PREFIX,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  DWORD);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
110	[BUG]  [BUGGY]  pushback(PRIVATE,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PRIVATE,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PRIVATE,  DWORD,  WORD);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
111	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD,  LFH_SIG));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
112	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  DWORD,  LFH_SIG));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
113	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  DWORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  DWORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  DWORD,  potentialSig));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
114	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  DWORD,  LFH_SIG));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
115	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  DWORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  DWORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  DWORD,  LFH_SIG));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
116	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
117	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
118	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_BUF,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_BUF,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_BUF,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
119	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  WORD_BUF,  LFH_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
120	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  WORD,  LFH_BUF),  potentialSig);	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
121	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  POINT_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  POINT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  WORD,  POINT_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
122	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  WORD,  potentialSig));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
123	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
124	[BUG]  [BUGGY]  reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
125	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(WRITE_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
126	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(WRITE_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
127	[BUG]  [BUGGY]  pushback(new  ZipLong(SWT_WORD,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWT_WORD,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWT_WORD,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(WRITE_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
128	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
129	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
130	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
131	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  SKIP_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  SKIP_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
132	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  SHORT_BUF),  potentialSig);	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
133	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
134	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_BUF,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_BUF,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_BUF,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
135	[BUG]  [BUGGY]  pushback(FLOAT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(FLOAT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(FLOAT_BUF,  DWORD);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
136	[BUG]  [BUGGY]  pushback(false,  DWORD,  FLOAT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(false,  DWORD,  FLOAT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(false,  DWORD,  FLOAT_BUF);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
137	[BUG]  [BUGGY]  pushback(FIELD_BUF,  DWORD,  FLOAT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(FIELD_BUF,  DWORD,  FLOAT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(FIELD_BUF,  DWORD,  FLOAT_BUF);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
138	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  FLOAT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  FLOAT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  FLOAT_BUF);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
139	[BUG]  [BUGGY]  pushback(FRACTIONAL_BUF,  DWORD,  FLOAT_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(FRACTIONAL_BUF,  DWORD,  FLOAT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(FRACTIONAL_BUF,  DWORD,  FLOAT_BUF);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
140	[BUG]  [BUGGY]  pushback(PREFIX,  WORD,  FLOAT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  WORD,  FLOAT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  WORD,  FLOAT_BUF);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
141	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  FLOAT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  FLOAT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD,  FLOAT_BUF));	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
142	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD,  potentialSig));	  pushback(new    ZipLong(PREFIX,    potentialSig,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
143	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  potentialSig,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  potentialSig,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  potentialSig,  DWORD));	  pushback(new    ZipLong(PREFIX,    potentialSig,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
144	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  PREFIX,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  PREFIX,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  PREFIX,  DWORD));	  pushback(new    ZipLong(PREFIX,    potentialSig,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
145	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  potentielSig));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  potentielSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD,  potentielSig));	  pushback(new    ZipLong(PREFIX,    potentialSig,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
146	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  potentialSig,  PREFIX));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  potentialSig,  PREFIX));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  potentialSig,  PREFIX));	  pushback(new    ZipLong(PREFIX,    potentialSig,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
147	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  potentialSig,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  potentialSig,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  potentialSig,  DWORD));	  pushback(new    ZipLong(PREFIX,    potentialSig,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
148	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LH_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LH_BUF),  potentialSig);	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LH_BUF));    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
149	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  LH_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LH_BUF));    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
150	[BUG]  [BUGGY]  pressback(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pressback(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pressback(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LH_BUF));    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
151	[BUG]  [BUGGY]  pushback(potentialSig,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
152	[BUG]  [BUGGY]  pushback(LFH_LEN,  DWORD,  PRINT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(LFH_LEN,  DWORD,  PRINT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(LFH_LEN,  DWORD,  PRINT_BUF);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
153	[BUG]  [BUGGY]  pushback(WORD_BUF,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(WORD_BUF,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(WORD_BUF,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
154	[BUG]  [BUGGY]  pushback(WORD,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(WORD,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(WORD,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
155	[BUG]  [BUGGY]  pushback(FIRST_BUF,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(FIRST_BUF,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(FIRST_BUF,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
156	[BUG]  [BUGGY]  pushback(PREFIX,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
157	[BUG]  [BUGGY]  pushback(10,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
158	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
159	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  DWORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  DWORD,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
160	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  DWORD,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
161	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  DWORD,  WORD_LEN));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  DWORD,  WORD_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  DWORD,  WORD_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
162	[BUG]  [BUGGY]  pushback(new  ZipLong(SWT.DEFAULT,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWT.DEFAULT,  DWORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWT.DEFAULT,  DWORD,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
163	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  DWORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  DWORD,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
164	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
165	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
166	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
167	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
168	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
169	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
170	[BUG]  [BUGGY]  pushback(potentialSig,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  WORD,  LFH_BUF);	  pushback(posentialSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
171	[BUG]  [BUGGY]  pushback(pos,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(pos,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(pos,  WORD,  LFH_LEN);	  pushback(posentialSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
172	[BUG]  [BUGGY]  pushback(pos,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(pos,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(pos,  WORD,  LFH_BUF);	  pushback(posentialSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
173	[BUG]  [BUGGY]  pushback(pos,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(pos,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(pos,  WORD,  LFH_SIG);	  pushback(posentialSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
174	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
175	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
176	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
177	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
178	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
179	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
180	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  TWO_WORD_BUF));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  TWO_WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  TWO_WORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
181	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_LEN));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
182	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
183	[BUG]  [BUGGY]  pushback(current.entry,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  WORD,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
184	[BUG]  [BUGGY]  pushback(possibleSig,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  WORD,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
185	[BUG]  [BUGGY]  pushback(current,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  WORD,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
186	[BUG]  [BUGGY]  pushback(fh,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(fh,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(fh,  WORD,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
187	[BUG]  [BUGGY]  pushback(FH_LEN,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(FH_LEN,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(FH_LEN,  WORD,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
188	[BUG]  [BUGGY]  pushback(potentialSig,  WORD,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  WORD,  CFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  WORD,  CFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
189	[BUG]  [BUGGY]  pushback(potentialSig,  LFH_LEN,  WORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  LFH_LEN,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  LFH_LEN,  WORD);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
190	[BUG]  [BUGGY]  pushback(diff,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(diff,  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(diff,  WORD,  DWORD);	  pushback(diff,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
191	[BUG]  [BUGGY]  pushback(diff,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(diff,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(diff,  DWORD,  WORD);	  pushback(diff,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
192	[BUG]  [BUGGY]  pushback(posentialSig,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(posentialSig,  DWORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(posentialSig,  DWORD,  DWORD);	  pushback(diff,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
193	[BUG]  [BUGGY]  pushback(diff,  LFH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(diff,  LFH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(diff,  LFH_LEN,  DWORD);	  pushback(diff,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
194	[BUG]  [BUGGY]  pushback(potentialSig,  DWORD,  diff);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  DWORD,  diff);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  DWORD,  diff);	  pushback(diff,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
195	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
196	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
197	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
198	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  SHORT_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
199	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  WORD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  WORD,  SHORT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  WORD,  SHORT_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
200	[BUG]  [BUGGY]  pushback(possibleSig,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  WORD,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
201	[BUG]  [BUGGY]  pushback(current.entry,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  WORD,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
202	[BUG]  [BUGGY]  pushback(current,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  WORD,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
203	[BUG]  [BUGGY]  pushback(potentialSig,  WORD,  CFH_SIG);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  WORD,  CFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  WORD,  CFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
204	[BUG]  [BUGGY]  pushback(str,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(str,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(str,  WORD,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
205	[BUG]  [BUGGY]  pushback(potentialSig,  WORD,  LFH_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  WORD,  LFH_SIG,  SHORT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  WORD,  LFH_SIG,  SHORT_BUF);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
206	[BUG]  [BUGGY]  pushback(potentialSig,  LFH_BUF,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  LFH_BUF,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  LFH_BUF,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
207	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DUP,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DUP,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  DUP,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
208	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DUP,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DUP,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  DUP,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
209	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  DUP));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  DUP));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  DUP));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
210	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  DUP,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  DUP,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  DUP,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
211	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DUP,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DUP,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  DUP,  LFH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
212	[BUG]  [BUGGY]  pushback(new  ZipLong(DUP,  DUP,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(DUP,  DUP,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(DUP,  DUP,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
213	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD,  WORD,  LFH_BUF));	  pushback(new    ZipLong(TWO_DWORD,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
214	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD,  DWORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD,  DWORD,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD,  DWORD,  WORD_BUF));	  pushback(new    ZipLong(TWO_DWORD,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
215	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
216	[BUG]  [BUGGY]  if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
217	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
218	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
219	[BUG]  [BUGGY]  if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
220	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_LEN))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_LEN))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_LEN))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
221	[BUG]  [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
222	[BUG]  [BUGGY]  reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	reader.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
223	[BUG]  [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	while(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
224	[BUG]  [BUGGY]  new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
225	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
226	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
227	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
228	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
229	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
230	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setS  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setS  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setS	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
231	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
232	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
233	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
234	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD,  WORD,  LFH_LEN));	  pushback(new    ZipLong(TWO_DWORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
235	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(TWO_DWORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
236	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(TWO_DWORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
237	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  LFH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD,  LFH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD,  LFH_LEN,  DWORD));	  pushback(new    ZipLong(TWO_DWORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
238	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  DWORD,  WORD_BUF));	  pushback(new    ZipLong(SWORD,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
239	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
240	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  CFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
241	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
242	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  100);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  100);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  100);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
243	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
244	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
245	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
246	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
247	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
248	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
249	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
250	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
251	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD)+  1);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
252	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  LFH_BUF,  potentialSig));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  LFH_BUF,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD,  LFH_BUF,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
253	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  10),  potentialSig));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  10),  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  10),  potentialSig));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
254	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  10),  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  10),  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  10),  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
255	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD),  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD),  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD),  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
256	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  10),  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  10),  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  10),  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
257	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  10),  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  10),  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  10),  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
258	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
259	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  10));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  10));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  10));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
260	[BUG]  [BUGGY]  pushback(10,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  WORD,  LFH_BUF);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
261	[BUG]  [BUGGY]  pushback(10,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  WORD,  LFH_LEN);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
262	[BUG]  [BUGGY]  pushback(10,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  SHORT_BUF,  DWORD);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
263	[BUG]  [BUGGY]  pushback(10,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  LFH_BUF,  DWORD);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
264	[BUG]  [BUGGY]  pushback(10,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  WORD,  LFH_SIG);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
265	[BUG]  [BUGGY]  pushback(10,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  WORD_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  WORD_BUF,  DWORD);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
266	[BUG]  [BUGGY]  pushback(10,  WORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  WORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  WORD,  potentialSig);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
267	[BUG]  [BUGGY]  pushback(current,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  WORD,  LFH_BUF);	  pushback(current,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
268	[BUG]  [BUGGY]  pushback(current,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  WORD_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  WORD_BUF,  DWORD);	  pushback(current,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
269	[BUG]  [BUGGY]  pushback(current,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  SHORT_BUF,  DWORD);	  pushback(current,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
270	[BUG]  [BUGGY]  pushback(current,  WORD,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  WORD,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  WORD,  DWORD,  potentialSig);	  pushback(current,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
271	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
272	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  potentialSig));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_BUF,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
273	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DWORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  DWORD,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
274	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN,  potentialSig));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_LEN,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
275	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  potentielSig));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  potentielSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  potentielSig));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
276	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
277	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
278	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD)+  1,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD)+  1,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD)+  1,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
279	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG),  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
280	[BUG]  [BUGGY]  pushback(WORD,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(WORD,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(WORD,  LFH_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
281	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_DWORD_BUF,  WORD_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
282	[BUG]  [BUGGY]  pushback(WORD_BUF,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(WORD_BUF,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(WORD_BUF,  LFH_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
283	[BUG]  [BUGGY]  pushback(DateTimeUtils.currentTimeMillis(),  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(DateTimeUtils.currentTimeMillis(),  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(DateTimeUtils.currentTimeMillis(),  LFH_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
284	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  WORD));	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
285	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD)+  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
286	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
287	[BUG]  [BUGGY]  pushback(possibleSig,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  WORD,  LFH_BUF);	  pushback(possibleSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
288	[BUG]  [BUGGY]  pushback(possibleSig,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  SHORT_BUF,  DWORD);	  pushback(possibleSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
289	[BUG]  [BUGGY]  pushback(possibleSig,  LFH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  LFH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  LFH_LEN,  DWORD);	  pushback(possibleSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
290	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  potentialSig));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  potentialSig));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
291	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD_BUF,  SHORT_BUF));	  pushback(new    ZipLong(WORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
292	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD_BUF,  LFH_BUF),  potentialSig);	  pushback(new    ZipLong(WORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
293	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD_BUF,  potentialSig));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD_BUF,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD_BUF,  potentialSig));	  pushback(new    ZipLong(WORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
294	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_BUF,  SHORT_BUF));	  pushback(new    ZipLong(WORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
295	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  potentialSig);	  pushback(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
296	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  potentialSig);	  pushback(ZipLong.getValue(TWO_WORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
297	[BUG]  [BUGGY]  pushback(new  ZipLong(wORD,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(wORD,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(wORD,  WORD,  LFH_BUF));	  pushback(new    ZipLong(wORD,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
298	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_BUF,  WORD));	  pushback(new    ZipLong(wORD,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
299	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
300	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
301	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
302	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD),  potentialSig);	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
303	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
304	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
305	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
306	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
307	[BUG]  [BUGGY]  if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
308	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
309	[BUG]  [BUGGY]  pushback(PREFIX,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  WORD,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
310	[BUG]  [BUGGY]  pushback(potentialSig,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  DWORD,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
311	[BUG]  [BUGGY]  pushback(WORD,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(WORD,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(WORD,  DWORD,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
312	[BUG]  [BUGGY]  pushback(SPACE,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(SPACE,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(SPACE,  DWORD,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
313	[BUG]  [BUGGY]  pushback(FOR,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(FOR,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(FOR,  DWORD,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
314	[BUG]  [BUGGY]  pushback(PREFIX,  LFH_SIG,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  LFH_SIG,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  LFH_SIG,  DWORD);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
315	[BUG]  [BUGGY]  pushback(propertySig,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(propertySig,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(propertySig,  DWORD,  WORD);	  pushback(propertySig,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
316	[BUG]  [BUGGY]  pushback(propertySig,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(propertySig,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(propertySig,  LFH_BUF,  DWORD);	  pushback(propertySig,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
317	[BUG]  [BUGGY]  pushback(propertySig,  LFH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(propertySig,  LFH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(propertySig,  LFH_LEN,  DWORD);	  pushback(propertySig,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
318	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
319	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
320	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
321	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
322	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
323	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  PARENT_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  PARENT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  PARENT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
324	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
325	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  DEFAULT_FACTOR));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  DEFAULT_FACTOR));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  DEFAULT_FACTOR));	  pushback(new    ZipLong(PARENT_SIG,    DEFAULT_FACTOR,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
326	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    DEFAULT_FACTOR,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
327	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DEFAULT_FACTOR,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  DEFAULT_FACTOR,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  DEFAULT_FACTOR,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    DEFAULT_FACTOR,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
328	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  DEFAULT_FACTOR,  PARENT_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  DEFAULT_FACTOR,  PARENT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  DEFAULT_FACTOR,  PARENT_SIG));	  pushback(new    ZipLong(PARENT_SIG,    DEFAULT_FACTOR,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
329	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  DEFAULT_FACTOR,  DWORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  DEFAULT_FACTOR,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  DEFAULT_FACTOR,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    DEFAULT_FACTOR,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
330	[BUG]  [BUGGY]  pushback(propertySig,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(propertySig,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(propertySig,  WORD,  LFH_LEN);	  pushback(propertySig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
331	[BUG]  [BUGGY]  pushback(propertySig,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(propertySig,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(propertySig,  WORD,  LFH_SIG);	  pushback(propertySig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
332	[BUG]  [BUGGY]  pushback(propertySig,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(propertySig,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(propertySig,  WORD,  LFH_BUF);	  pushback(propertySig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
333	[BUG]  [BUGGY]  pushback(potentialSig,  WORD,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  WORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  WORD,  WORD);	  pushback(propertySig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
334	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
335	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
336	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_LEN));	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
337	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  WORD,  LFH_LEN);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
338	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SKIP_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
339	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  SHORT_BUF),  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
340	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  SKIP_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
341	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  LFH_LEN));	  pushback(new    ZipLong(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
342	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  LFH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  LFH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  LFH_LEN,  DWORD));	  pushback(new    ZipLong(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
343	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  10));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  10));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  10));	  pushback(new    ZipLong(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
344	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  FLOAT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  FLOAT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  FLOAT_BUF));	  pushback(new    ZipLong(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
345	[BUG]  [BUGGY]  pushback(potentialSig,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  DWORD,  WORD);	  pushback(possibleSig,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
346	[BUG]  [BUGGY]  pushback(possibleSig,  WORD,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  WORD,  CFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  WORD,  CFH_LEN);	  pushback(possibleSig,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
347	[BUG]  [BUGGY]  pushback(possibleSig,  WORD,  CFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  WORD,  CFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  WORD,  CFH_BUF);	  pushback(possibleSig,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
348	[BUG]  [BUGGY]  pushback(offset,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(offset,  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(offset,  WORD,  DWORD);	  pushback(offset,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
349	[BUG]  [BUGGY]  pushback(offset,  LFH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(offset,  LFH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(offset,  LFH_LEN,  DWORD);	  pushback(offset,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
350	[BUG]  [BUGGY]  pushback(offset,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(offset,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(offset,  DWORD,  WORD);	  pushback(offset,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
351	[BUG]  [BUGGY]  pushback(inputStream,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(inputStream,  DWORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(inputStream,  DWORD,  DWORD);	  pushback(offset,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
352	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  PARENT_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  PARENT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  PARENT_SIG));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    PARENT_SIG));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
353	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  PARENT_SIG,  potentialSig));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  PARENT_SIG,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  PARENT_SIG,  potentialSig));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    PARENT_SIG));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
354	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  PARENT_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  PARENT_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  PARENT_SIG),  potentialSig);	  pushback(new    ZipLong(PARENT_SIG,    WORD,    PARENT_SIG));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
355	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  POINTER_SIG));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  POINTER_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  POINTER_SIG));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    PARENT_SIG));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
356	[BUG]  [BUGGY]  pushback(new  ZipLong(SWT_DEFAULT,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWT_DEFAULT,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWT_DEFAULT,  WORD,  LFH_BUF));	  pushback(new    ZipLong(SWT_DEFAULT,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
357	[BUG]  [BUGGY]  pushback(new  ZipLong(SWT_DEFAULT,  DWORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWT_DEFAULT,  DWORD,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWT_DEFAULT,  DWORD,  WORD_BUF));	  pushback(new    ZipLong(SWT_DEFAULT,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
358	[BUG]  [BUGGY]  pushback(new  ZipLong(DWORD,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(DWORD,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(DWORD,  WORD,  LFH_BUF));	  pushback(new    ZipLong(SWT_DEFAULT,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
359	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LH_BUF));    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
360	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  LH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD,  LH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD,  LH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LH_BUF));    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
361	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  CFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  CFH_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
362	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
363	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_LEN),  potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_LEN),  potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_LEN),  potentialSig,  DWORD);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
364	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  DWORD);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
365	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD),  potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD),  potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD),  potentialSig,  DWORD);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
366	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD),  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD),  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD),  LFH_LEN);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
367	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  CFH_LEN),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  CFH_LEN),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  CFH_LEN),  WORD,  DWORD);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
368	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  LFH_LEN));	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
369	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_BUF,  LFH_SIG));	  pushback(new    ZipLong(WORD,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
370	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_SIG,  potentialSig));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_SIG,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_SIG,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
371	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  SHORT_BUF,  LFH_SIG));	  pushback(new    ZipLong(WORD,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
372	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  LFH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  LFH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  LFH_LEN,  DWORD));	  pushback(new    ZipLong(PREFIX,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
373	[BUG]  [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SHORT_BUF,  WORD,  DWORD));	  pushback(new    ZipLong(PREFIX,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
374	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  PREFIX));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  PREFIX));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD,  PREFIX));	  pushback(new    ZipLong(PREFIX,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
375	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
376	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
377	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
378	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
379	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
380	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  0,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
381	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  0,  WORD_BUF));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
382	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  10));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  10));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  0,  10));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
383	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  0),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  0),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  0,  0),  potentialSig);	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
384	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  0,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  0,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  0,  0));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
385	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  0,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  0,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  0,  0));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
386	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  0,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  0,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  0,  0));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
387	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DW    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
388	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DW    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
389	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  FLOAT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  FLOAT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  FLOAT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
390	[BUG]  [BUGGY]  pushback(new  ZipLong(FLOAT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(FLOAT_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(FLOAT_BUF,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
391	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  FLOAT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  FLOAT_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  FLOAT_BUF,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
392	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  FLOAT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  FLOAT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  FLOAT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
393	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  FLOAT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  FLOAT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  FLOAT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
394	[BUG]  [BUGGY]  pushback(new  ZipLong(ZipLong.FLOAT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(ZipLong.FLOAT_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(ZipLong.FLOAT_BUF,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
395	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
396	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DEFAULT_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  DEFAULT_SIG);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
397	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG),  potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG),  potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG),  potentialSig,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
398	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  SHORT_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
399	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF),  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF),  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SKIP_BUF),  SHORT_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
400	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  SHORT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  SHORT_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
401	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
402	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
403	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  10),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  10),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  10),  potentialSig);	  pushback(new    ZipLong(PARENT_SIG,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
404	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  0));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
405	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  100));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  100));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  100));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
406	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  20));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  20));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  20));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
407	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD,  potentialSig));	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
408	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
409	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
410	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_SIG),  potentialSig);	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
411	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_SIG,  potentialSig));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_SIG,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_SIG,  potentialSig));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
412	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD,  WORD,  DWORD));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
413	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD,  LFH_LEN));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
414	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_LEN,  DWORD));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
415	[BUG]  [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
416	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  DWORD,  PREFIX));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  DWORD,  PREFIX));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  DWORD,  PREFIX));	  pushback(new    ZipLong(PREFIX,    DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
417	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  CFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD,  CFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
418	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  PREFIX));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  PREFIX));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  PREFIX));	  pushback(new    ZipLong(PREFIX,    DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
419	[BUG]  [BUGGY]  pushback(ZipLong.DEFAULT,  WORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.DEFAULT,  WORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.DEFAULT,  WORD,  potentialSig);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
420	[BUG]  [BUGGY]  pushback(POP_SIG,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(POP_SIG,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(POP_SIG,  DWORD,  potentialSig);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
421	[BUG]  [BUGGY]  pushback(possibleSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  DWORD);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
422	[BUG]  [BUGGY]  pushback(POST,  WORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(POST,  WORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(POST,  WORD,  potentialSig);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
423	[BUG]  [BUGGY]  pushback(potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  DWORD);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
424	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LFH_SIG),  potentialSig);	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
425	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  CFH_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  CFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  CFH_SIG));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
426	[BUG]  [BUGGY]  Pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	Pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
427	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
428	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  WORD,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
429	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD));	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
430	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF),  potentialSig);	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
431	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF),  potentialSig);	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
432	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  WORD)+  1,  potentialSig);	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
433	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIG),  potentialSig);	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LONG_SIG));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
434	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LONG_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  LONG_SIG));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LONG_SIG));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
435	[BUG]  [BUGGY]  pushback(potentialSig,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  WORD_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  WORD_BUF,  DWORD);	  pushback(potentialSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
436	[BUG]  [BUGGY]  pushback(CFH_BUF,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(CFH_BUF,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(CFH_BUF,  LFH_BUF,  DWORD);	  pushback(potentialSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
437	[BUG]  [BUGGY]  pushback(diff,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(diff,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(diff,  LFH_BUF,  DWORD);	  pushback(potentialSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
438	[BUG]  [BUGGY]  pushback(current,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  LFH_BUF,  DWORD);	  pushback(potentialSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
439	[BUG]  [BUGGY]  pushback(DFH,  LFH_BUF,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(DFH,  LFH_BUF,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(DFH,  LFH_BUF,  WORD);	  pushback(potentialSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
440	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LONG_SIG));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
441	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD,  LONG_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD,  LONG_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LONG_SIG));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
442	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
443	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
444	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  WORD),  potentialSig);	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
445	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
446	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
447	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIZE));  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIZE));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIZE));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
448	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  LFH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  LFH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  LFH_LEN,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
449	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  LFH_LEN,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  LFH_LEN,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  LFH_LEN,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
450	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DWORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  DWORD,  LFH_LEN));	  pushback(new    ZipLong(PARENT_SIG,    LFH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
451	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10),  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10),  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
452	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  0));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
453	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  1));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  1));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  1));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
454	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  12));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  12));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  12));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
455	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  WORD);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
456	[BUG]  [BUGGY]  pushback(current.entry,  DEFAULT_WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DEFAULT_WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DEFAULT_WORD,  DWORD);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
457	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  FLOAT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  FLOAT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  FLOAT_BUF);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
458	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  DEFAULT_WORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  DEFAULT_WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  DEFAULT_WORD);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
459	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  FLOAT_WORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  FLOAT_WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  FLOAT_WORD);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
460	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
461	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DESC));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DESC));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DESC));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
462	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
463	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
464	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_LEN));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
465	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_LEN),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_LEN),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_LEN),  potentialSig);	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
466	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_LEN,  potentialSig));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_LEN,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_LEN,  potentialSig));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
467	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_SIG));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
468	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
469	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  DWORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
470	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_LEN,  LFH_LEN));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
471	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  10));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  10));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  10));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
472	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  potentialSig));	  pushback(new    ZipLong(TWO_WORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
473	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  FLOAT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  FLOAT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  WORD,  FLOAT_BUF));	  pushback(new    ZipLong(TWO_WORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
474	[BUG]  [BUGGY]  pushback(start,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(start,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(start,  WORD,  LFH_BUF);	  pushback(start,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
475	[BUG]  [BUGGY]  pushback(entry,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(entry,  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(entry,  WORD,  DWORD);	  pushback(start,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
476	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  CFH_BUF));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
477	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_BUF,  potentialSig));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_BUF,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  LFH_BUF,  potentialSig));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
478	[BUG]  [BUGGY]  pushback(current.entry,  WORD,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  WORD,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  WORD,  DWORD,  potentialSig);	  pushback(current.entry,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
479	[BUG]  [BUGGY]  pushback(current.entry,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  WORD,  LFH_BUF);	  pushback(current.entry,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
480	[BUG]  [BUGGY]  pushback(current.entry,  WORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  WORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  WORD,  potentialSig);	  pushback(current.entry,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
481	[BUG]  [BUGGY]  pushback(current.entry,  LFH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  LFH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  LFH_LEN,  DWORD);	  pushback(current.entry,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
482	[BUG]  [BUGGY]  pushback(current.entry,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  LFH_BUF,  DWORD);	  pushback(current.entry,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
483	[BUG]  [BUGGY]  pushback(PREFIX,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  WORD,  LFH_LEN);	  pushback(PREFIX,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
484	[BUG]  [BUGGY]  pushback(PREFIX,  LFH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  LFH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  LFH_LEN,  DWORD);	  pushback(PREFIX,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
485	[BUG]  [BUGGY]  pushback(TWO_EXP_32,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(TWO_EXP_32,  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_EXP_32,  WORD,  DWORD);	  pushback(PREFIX,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
486	[BUG]  [BUGGY]  pushback(PREFIX,  WORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  WORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  WORD,  potentialSig);	  pushback(PREFIX,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
487	[BUG]  [BUGGY]  pushback(100,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  LFH_BUF,  DWORD);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
488	[BUG]  [BUGGY]  pushback(100,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  SHORT_BUF,  DWORD);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
489	[BUG]  [BUGGY]  pushback(100,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  WORD,  LFH_LEN);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
490	[BUG]  [BUGGY]  pushback(100,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  WORD,  LFH_BUF);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
491	[BUG]  [BUGGY]  pushback(100,  LFH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  LFH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  LFH_LEN,  DWORD);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
492	[BUG]  [BUGGY]  pushback(100,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  WORD,  LFH_SIG);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
493	[BUG]  [BUGGY]  pushback(potentialSig,  DWORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  DWORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  DWORD,  PREFIX);	  pushback(PREFIX,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
494	[BUG]  [BUGGY]  pushback(PREFIX,  DWORD,  potentialSig,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  DWORD,  potentialSig,  WORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  DWORD,  potentialSig,  WORD_BUF);	  pushback(PREFIX,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
495	[BUG]  [BUGGY]  pushback(PREFIX,  DWORD,  potentialSig,  WORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  DWORD,  potentialSig,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  DWORD,  potentialSig,  WORD);	  pushback(PREFIX,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
496	[BUG]  [BUGGY]  pushback(POLICY,  DWORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(POLICY,  DWORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(POLICY,  DWORD,  PREFIX);	  pushback(PREFIX,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
497	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
498	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
499	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
500	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
501	[BUG]  [BUGGY]  if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(!potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValu	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
502	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
503	[BUG]  [BUGGY]  pushback(SWORD,  DWORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(SWORD,  DWORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(SWORD,  DWORD,  PREFIX);	  pushback(PREFIX,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
504	[BUG]  [BUGGY]  pushback(wORD,  DWORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(wORD,  DWORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(wORD,  DWORD,  PREFIX);	  pushback(PREFIX,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
505	[BUG]  [BUGGY]  pushback(PREFIX,  WORD,  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  WORD,  CFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  WORD,  CFH_LEN);	  pushback(PREFIX,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
506	[BUG]  [BUGGY]  pushback(PREFIX,  WORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  WORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  WORD,  PREFIX);	  pushback(PREFIX,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
507	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIG));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LAST_SIZE));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
508	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIG),  potentialSig);	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LAST_SIZE));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
509	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LAST_SIZE));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LAST_SIZE));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  LAST_SIZE));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LAST_SIZE));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
510	[BUG]  [BUGGY]  pushback(new  ZipLong(ZipLong.CFH_SIG,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(ZipLong.CFH_SIG,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(ZipLong.CFH_SIG,  WORD,  DWORD));	  pushback(new    ZipLong(potentialSig,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
511	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  WORD,  LFH_LEN));	  pushback(new    ZipLong(potentialSig,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
512	[BUG]  [BUGGY]  pushback(possibleSig,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  WORD_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  WORD_BUF,  DWORD);	  pushback(possibleSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
513	[BUG]  [BUGGY]  pushback(offset,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(offset,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(offset,  LFH_BUF,  DWORD);	  pushback(possibleSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
514	[BUG]  [BUGGY]  pushback(possibleSig,  LFH_BUF,  WORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  LFH_BUF,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  LFH_BUF,  WORD);	  pushback(possibleSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
515	[BUG]  [BUGGY]  pushback(possibleSig,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  DWORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  DWORD,  LFH_BUF);	  pushback(possibleSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
516	[BUG]  [BUGGY]  pushback(possibleSig,  DWORD_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  DWORD_BUF,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  DWORD_BUF,  LFH_BUF);	  pushback(possibleSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
517	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD_BUF,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
518	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
519	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
520	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  LFH_BUF,  SHORT_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
521	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  LFH_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  LFH_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  LFH_BUF,  LFH_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
522	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  LFH_BUF),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
523	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
524	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
525	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
526	[BUG]  [BUGGY]  pushback(propertySig,  LFH,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(propertySig,  LFH,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(propertySig,  LFH,  DWORD);	  pushback(propertySig,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
527	[BUG]  [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
528	[BUG]  [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
529	[BUG]  [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
530	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
531	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  LFH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    DEFAULT_FACTOR,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
532	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  DEFAULT_FACTOR,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  DEFAULT_FACTOR,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  DEFAULT_FACTOR,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    DEFAULT_FACTOR,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
533	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD_BUF,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD_BUF,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD_BUF,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
534	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
535	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIZE));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
536	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LONG_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
537	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
538	[BUG]  [BUGGY]  pushback(PREFIX,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  WORD,  TWO_DWORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  WORD,  TWO_DWORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
539	[BUG]  [BUGGY]  pushback(0,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(0,  WORD,  TWO_DWORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(0,  WORD,  TWO_DWORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
540	[BUG]  [BUGGY]  pushback(new  ZipLong(FLOAT_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(FLOAT_BUF,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(FLOAT_BUF,  WORD_BUF));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
541	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
542	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
543	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LONG_SIG),  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LONG_SIG),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LONG_SIG),  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
544	[BUG]  [BUGGY]  pushback(current.entry,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  SHORT_BUF,  DWORD);	  pushback(current.entry,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
545	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  LFH_LEN);	  pushback(current.entry,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
546	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  FH_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  FH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  FH_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
547	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
548	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  LFH_LEN),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  LFH_LEN),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  LFH_LEN),  WORD,  DWORD);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
549	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN),  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN),  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_LEN),  WORD,  LFH_LEN);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
550	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_LEN),  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_LEN),  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  LFH_LEN),  WORD,  LFH_LEN);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
551	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  LFH_LEN),  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  LFH_LEN),  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  LFH_LEN),  WORD,  LFH_LEN);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
552	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN),  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN),  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_LEN),  LFH_BUF,  DWORD);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
553	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  potentialSig,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
554	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  LFH,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  LFH,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  LFH,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
555	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32),  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32),  SHORT_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
556	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_SIG),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
557	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD),  potentialSig);	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
558	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD),  potentialSig);	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
559	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD),  potentialSig);	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
560	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD),  potentialSig);	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
561	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  WORD);	  pushback(PREFIX,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
562	[BUG]  [BUGGY]  pushback(PREFIX,  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  WORD,  LFH_BUF);	  pushback(PREFIX,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
563	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  20),  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  20),  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  20),  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
564	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0),  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0),  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  0),  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    10),    DWORD));    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
565	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD),  FLOAT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD),  FLOAT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD),  FLOAT_BUF);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
566	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
567	[BUG]  [BUGGY]  pushback(potentialSig,  LFH_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  LFH_BUF,  WORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  LFH_BUF,  WORD_BUF);	  pushback(potentialSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
568	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  LH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  LH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_KEY,  LH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LH_BUF));    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
569	[BUG]  [BUGGY]  pushback(val,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(val,  DWORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(val,  DWORD,  DWORD);	  pushback(diff,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
570	[BUG]  [BUGGY]  pushback(new  ZipLong(LFH_BUF,  DWORD,  WRITE_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(LFH_BUF,  DWORD,  WRITE_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(LFH_BUF,  DWORD,  WRITE_BUF));	  pushback(new    ZipLong(WRITE_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
571	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  DWORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  DWORD,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  DWORD,  WORD_BUF));	  pushback(new    ZipLong(WRITE_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
572	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
573	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
574	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(T  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(T  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(T	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
575	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  0,  0));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  0,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  0,  0));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
576	[BUG]  [BUGGY]  pushback(possibleSig,  LFH_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  LFH_BUF,  WORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  LFH_BUF,  WORD_BUF);	  pushback(possibleSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
577	[BUG]  [BUGGY]  pushback(peerSig,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(peerSig,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(peerSig,  LFH_BUF,  DWORD);	  pushback(possibleSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
578	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD_BUF,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD_BUF,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD_BUF,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
579	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  LFH_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  LFH_BUF,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  LFH_BUF,  WORD_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
580	[BUG]  [BUGGY]  pushback(new  ZipLong(DFH,  DWORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(DFH,  DWORD,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(DFH,  DWORD,  WORD_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
581	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  LFH));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
582	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
583	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LONG_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  LONG_SIG));	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
584	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH));	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
585	[BUG]  [BUGGY]  pushback(SPACE,  DWORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(SPACE,  DWORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(SPACE,  DWORD,  PREFIX);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
586	[BUG]  [BUGGY]  pushback(PRINT,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PRINT,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PRINT,  DWORD,  WORD);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
587	[BUG]  [BUGGY]  pushback(new  ZipLong(FH_LEN,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(FH_LEN,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(FH_LEN,  LFH_LEN));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
588	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  potentialSig));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  FH_LEN,  potentialSig));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
589	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  FH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  FH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  FH_LEN,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
590	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_KEY,  DEFAULT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_KEY,  DEFAULT_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
591	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    PARENT_SIG));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
592	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  10H));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  10H));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  10H));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    PARENT_SIG));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
593	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  PARENT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  PARENT_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  PARENT_BUF,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    PARENT_SIG));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
594	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  FH_SIG));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  FH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  FH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    PARENT_SIG));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
595	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
596	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE_BUF,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE_BUF,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE_BUF,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
597	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
598	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
599	[BUG]  [BUGGY]  pushback(new  ZipLong(LFH_BUF,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(LFH_BUF,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(LFH_BUF,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(TWO_EXP_32,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
600	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  WORD));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
601	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SKIP_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SKIP_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  SKIP_BUF,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
602	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE_BUF,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE_BUF,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE_BUF,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
603	[BUG]  [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  WORD,  PARENT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  WORD,  PARENT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SHORT_BUF,  WORD,  PARENT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
604	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
605	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
606	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
607	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
608	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  DWORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  DWORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  DWORD,  LFH_SIG));	  pushback(new    ZipLong(WORD,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
609	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
610	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  SHORT_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  SHORT_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  SHORT_BUF,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
611	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
612	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  LFH_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  LFH_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  LFH_BUF,  WORD));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
613	[BUG]  [BUGGY]  pushback(new  ZipLong(PLH_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PLH_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PLH_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
614	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  CFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  WORD,  CFH_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
615	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD),    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
616	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
617	[BUG]  [BUGGY]  pushback(PRINT_BUF,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PRINT_BUF,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PRINT_BUF,  WORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
618	[BUG]  [BUGGY]  pushback(PLH_BUF,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PLH_BUF,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PLH_BUF,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
619	[BUG]  [BUGGY]  pushback(PARENT_BUF,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PARENT_BUF,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PARENT_BUF,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
620	[BUG]  [BUGGY]  pushback(peek,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(peek,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(peek,  DWORD,  potentialSig);	  pushback(peek,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
621	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT,  WORD,  DWORD));	  pushback(new    ZipLong(potentialSig,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
622	[BUG]  [BUGGY]  pushback(new  ZipLong(possibleSig,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(possibleSig,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(possibleSig,  WORD,  DWORD));	  pushback(new    ZipLong(potentialSig,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
623	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  WORD,  LFH_SIG));	  pushback(new    ZipLong(potentialSig,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
624	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_KEY,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_KEY,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_KEY,  WORD,  DWORD));	  pushback(new    ZipLong(TWO_DWORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
625	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(TWO_DWORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
626	[BUG]  [BUGGY]  pushback(posentialSig,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(posentialSig,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(posentialSig,  LFH_BUF,  DWORD);	  pushback(posentialSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
627	[BUG]  [BUGGY]  pushback(pos,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(pos,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(pos,  LFH_BUF,  DWORD);	  pushback(posentialSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
628	[BUG]  [BUGGY]  pushback(new  ZipLong(posentialSig,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(posentialSig,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(posentialSig,  LFH_BUF,  DWORD));	  pushback(posentialSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
629	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
630	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
631	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF,  DWORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
632	[BUG]  [BUGGY]  pushback(possibleSig,  LFH_BUF,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  LFH_BUF,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  LFH_BUF,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
633	[BUG]  [BUGGY]  pushback(val,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(val,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(val,  WORD,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
634	[BUG]  [BUGGY]  pushback(PREFIX,  LFH_BUF,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  LFH_BUF,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  LFH_BUF,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
635	[BUG]  [BUGGY]  pushback(posentialSig,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(posentialSig,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(posentialSig,  DWORD,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
636	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH)+  1,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH)+  1,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH)+  1,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
637	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD,  WORD)+  1,  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD,  WORD)+  1,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD,  WORD)+  1,  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD)+    1,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
638	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  10));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  10));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  10));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
639	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
640	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
641	[BUG]  [BUGGY]  pushback(possibleSig,  FH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  FH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  FH_BUF,  DWORD);	  pushback(possibleSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
642	[BUG]  [BUGGY]  pushback(possibleSig,  0,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  0,  0);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  0,  0);	  pushback(possibleSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
643	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  0,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  0,  LFH_LEN));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
644	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  WORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  WORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  WORD,  LFH_LEN));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
645	[BUG]  [BUGGY]  pushback(100,  WORD_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  WORD_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  WORD_BUF,  DWORD);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
646	[BUG]  [BUGGY]  pushback(10,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  DWORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  DWORD,  LFH_BUF);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
647	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
648	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
649	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  LFH_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
650	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  LFH_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  LFH_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  LFH_BUF,  LFH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
651	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE_BUF,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE_BUF,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE_BUF,  WORD,  LFH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
652	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  LFH_SIG));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
653	[BUG]  [BUGGY]  pushback(0,  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(0,  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(0,  WORD,  DWORD);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
654	[BUG]  [BUGGY]  pushback(10,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  DWORD,  potentialSig);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
655	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
656	[BUG]  [BUGGY]  if(potentialSig  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
657	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getVal  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getVal  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getVal	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
658	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
659	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
660	[BUG]  [BUGGY]  pushback(PREFIX,  DWORD,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  DWORD,  WORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  DWORD,  WORD_BUF);	  pushback(PREFIX,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
661	[BUG]  [BUGGY]  pushback(possibleSig,  DWORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  DWORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  DWORD,  PREFIX);	  pushback(PREFIX,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
662	[BUG]  [BUGGY]  pushback(new  ZipLong(0,  0,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(0,  0,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(0,  0,  0));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
663	[BUG]  [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF,  SHORT_BUF));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
664	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_BUF,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_BUF,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_BUF,  WORD,  DWORD));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
665	[BUG]  [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SHORT_BUF,  SHORT_BUF));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
666	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  LFH_BUF,  DWORD));	  pushback(new    ZipLong(PREFIX,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
667	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  SHORT_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  SHORT_BUF,  DWORD));	  pushback(new    ZipLong(PREFIX,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
668	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LONG_SIG));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
669	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  SHORT_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  SHORT_BUF,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  SHORT_BUF,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
670	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF),  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF),  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF),  SHORT_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
671	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  SHORT_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
672	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  WORD_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  WORD_BUF,  DWORD));	  pushback(new    ZipLong(PREFIX,    potentialSig,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
673	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  potentialSig,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  potentialSig,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  potentialSig,  DWORD));	  pushback(new    ZipLong(PREFIX,    potentialSig,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
674	[BUG]  [BUGGY]  pushback(current,  0,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  0,  0);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  0,  0);	  pushback(current,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
675	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  LFH_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
676	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  LFH_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  LFH_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  LFH_BUF,  WORD));	  pushback(new    ZipLong(PREFIX,    DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
677	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  WORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  DWORD,  WORD));	  pushback(new    ZipLong(PREFIX,    DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
678	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  PREFIX));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  PREFIX));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  DWORD,  PREFIX));	  pushback(new    ZipLong(PREFIX,    DWORD,    WORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
679	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD_BUF,  SHORT_BUF),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
680	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  DWORD,  potentialSig);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
681	[BUG]  [BUGGY]  pushback(PARENT_SIG,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PARENT_SIG,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PARENT_SIG,  DWORD,  potentialSig);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
682	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DWORD),  potentialSig);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
683	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
684	[BUG]  [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	readFully(ZipLong.getValue(TWO_DWORD_BUF,  WORD));	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
685	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
686	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  DWORD,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
687	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  DWORD,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  DWORD,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
688	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_LEN,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  LFH_LEN,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  LFH_LEN,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
689	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  DWORD,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  DWORD,  WORD_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  DWORD,  WORD_BUF));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
690	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD_BUF),  LFH_BUF,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
691	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF),  WORD_BUF,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
692	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
693	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  LFH_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  LFH_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  LFH_BUF,  LFH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
694	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  WORD,  LFH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
695	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  LFH_BUF));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
696	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  LFH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
697	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
698	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LONG_SIG),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
699	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG),  LFH,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG),  LFH,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG),  LFH,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
700	[BUG]  [BUGGY]  pushback(ZipLong.getValue(WORD,  DEFAULT_SIG),  WORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(WORD,  DEFAULT_SIG),  WORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(WORD,  DEFAULT_SIG),  WORD,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
701	[BUG]  [BUGGY]  pushback(buf,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(buf,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(buf,  WORD,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
702	[BUG]  [BUGGY]  pushback(possibleSig,  LFH_LEN,  WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  LFH_LEN,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  LFH_LEN,  WORD);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
703	[BUG]  [BUGGY]  pushback(val,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(val,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(val,  WORD,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
704	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  LFH_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  LFH_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  LFH_BUF,  WORD));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
705	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
706	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getVal  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getVal  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getVal	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
707	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
708	[BUG]  [BUGGY]  if(potentialSig  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
709	[BUG]  [BUGGY]  pushback(PREFIX,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  LFH_BUF,  DWORD);	  pushback(PREFIX,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
710	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  DWORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  DWORD,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
711	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD));	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
712	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
713	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
714	[BUG]  [BUGGY]  if(potentialSig  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
715	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
716	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
717	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  DUP,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  DUP,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  DUP,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
718	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  DUP,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  DUP,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  DUP,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
719	[BUG]  [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  pushback(new    ZipLong(TWO_WORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
720	[BUG]  [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  pushback(new    ZipLong(TWO_WORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
721	[BUG]  [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_BUF));	  pushback(new    ZipLong(TWO_WORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
722	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_SIG),  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LONG_SIG),    DWORD);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
723	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  SHORT_BUF,  LFH_BUF));	  pushback(new    ZipLong(WORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
724	[BUG]  [BUGGY]  pushback(start,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(start,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(start,  LFH_BUF,  DWORD);	  pushback(start,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
725	[BUG]  [BUGGY]  pushback(start,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(start,  DWORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(start,  DWORD,  LFH_BUF);	  pushback(start,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
726	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  SHORT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  SHORT_BUF);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
727	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  LFH_SIG);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
728	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  FH_LEN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  FH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  FH_LEN);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
729	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  LFH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  LFH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  LFH_LEN,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    LFH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
730	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  potentialSig));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  SHORT_BUF,  potentialSig));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
731	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  PARENT_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  PARENT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  WORD,  PARENT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
732	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  LFH_BUF,  potentialSig));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  LFH_BUF,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  LFH_BUF,  potentialSig));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
733	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  FH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  FH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  FH_BUF));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
734	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  SHORT_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
735	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  LFH_BUF));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
736	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  DWORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  DWORD,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
737	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DWORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DWORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  DWORD,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
738	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT,  DWORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT,  DWORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT,  DWORD,  potentialSig));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
739	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  10,  10));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  10,  10));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  10,  10));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
740	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  10));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  10));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  SHORT_BUF,  10));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
741	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
742	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setS  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setS  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setS	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
743	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
744	[BUG]  [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
745	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.set  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.set  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.set	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
746	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  CFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  CFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  CFH_BUF,  DWORD));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
747	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  LFH_SIG,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  LFH_SIG,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  LFH_SIG,  DWORD));	  pushback(new    ZipLong(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
748	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  DUP,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  DUP,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  DUP,  DWORD));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
749	[BUG]  [BUGGY]  pushback(entry,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(entry,  DWORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(entry,  DWORD,  DWORD);	  pushback(peek,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
750	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  peek));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  peek));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  DWORD,  peek));	  pushback(peek,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
751	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LAST_SIZE));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LAST_SIZE));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LAST_SIZE));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LAST_SIZE));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
752	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIZE),  potentialSig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIZE),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LAST_SIZE),  potentialSig);	  pushback(ZipLong.getValue(TWO_WORD_BUF,    LAST_SIZE));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
753	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  10),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  10),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  10),  potentialSig);	  pushback(new    ZipLong(PARENT_SIG,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
754	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  FLOAT_BUF,  PARENT_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  FLOAT_BUF,  PARENT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  FLOAT_BUF,  PARENT_SIG));	  pushback(new    ZipLong(PARENT_SIG,    FLOAT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
755	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_BUF));	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
756	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  DEFAULT_SIG,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  DEFAULT_SIG,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  DEFAULT_SIG,  DWORD));	  pushback(new    ZipLong(TWO_DWORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
757	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LH_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  LH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  LH_SIG));	  pushback(ZipLong.getValue(TWO_WORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
758	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  potentialSig));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
759	[BUG]  [BUGGY]  pushback(PRINT_BUF,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PRINT_BUF,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PRINT_BUF,  DWORD,  potentialSig);	  pushback(PREFIX,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
760	[BUG]  [BUGGY]  pushback(POLICY,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(POLICY,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(POLICY,  DWORD,  potentialSig);	  pushback(PREFIX,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
761	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  FH_LEN));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  WORD,  FH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  WORD,  FH_LEN));	  pushback(new    ZipLong(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
762	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10  +  1));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10  +  1));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  WORD,  10  +  1));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    10));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
763	[BUG]  [BUGGY]  pushback(potentialSig,  LFH_LEN,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  LFH_LEN,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  LFH_LEN,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
764	[BUG]  [BUGGY]  pushback(start,  WORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(start,  WORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(start,  WORD,  LFH_LEN);	  pushback(potentialSig,    WORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
765	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  WORD,  LFH_SIG);	  pushback(ZipLong.getValue(TWO_EXP_32),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
766	[BUG]  [BUGGY]  pushback(10,  DWORD,  WORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  DWORD,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  DWORD,  WORD);	  pushback(PREFIX,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
767	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  LFH_BUF));	  pushback(new    ZipLong(TWO_WORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
768	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  DEFAULT_SIG,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD_BUF,  DEFAULT_SIG,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD_BUF,  DEFAULT_SIG,  DWORD));	  pushback(new    ZipLong(TWO_WORD_BUF,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
769	[BUG]  [BUGGY]  pushback(10,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  WORD,  TWO_DWORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  WORD,  TWO_DWORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
770	[BUG]  [BUGGY]  pushback(buffer,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(buffer,  WORD,  TWO_DWORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(buffer,  WORD,  TWO_DWORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
771	[BUG]  [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(TWO_DWORD_BUF,  WORD,  TWO_DWORD_BUF);	  pushback(WORD,    WORD,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
772	[BUG]  [BUGGY]  pushback(possibleSig,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  DWORD,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
773	[BUG]  [BUGGY]  pushback(10,  DWORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  DWORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  DWORD,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
774	[BUG]  [BUGGY]  pushback(PREFIX,  PREFIX,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  PREFIX,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  PREFIX,  LFH_SIG);	  pushback(PREFIX,    DWORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
775	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
776	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
777	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
778	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  PARENT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  PARENT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_BUF,  PARENT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
779	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  DUP,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  DUP,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  DUP,  LFH_BUF));	  pushback(new    ZipLong(SWORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
780	[BUG]  [BUGGY]  pushback(possibleSig,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  DWORD,  LFH_LEN);	  pushback(possibleSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
781	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig.equals(ZipLong.LFH_LEN)));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig.equals(ZipLong.LFH_LEN)));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig.equals(ZipLong.LFH_LEN)));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_LEN));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
782	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  potentialSig);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
783	[BUG]  [BUGGY]  pushback(current.entry,  DWORD,  FH_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current.entry,  DWORD,  FH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current.entry,  DWORD,  FH_SIG);	  pushback(current.entry,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
784	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  DWORD,  LFH_BUF);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
785	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  potentialSig,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
786	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF),  WORD,  DWORD);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
787	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  potentialSig));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  DEFAULT_FACTOR,  potentialSig));	  pushback(new    ZipLong(PARENT_SIG,    DEFAULT_FACTOR,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
788	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  WORD,  SHORT_BUF));	  pushback(new    ZipLong(potentialSig,    WORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
789	[BUG]  [BUGGY]  pushback(propertySig,  FH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(propertySig,  FH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(propertySig,  FH_LEN,  DWORD);	  pushback(propertySig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
790	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
791	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
792	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LONG));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LONG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LONG));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
793	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
794	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
795	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  WORD));  current.entry.setSize(ZipLong.	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
796	[BUG]  [BUGGY]  pushback(current,  0,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  0,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  0,  DWORD);	  pushback(current,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
797	[BUG]  [BUGGY]  pushback(current,  potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(current,  potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(current,  potentialSig,  DWORD);	  pushback(current,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
798	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WORD_BUF,  WORD,  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
799	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(WORD,  SHORT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(WORD,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
800	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LONG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
801	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  0));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
802	[BUG]  [BUGGY]  pushback(offset,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(offset,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(offset,  DWORD,  potentialSig);	  pushback(offset,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
803	[BUG]  [BUGGY]  pushback(offset,  DWORD,  FH_LEN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(offset,  DWORD,  FH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(offset,  DWORD,  FH_LEN);	  pushback(offset,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
804	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD),  potentialSig);	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
805	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  LH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  LH_BUF));	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
806	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD)+  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD)+  1);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_SHORT_BUF,  WORD)+  1);	  pushback(ZipLong.getValue(TWO_SHORT_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
807	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  PARENT_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  PARENT_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  SHORT_BUF,  PARENT_BUF));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
808	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  PARENT));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  SHORT_BUF,  PARENT));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  SHORT_BUF,  PARENT));	  pushback(new    ZipLong(PARENT_BUF,    SHORT_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
809	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LH_BUF),  potentialSig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LH_BUF),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LH_BUF),  potentialSig);	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LH_BUF));    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
810	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(wORD,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
811	[BUG]  [BUGGY]  pushback(new  ZipLong(SWORD,  DEFAULT_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SWORD,  DEFAULT_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SWORD,  DEFAULT_BUF,  LFH_BUF));	  pushback(new    ZipLong(SWORD,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
812	[BUG]  [BUGGY]  pushback(start,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(start,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(start,  WORD,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
813	[BUG]  [BUGGY]  pushback(buf,  WORD,  LFH_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(buf,  WORD,  LFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(buf,  WORD,  LFH_SIG);	  pushback(potentialSig,    WORD,    LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
814	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  DEFAULT_SIG),  WORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  DEFAULT_SIG),  WORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  DEFAULT_SIG),  WORD,  DWORD);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
815	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  LFH_LEN));	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
816	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN),  potentialSig,  DWORD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_LEN),  potentialSig,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_LEN),  potentialSig,  DWORD);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
817	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  DWORD),  potentialSig,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DWORD_BUF,  DWORD),  potentialSig,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DWORD_BUF,  DWORD),  potentialSig,  LFH_LEN);	  pushback(new    ZipLong(TWO_DWORD_BUF,    LFH_LEN),    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
818	[BUG]  [BUGGY]  pushback(1000,  LFH_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(1000,  LFH_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(1000,  LFH_BUF,  DWORD);	  pushback(TWO_DWORD_BUF,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
819	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  0,  0));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  0,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  0,  0));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
820	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  0,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE_BUF,  0,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE_BUF,  0,  0));	  pushback(new    ZipLong(PARENT_SIG,    0,    0));    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
821	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  10H));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  WORD,  10H));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  WORD,  10H));	  pushback(new    ZipLong(PARENT_BUF,    WORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
822	[BUG]  [BUGGY]  pushback(potentialSig,  DWORD,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  DWORD,  LFH_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  DWORD,  LFH_BUF);	  pushback(posentialSig,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
823	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_WSORD_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_WSORD_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_WSORD_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
824	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF,  WORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF,  WORD));	  pushback(ZipLong.getValue(TWO_DWORD_BUF),    SHORT_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
825	[BUG]  [BUGGY]  pushback(PREFIX,  PREFIX,  DWORD);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(PREFIX,  PREFIX,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(PREFIX,  PREFIX,  DWORD);	  pushback(PREFIX,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
826	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
827	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  W	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
828	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry  ==  null)  {  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
829	[BUG]  [BUGGY]  pushback(100,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  DWORD,  potentialSig);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
830	[BUG]  [BUGGY]  pushback(100,  LFH_SIG,  DWORD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  LFH_SIG,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  LFH_SIG,  DWORD);	  pushback(100,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
831	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_EXP_32,  LFH_BUF,  DWORD));	  pushback(ZipLong.getValue(TWO_EXP_32,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
832	[BUG]  [BUGGY]  pushback(FRACTIONAL_BUF,  DWORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(FRACTIONAL_BUF,  DWORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(FRACTIONAL_BUF,  DWORD,  PREFIX);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
833	[BUG]  [BUGGY]  pushback(10,  DWORD,  FLOAT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  DWORD,  FLOAT_BUF);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  DWORD,  FLOAT_BUF);	  pushback(PREFIX,    DWORD,    FLOAT_BUF);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
834	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(TWO_EXP_32,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
835	[BUG]  [BUGGY]  pushback(new  ZipLong(10,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(10,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(10,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(TWO_EXP_32,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
836	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  DWORD,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  DWORD,  DWORD);	  pushback(propertySig,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
837	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  DUP,  PARENT_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  DUP,  PARENT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  DUP,  PARENT_SIG));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
838	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DUP,  FH_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  DUP,  FH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  DUP,  FH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    DUP,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
839	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LH_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LH_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIG));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
840	[BUG]  [BUGGY]  pushback(possibleSig,  SHORT_BUF,  WORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  SHORT_BUF,  WORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  SHORT_BUF,  WORD);	  pushback(possibleSig,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
841	[BUG]  [BUGGY]  pushback(possibleSig,  WORD,  CFH_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(possibleSig,  WORD,  CFH_SIG);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(possibleSig,  WORD,  CFH_SIG);	  pushback(possibleSig,    DWORD,    WORD);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
842	[BUG]  [BUGGY]  pushback(10,  LFH_LEN,  DWORD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  LFH_LEN,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  LFH_LEN,  DWORD);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
843	[BUG]  [BUGGY]  pushback(10,  STRING_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  STRING_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  STRING_BUF,  DWORD);	  pushback(10,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
844	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_DEFAULT,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_DEFAULT,  DWORD,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_DEFAULT,  DWORD,  LFH_BUF));	  pushback(new    ZipLong(SWT_DEFAULT,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
845	[BUG]  [BUGGY]  pushback(new  ZipLong(WRITE,  DWORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WRITE,  DWORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WRITE,  DWORD,  LFH_SIG));	  pushback(new    ZipLong(PREFIX,    DWORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
846	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  PARENT_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  LFH_BUF,  PARENT_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  LFH_BUF,  PARENT_SIG));	  pushback(new    ZipLong(PARENT_SIG,    LFH_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
847	[BUG]  [BUGGY]  pushback(potentialSig,  SHORT_BUF,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(potentialSig,  SHORT_BUF,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(potentialSig,  SHORT_BUF,  DWORD);	  pushback(potentialSig,    LFH_BUF,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
848	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LONG));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    WORD));    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
849	[BUG]  [BUGGY]  pushback(diff,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(diff,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(diff,  DWORD,  potentialSig);	  pushback(diff,    DWORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
850	[BUG]  [BUGGY]  pushback(offset,  start,  DWORD);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(offset,  start,  DWORD);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(offset,  start,  DWORD);	  pushback(start,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
851	[BUG]  [BUGGY]  pushback(start,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(start,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(start,  DWORD,  potentialSig);	  pushback(start,    WORD,    DWORD);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
852	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_ESCAPE,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_ESCAPE,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_ESCAPE,  WORD,  DWORD));	  pushback(new    ZipLong(TWO_DWORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
853	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_WORD,  WORD,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_WORD,  WORD,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_WORD,  WORD,  LFH_SIG));	  pushback(new    ZipLong(TWO_DWORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
854	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry  ==  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
855	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
856	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.LFH_SIG))  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.set	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
857	[BUG]  [BUGGY]  pushback(10,  WORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(10,  WORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(10,  WORD,  PREFIX);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
858	[BUG]  [BUGGY]  pushback(prc,  WORD,  PREFIX);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(prc,  WORD,  PREFIX);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(prc,  WORD,  PREFIX);	  pushback(WORD,    DWORD,    PREFIX);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
859	[BUG]  [BUGGY]  pushback(new  ZipLong(PREFIX,  PREFIX,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PREFIX,  PREFIX,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PREFIX,  PREFIX,  LFH_LEN));	  pushback(new    ZipLong(PREFIX,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
860	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig.equals(ZipLong.LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_SIG,  WORD,  potentialSig.equals(ZipLong.LFH_SIG));	  pushback(new    ZipLong(PARENT_SIG,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
861	[BUG]  [BUGGY]  pushback(entry,  DWORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(entry,  DWORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(entry,  DWORD,  potentialSig);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
862	[BUG]  [BUGGY]  pushback(start,  WORD,  potentialSig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(start,  WORD,  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(start,  WORD,  potentialSig);	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
863	[BUG]  [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  DWORD,  potentialSig));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(PARENT_BUF,  DWORD,  potentialSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(PARENT_BUF,  DWORD,  potentialSig));	  pushback(WORD,    DWORD,    potentialSig);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
864	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  10  +  LFH_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  10  +  LFH_BUF,  LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  10  +  LFH_BUF,  LFH_BUF));	  pushback(new    ZipLong(WORD,    LFH_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
865	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  potentielSig));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  potentielSig));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  WORD,  potentielSig));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
866	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  PotentialSignature.LFH_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD_BUF,  WORD,  PotentialSignature.LFH_BUF));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD_BUF,  WORD,  PotentialSignature.LFH_BUF));	  pushback(new    ZipLong(WORD_BUF,    DWORD,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
867	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DW    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
868	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DW  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DW  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DW	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DW    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
869	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DW    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
870	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  current.entry.setSize(ZipLong	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DW    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
871	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_WORD_BUF,  WORD));  current.entry.setSize(ZipLong.getValue(TWO_DW	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DW    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
872	[BUG]  [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  potentialSig,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(WORD,  WORD,  potentialSig,  LFH_LEN));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(WORD,  WORD,  potentialSig,  LFH_LEN));	  pushback(new    ZipLong(WORD,    DWORD,    potentialSig));    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
873	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
874	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
875	[BUG]  [BUGGY]  pushback(new  ZipLong(FH_LEN,  potentialSig,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(FH_LEN,  potentialSig,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(FH_LEN,  potentialSig,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
876	[BUG]  [BUGGY]  pushback(new  ZipLong(SPACE,  FH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(SPACE,  FH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(SPACE,  FH_LEN,  DWORD));	  pushback(new    ZipLong(PARENT_SIG,    FH_LEN,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
877	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
878	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(T  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(T  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(T	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
879	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO_  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO_  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  current.entry.setSize(ZipLong.getValue(TWO_	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
880	[BUG]  [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  NORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(TWO_EXP_32,  NORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(TWO_EXP_32,  NORD,  DWORD));	  pushback(new    ZipLong(WORD,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
881	[BUG]  [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_SIG));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_SIG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF,  LFH_SIG));	  pushback(ZipLong.getValue(TWO_DWORD_BUF,    WORD,    LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
882	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(TWO	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
883	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
884	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
885	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	if(current.entry!=  null)  {  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setSize(ZipLong.getValue(	  if(current.entry!=    null)    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    }    else    {    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
886	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
887	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LONG));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
888	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD),  potentialSig);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WORD));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
889	[BUG]  [BUGGY]  pushback(new  ZipLong(current.entry,  WORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(current.entry,  WORD,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(current.entry,  WORD,  DWORD));	  pushback(new    ZipLong(potentialSig,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
890	[BUG]  [BUGGY]  pushback(new  ZipLong(potentialSig,  FH_LEN,  DWORD));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(new  ZipLong(potentialSig,  FH_LEN,  DWORD));  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(new  ZipLong(potentialSig,  FH_LEN,  DWORD));	  pushback(new    ZipLong(potentialSig,    WORD,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
891	[BUG]  [BUGGY]  pushback(100,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(100,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(100,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
892	[BUG]  [BUGGY]  pushback(SPACE,  DWORD,  LFH_LEN);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]            readFully(TWO_DWORD_BUF);  final  ZipLong  potentialSig  =  new  ZipLong(TWO_DWORD_BUF,  DWORD);  if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  pushback(SPACE,  DWORD,  LFH_LEN);  [BUGGY]      current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WORD));  }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	752	752	2	replace	pushback(SPACE,  DWORD,  LFH_LEN);	  pushback(PRINT_BUF,    DWORD,    LFH_LEN);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
