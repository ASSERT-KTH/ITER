bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  val.write(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.write(ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.write(ZipLong.DD_SIG);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
2	[BUG]  [BUGGY]  val.setLength(1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.setLength(1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.setLength(1);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
3	[BUG]  [BUGGY]  val.reset();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.reset();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.reset();	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
4	[BUG]  [BUGGY]  val.setLength(2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.setLength(2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.setLength(2);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
5	[BUG]  [BUGGY]  val.write(ZipLong.DECEMBER);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.write(ZipLong.DECEMBER);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.write(ZipLong.DECEMBER);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
6	[BUG]  [BUGGY]  current.entry.setValue(val,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val);	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
7	[BUG]  [BUGGY]  currentEntry.setValue(val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setValue(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setValue(val);	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]  CurrentEntry  val  =  currentEntry.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  val  =  currentEntry.getValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  val  =  currentEntry.getValue();	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  entry.setValue(val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val);	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  current.entry.setValue(val,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  0);	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
11	[BUG]  [BUGGY]  current.entry.setValue(val  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val  +  1);	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
12	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append(value);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append(value);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append(value);	  val.append(ZipLong.DD_SIG).append(val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
13	[BUG]  [BUGGY]  val.append(zipLong.DD_SIG).append(val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(zipLong.DD_SIG).append(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(zipLong.DD_SIG).append(val);	  val.append(ZipLong.DD_SIG).append(val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
14	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append(shortValue);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append(shortValue);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append(shortValue);	  val.append(ZipLong.DD_SIG).append(val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
15	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append(val  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append(val  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append(val  +  1);	  val.append(ZipLong.DD_SIG).append(val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
16	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append(v);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append(v);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append(v);	  val.append(ZipLong.DD_SIG).append(val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
17	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  1);	  current.entry.setValue(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
18	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  0,  val.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  0,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  0,  val.length);	  current.entry.setValue(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
19	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  0);	  current.entry.setValue(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
20	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  4);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  4);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  4);	  current.entry.setValue(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
21	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  2);	  current.entry.setValue(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
22	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  10);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  10);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  10);	  current.entry.setValue(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
23	[BUG]  [BUGGY]  entry.setValue(val.getValue(),  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getValue(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getValue(),  0);	  current.entry.setValue(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
24	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val.getKey());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val.getKey());	  current.entry.setZipEncoding(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
25	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val.getValue());	  current.entry.setZipEncoding(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
26	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getLongValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getLongValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getLongValue());	  current.entry.setZipEncoding(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
27	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getShortName());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getShortName());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getShortName());	  current.entry.setZipEncoding(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
28	[BUG]  [BUGGY]  currentEntry.setValue(val.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setValue(val.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setValue(val.getValue(),  val);	  current.entry.setValue(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
29	[BUG]  [BUGGY]  entry.setValue(val.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getValue(),  val);	  current.entry.setValue(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
30	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  z);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  z);	  current.entry.setValue(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
31	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getValue()  +  1);	  current.entry.setValue(val.getKey()    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
32	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.length  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.length  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.length  +  1);	  current.entry.setValue(val.getKey()    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
33	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getLength()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getLength()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getLength()  +  1);	  current.entry.setValue(val.getKey()    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
34	[BUG]  [BUGGY]  current.entry.setCrc(zipEncoding.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(zipEncoding.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(zipEncoding.getValue(),  val);	  current.entry.setCrc(val.getValue(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
35	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  zipEncoding);	  current.entry.setCrc(val.getValue(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
36	[BUG]  [BUGGY]  currentEntry.setCrc(zipEncoding.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(zipEncoding.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(zipEncoding.getValue(),  val);	  current.entry.setCrc(val.getValue(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
37	[BUG]  [BUGGY]  entryEncoding.setValue(val.getValue(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val.getValue(),  zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val.getValue(),  zipEncoding);	  current.entry.setCrc(val.getValue(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
38	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  encoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  encoding);	  current.entry.setCrc(val.getValue(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
39	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getShortValue());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getShortValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getShortValue());	  current.entry.setValue(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
40	[BUG]  [BUGGY]  entry.setValue(val.getKey(),  val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getKey(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getKey(),  val.getValue());	  current.entry.setValue(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
41	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getLongValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getLongValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getLongValue());	  current.entry.setValue(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
42	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getCharacterEncoding());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getCharacterEncoding());	  current.entry.setValue(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
43	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.toString());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.toString());	  current.entry.setValue(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
44	[BUG]  [BUGGY]  current.entry.setValue(val.toLowerCase());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toLowerCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toLowerCase());	  current.entry.setValue(val.toUpperCase());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
45	[BUG]  [BUGGY]  current.entry.setValue(val.toUpperCase(),  val.toLowerCase());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toUpperCase(),  val.toLowerCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toUpperCase(),  val.toLowerCase());	  current.entry.setValue(val.toUpperCase());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
46	[BUG]  [BUGGY]  current.entry.setValue(val.toUpperCase(),  val.toUpperCase());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toUpperCase(),  val.toUpperCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toUpperCase(),  val.toUpperCase());	  current.entry.setValue(val.toUpperCase());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
47	[BUG]  [BUGGY]  current.entry.setValue(val,  val.toUpperCase());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.toUpperCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.toUpperCase());	  current.entry.setValue(val.toUpperCase());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
48	[BUG]  [BUGGY]  current.entry.setValue(val.toUpperCase()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toUpperCase()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toUpperCase()  +  1);	  current.entry.setValue(val.toUpperCase());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
49	[BUG]  [BUGGY]  current.entry.setValue(val.toUpperCase(),  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toUpperCase(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toUpperCase(),  val);	  current.entry.setValue(val.toUpperCase());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
50	[BUG]  [BUGGY]  current.entry.setCrc(val,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  SHORT_BUF);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  SHORT_BUF);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
51	[BUG]  [BUGGY]  current.entry.setCrc(val,  z);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  z);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
52	[BUG]  [BUGGY]  current.entry.setCrc(val,  crc);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  crc);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  crc);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
53	[BUG]  [BUGGY]  current.entry.setCrc(val,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  zipEncoding);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
54	[BUG]  [BUGGY]  current.entry.setCrc(val,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  0);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
55	[BUG]  [BUGGY]  current.entry.setCrc(val,  val.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  val.length);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  entryEncoding.setCrc(val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val,  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val,  val.getValue());	  entryEncoding.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getKey(),  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getKey(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getKey(),  val);	  entryEncoding.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  entryEncoding.setCrc(val,  val.getKey());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val,  val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val,  val.getKey());	  entryEncoding.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getKey(),  val.length());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getKey(),  val.length());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getKey(),  val.length());	  entryEncoding.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.length  -  1);	  entryEncoding.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
61	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.length  +  1);	  entryEncoding.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  entryEncoding.setCrc(val,  val.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val,  val.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val,  val.getValue(),  val.length);	  entryEncoding.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
63	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length,  val.length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.length,  val.length);	  entryEncoding.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length  +  1,  val.length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length  +  1,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.length  +  1,  val.length);	  entryEncoding.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.length  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.length  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.length  -  1);	  current.entry.setCrc(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
66	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.length,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.length,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.length,  val.length);	  current.entry.setCrc(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
67	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.length  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.length  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.length  +  1);	  current.entry.setCrc(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
68	[BUG]  [BUGGY]  entry.setCrc(val.getKey(),  val.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getKey(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getKey(),  val.length);	  current.entry.setCrc(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getKey(),  val.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getKey(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getKey(),  val.length);	  current.entry.setCrc(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
70	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  val.getValue());	  current.entry.setZipEncoding(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
71	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  val.getValue()  +  1);	  current.entry.setZipEncoding(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
72	[BUG]  [BUGGY]  entry.setCrc(val.getEntry(),  val);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getEntry(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getEntry(),  val);	  current.entry.setCrc(val.getEntry(),    val);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
73	[BUG]  [BUGGY]  currentEntry.setCrc(val.getEntry(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getEntry(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getEntry(),  val);	  current.entry.setCrc(val.getEntry(),    val);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
74	[BUG]  [BUGGY]  current.entry.setCrc(val.getName(),  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getName(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getName(),  val);	  current.entry.setCrc(val.getEntry(),    val);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  crc);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  crc);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  crc);	  current.entry.setCrc(val.getEntry(),    val);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getIntValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getIntValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getIntValue());	  current.entry.setZipEncoding(val.getShortValue());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
77	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getShortValue()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getShortValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getShortValue()  +  1);	  current.entry.setZipEncoding(val.getShortValue());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
78	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val.getShortValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val.getShortValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val.getShortValue());	  current.entry.setZipEncoding(val.getShortValue());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
79	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getShortValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getShortValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getShortValue(),  val.length);	  current.entry.setZipEncoding(val.getShortValue());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
80	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getShortValue(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getShortValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getShortValue(),  val);	  current.entry.setZipEncoding(val.getShortValue());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
81	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.getValue()  +  1);	  current.entry.setValue(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
82	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.getValue());	  current.entry.setValue(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
83	[BUG]  [BUGGY]  current.entry.setValue(val.getValue()  /  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue()  /  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue()  /  1);	  current.entry.setValue(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
84	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.length  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.length  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.length  +  1);	  current.entry.setValue(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
85	[BUG]  [BUGGY]  new  ZipLong(val.length());  val.longValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.length());  val.longValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.length());  val.longValue();	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
86	[BUG]  [BUGGY]  readFully(val.longValue());  val.longValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(val.longValue());  val.longValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(val.longValue());  val.longValue();	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
87	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG);	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
88	[BUG]  [BUGGY]  new  ZipLong(val.length());  val.length();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.length());  val.length();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.length());  val.length();	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
89	[BUG]  [BUGGY]  val  =  new  ZipLong(val.longValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val  =  new  ZipLong(val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val  =  new  ZipLong(val.longValue());	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
90	[BUG]  [BUGGY]  current.entry.setCrc(zip.getValue(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(zip.getValue(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(zip.getValue(),  ZipLong.DD_SIG);	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
91	[BUG]  [BUGGY]  current.entry.setCrc(zipLong.getValue(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(zipLong.getValue(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(zipLong.getValue(),  ZipLong.DD_SIG);	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
92	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.DD_SIG.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(ZipLong.DD_SIG.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(ZipLong.DD_SIG.getValue(),  val);	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
93	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  ZipLong.DD_SIG,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  ZipLong.DD_SIG,  val);	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
94	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  ZipLong.DD_SIG);	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
95	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  ZipLong.DD_SIG);	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
96	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val.toString());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val.toString());	  current.entry.setZipEncoding(val.toString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
97	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.toUpperCase());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.toUpperCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.toUpperCase());	  current.entry.setZipEncoding(val.toString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
98	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.toString());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.toString());	  current.entry.setZipEncoding(val.toString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
99	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  val.toString());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  val.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  val.toString());	  current.entry.setZipEncoding(val.toString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
100	[BUG]  [BUGGY]  current.entry.setZipEncoding(encoding.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(encoding.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(encoding.toString());	  current.entry.setZipEncoding(val.toString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
101	[BUG]  [BUGGY]  entry.entry.setCrc(val.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setCrc(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setCrc(val.getKey());	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
102	[BUG]  [BUGGY]  entry.entry.setCrc(val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setCrc(val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setCrc(val.getValue()  +  1);	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
103	[BUG]  [BUGGY]  entry.entry.setCrc(val.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setCrc(val.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setCrc(val.getValue(),  val.length);	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
104	[BUG]  [BUGGY]  entry.entry.setCrc(val.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setCrc(val.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setCrc(val.getValue(),  val);	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
105	[BUG]  [BUGGY]  entry.entry.setCrc(val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setCrc(val,  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setCrc(val,  val.getValue());	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
106	[BUG]  [BUGGY]  entry.entry.setCrc(val.getValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setCrc(val.getValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setCrc(val.getValue(),  val.intValue());	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
107	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.getValue()  +  1);	  entryEncoding.setCrc(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
108	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.getValue());	  entryEncoding.setCrc(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
109	[BUG]  [BUGGY]  EntryEncoding.setCrc(val.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding.setCrc(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding.setCrc(val.getValue());	  entryEncoding.setCrc(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
110	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue()  /  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue()  /  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue()  /  1);	  entryEncoding.setCrc(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
111	[BUG]  [BUGGY]  entryEncoding.setValue(val.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val.getValue(),  val);	  current.entry.setZipEncoding(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
112	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  z);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  z);	  current.entry.setZipEncoding(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
113	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  encoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  encoding);	  current.entry.setZipEncoding(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
114	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getKey(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getKey(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getKey(),  val);	  current.entry.setZipEncoding(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
115	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val.getValue(),  val);	  current.entry.setZipEncoding(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
116	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  0);	  current.entry.setZipEncoding(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
117	[BUG]  [BUGGY]  entry.setValue(val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getValue()  +  1);	  entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
118	[BUG]  [BUGGY]  entry.setValue(val.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getValue(),  val.length);	  entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
119	[BUG]  [BUGGY]  entry.setValue(val.getKey());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getKey());	  entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
120	[BUG]  [BUGGY]  entry.setValue(val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val,  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val,  val.getValue());	  entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
121	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.length  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.length  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.length  -  1);	  current.entry.setCrc(val.getValue(),    val.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
122	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length  -  1);	  current.entry.setCrc(val.getValue(),    val.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
123	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length);	  current.entry.setCrc(val.getValue(),    val.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
124	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  val.length  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  val.length  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  val.length  -  1);	  current.entry.setSize(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
125	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  val.length  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  val.length  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  val.length  +  1);	  current.entry.setSize(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
126	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.length  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.length  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.length  -  1);	  current.entry.setSize(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
127	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  val.length  -  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  val.length  -  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  val.length  -  2);	  current.entry.setSize(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
128	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.getKey());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.getKey());	  current.entry.setCrc(val.getValue(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
129	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.getShortValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.getShortValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.getShortValue());	  current.entry.setCrc(val.getValue(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
130	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.getCharacterEncoding());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.getCharacterEncoding());	  current.entry.setCrc(val.getValue(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
131	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.getValue());	  current.entry.setCrc(val.getValue(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
132	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  0,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  0,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  0,  val.length);	  current.entry.setCrc(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
133	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  1);	  current.entry.setCrc(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
134	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  0);	  current.entry.setCrc(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
135	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  2);	  current.entry.setCrc(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
136	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  0);	  current.entry.setCrc(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
137	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  4);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  4);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  4);	  current.entry.setCrc(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
138	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  0);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  0);	  current.entry.setCrc(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
139	[BUG]  [BUGGY]  entryEncoding.setCrc(val,  val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val,  val);	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
140	[BUG]  [BUGGY]  EntryEncoding  crc  =  entryEncoding.getCrc();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding  crc  =  entryEncoding.getCrc();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding  crc  =  entryEncoding.getCrc();	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
141	[BUG]  [BUGGY]  val.setCrc(entryEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.setCrc(entryEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.setCrc(entryEncoding);	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
142	[BUG]  [BUGGY]  entryEncoding.setCrc(val,  crc);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val,  crc);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val,  crc);	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
143	[BUG]  [BUGGY]  entryEncoding.setCrc(crc);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(crc);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(crc);	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
144	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding,  val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding,  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding,  val.getValue());	  current.entry.setZipEncoding(zipEncoding.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
145	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.getValue(),  val);	  current.entry.setZipEncoding(zipEncoding.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
146	[BUG]  [BUGGY]  entryEncoding.setValue(zipEncoding.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(zipEncoding.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(zipEncoding.getValue());	  current.entry.setZipEncoding(zipEncoding.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
147	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.getValue()  +  1);	  current.entry.setZipEncoding(zipEncoding.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
148	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  4);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  4);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  -  4);	  current.entry.setCrc(val.getValue(),    val.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
149	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  3);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  3);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  -  3);	  current.entry.setCrc(val.getValue(),    val.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
150	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length  -  2);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length  -  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  -  1,  val.length  -  2);	  current.entry.setCrc(val.getValue(),    val.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
151	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.length  -  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.length  -  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.length  -  2);	  current.entry.setCrc(val.getValue(),    val.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
152	[BUG]  [BUGGY]  current.entry.setValue(val.toString(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toString(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toString(),  val.toByteArray());	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
153	[BUG]  [BUGGY]  currentEntry.setValue(val.toString());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setValue(val.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setValue(val.toString());	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
154	[BUG]  [BUGGY]  current.entry.setValue(val.toString(),  val.toLowerCase());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toString(),  val.toLowerCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toString(),  val.toLowerCase());	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
155	[BUG]  [BUGGY]  current.entry.setValue(val.toString(),  val.toUpperCase());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toString(),  val.toUpperCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toString(),  val.toUpperCase());	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
156	[BUG]  [BUGGY]  current.entry.setValue(val.substring(0,  val.length()  -  1));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.substring(0,  val.length()  -  1));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.substring(0,  val.length()  -  1));	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
157	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val.getEntry());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val.getEntry());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
158	[BUG]  [BUGGY]  entry.setZipEncoding(val.getEntry());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setZipEncoding(val.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setZipEncoding(val.getEntry());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
159	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getEntry(),  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getEntry(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getEntry(),  val);	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
160	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getRawEntry());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getRawEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getRawEntry());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
161	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getVersion());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getVersion());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getVersion());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
162	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  getInputStream();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  getInputStream();	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
163	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  if(val  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  getInputStream();  if(val  ==  null)  {  return;  }  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  getInputStream();  if(val  ==  null)  {  return;  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
164	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf!=  null)  {  return;  }  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	InputStream  inf  =  getInputStream();  if(inf!=  null)  {  return;  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
165	[BUG]  [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  return;  }  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	InputStream  inf  =  getInputStream();  if(inf  ==  null)  {  return;  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
166	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  crc.setCrc(val.getValue());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  crc.setCrc(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  crc.setCrc(val.getValue());	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
167	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  val.setCrc(current.entry.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  val.setCrc(current.entry.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  val.setCrc(current.entry.getValue());	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
168	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getKey());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getKey());	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
169	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  currentEntry.setCrc(val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  currentEntry.setCrc(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  currentEntry.setCrc(val.getValue());	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
170	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue()  +  1);	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
171	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.length());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.length());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.length());	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
172	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.length);	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
173	[BUG]  [BUGGY]  currentEntry.setCrc(val,  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val,  val);	  currentEntry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
174	[BUG]  [BUGGY]  currentEntry.setCrc(val,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val,  false);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val,  false);	  currentEntry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
175	[BUG]  [BUGGY]  currentEntry.setCrc(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(zipEncoding);	  currentEntry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
176	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getBytes(),  val.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getBytes(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getBytes(),  val.length);	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
177	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val.getBytes());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val.getBytes());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val.getBytes());	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
178	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getBytes(),  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getBytes(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getBytes(),  val);	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
179	[BUG]  [BUGGY]  entryEncoding.setBytes(val.getBytes());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setBytes(val.getBytes());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setBytes(val.getBytes());	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
180	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  val.getBytes());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  val.getBytes());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  val.getBytes());	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
181	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getBytes()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getBytes()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getBytes()  +  1);	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
182	[BUG]  [BUGGY]  Inflater  inf  =  val.getInstance();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  val.getInstance();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  val.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
183	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.getInstance(val);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  ZipLong.getInstance(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  ZipLong.getInstance(val);	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
184	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipLong(ZipLong.getInstance());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  new  ZipLong(ZipLong.getInstance());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  new  ZipLong(ZipLong.getInstance());	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
185	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.parseZipLong(val);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  ZipLong.parseZipLong(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  ZipLong.parseZipLong(val);	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
186	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.getInstanceUTF8();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  ZipLong.getInstanceUTF8();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  ZipLong.getInstanceUTF8();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
187	[BUG]  [BUGGY]  Inflater  inf  =  zipLong.getInstance();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  zipLong.getInstance();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  zipLong.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
188	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val,  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val,  val.getValue());	  current.entry.setZipEncoding(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
189	[BUG]  [BUGGY]  current.entry.setZipEncoding(encoding,  val.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(encoding,  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(encoding,  val.getValue());	  current.entry.setZipEncoding(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
190	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  zipEncoding.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  zipEncoding.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  zipEncoding.getValue());	  current.entry.setZipEncoding(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
191	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  val.getValue()  +  1);	  current.entry.setZipEncoding(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
192	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  encoding.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  encoding.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  encoding.getValue());	  current.entry.setZipEncoding(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
193	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  z);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  z);	  entryEncoding.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
194	[BUG]  [BUGGY]  entryEncoding.setCrc(entry.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(entry.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(entry.getValue(),  val);	  entryEncoding.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
195	[BUG]  [BUGGY]  entryEncoding.setCrc(zipEncoding.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(zipEncoding.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(zipEncoding.getValue(),  val);	  entryEncoding.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
196	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.length());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.length());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.length());	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
197	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.longValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.longValue());	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
198	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.byteValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.byteValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.byteValue());	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
199	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.doubleValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.doubleValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.doubleValue());	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
200	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.intValue()  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.intValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.intValue()  +  1);	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
201	[BUG]  [BUGGY]  entry.setValue(val.getKey(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getKey(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getKey(),  val.intValue());	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
202	[BUG]  [BUGGY]  new  ZipLong(val.longValue(),  val.longValue()  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue(),  val.longValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue(),  val.longValue()  +  1);	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
203	[BUG]  [BUGGY]  new  ZipLong(val.doubleValue(),  val.doubleValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.doubleValue(),  val.doubleValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.doubleValue(),  val.doubleValue());	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
204	[BUG]  [BUGGY]  new  ZipLong(val.intValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.intValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.intValue(),  val.intValue());	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
205	[BUG]  [BUGGY]  new  ZipLong(val.length(),  val.longValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.length(),  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.length(),  val.longValue());	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
206	[BUG]  [BUGGY]  val  =  new  ZipLong(val.longValue(),  val.longValue());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val  =  new  ZipLong(val.longValue(),  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val  =  new  ZipLong(val.longValue(),  val.longValue());	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
207	[BUG]  [BUGGY]  new  ZipLong(val.longValue(),  val.longValue(),  0);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue(),  val.longValue(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue(),  val.longValue(),  0);	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
208	[BUG]  [BUGGY]  current.entry.setSize(val.getLongValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getLongValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getLongValue());	  current.entry.setSize(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
209	[BUG]  [BUGGY]  current.entry.setSize(val.getKey(),  val.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getKey(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getKey(),  val.length);	  current.entry.setSize(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
210	[BUG]  [BUGGY]  current.entry.setSize(val.getLength());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getLength());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getLength());	  current.entry.setSize(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
211	[BUG]  [BUGGY]  current.entry.setSize(val.getSize());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getSize());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getSize());	  current.entry.setSize(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
212	[BUG]  [BUGGY]  readFully(val,  val.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(val,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(val,  val.length);	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
213	[BUG]  [BUGGY]  readFully(val,  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(val,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(val,  val);	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
214	[BUG]  [BUGGY]  readFully(val,  val.intValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(val,  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(val,  val.intValue());	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
215	[BUG]  [BUGGY]  readFully(val,  val.longValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(val,  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(val,  val.longValue());	  readFully(val);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
216	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  val.getValue()  +  1);	  current.entry.setSize(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
217	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  val.getValue());	  current.entry.setSize(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
218	[BUG]  [BUGGY]  current.entry.setSize(val.getValue()  /  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue()  /  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue()  /  1);	  current.entry.setSize(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
219	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.length  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.length  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.length  +  1);	  entry.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
220	[BUG]  [BUGGY]  Entry  entry  =  crc.getEntry(val.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Entry  entry  =  crc.getEntry(val.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Entry  entry  =  crc.getEntry(val.getValue(),  val.length);	  entry.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
221	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.length,  val.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.length,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.length,  val.length);	  entry.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
222	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.length  +  1,  val.length);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.length  +  1,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.length  +  1,  val.length);	  entry.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
223	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.toByteArray());	  current.entry.setCrc(val.getValue(),    val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
224	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.toByteArray());	  current.entry.setCrc(val.getValue(),    val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
225	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.toByteArray());	  current.entry.setCrc(val.getValue(),    val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
226	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.toByteArray(),  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.toByteArray(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.toByteArray(),  0);	  current.entry.setCrc(val.getValue(),    val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
227	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.toByteArray()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.toByteArray()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.toByteArray()  +  1);	  current.entry.setCrc(val.getValue(),    val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
228	[BUG]  [BUGGY]  Entry  entry  =  crc.getEntry();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Entry  entry  =  crc.getEntry();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Entry  entry  =  crc.getEntry();	  entry.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
229	[BUG]  [BUGGY]  entry.setCrc(val.getEntry(),  val.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getEntry(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getEntry(),  val.getValue());	  entry.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
230	[BUG]  [BUGGY]  entry.setCrc(val.getEntry(),  val.getEnd());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getEntry(),  val.getEnd());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getEntry(),  val.getEnd());	  entry.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
231	[BUG]  [BUGGY]  entry.setCrc(val.getKey(),  val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getKey(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getKey(),  val);	  current.entry.setCrc(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
232	[BUG]  [BUGGY]  currentEntry.setCrc(val.getKey(),  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getKey(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getKey(),  val);	  current.entry.setCrc(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
233	[BUG]  [BUGGY]  Entry  entry  =  crc.getEntry(val.getKey(),  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Entry  entry  =  crc.getEntry(val.getKey(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Entry  entry  =  crc.getEntry(val.getKey(),  val);	  current.entry.setCrc(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
234	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.length  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.length  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  val.length  -  1);	  current.entry.setZipEncoding(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
235	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val.getValue(),  val.length);	  current.entry.setZipEncoding(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
236	[BUG]  [BUGGY]  entryEncoding.setValue(val.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val.getValue(),  val.length);	  current.entry.setZipEncoding(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
237	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.length  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.length  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  val.length  +  1);	  current.entry.setZipEncoding(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
238	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getKey(),  val.length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getKey(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getKey(),  val.length);	  current.entry.setZipEncoding(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
239	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.length  -  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.length  -  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  val.length  -  2);	  current.entry.setZipEncoding(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
240	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  z);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  z);	  entry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
241	[BUG]  [BUGGY]  Entry  entry  =  crc.getEntry(val.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Entry  entry  =  crc.getEntry(val.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Entry  entry  =  crc.getEntry(val.getValue(),  val);	  entry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
242	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  encoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  encoding);	  entry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
243	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.getValue()  +  1);	  current.entry.setCrc(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
244	[BUG]  [BUGGY]  entry.setCrc(val.getKey(),  val.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getKey(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getKey(),  val.getValue());	  current.entry.setCrc(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
245	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.getShortValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.getShortValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.getShortValue());	  current.entry.setCrc(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
246	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getKey(),  val.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getKey(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getKey(),  val.getValue());	  current.entry.setCrc(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
247	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.getValue(),  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.getValue(),  SHORT_BUF);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.getValue(),  SHORT_BUF);	  current.entry.setCrc(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
248	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('n',  val.length);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('n',  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('n',  val.length);	  val.append(ZipLong.DD_SIG).append('n');    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
249	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('N');  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('N');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('N');	  val.append(ZipLong.DD_SIG).append('n');    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
250	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('n',  val.longValue());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('n',  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('n',  val.longValue());	  val.append(ZipLong.DD_SIG).append('n');    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
251	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('0');  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('0');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('0');	  val.append(ZipLong.DD_SIG).append('n');    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
252	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getValue()  +  1);	  current.entry.setCrc(val.getEntry(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
253	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getKey());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getKey());	  current.entry.setCrc(val.getEntry(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
254	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getShortValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getShortValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getShortValue());	  current.entry.setCrc(val.getEntry(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
255	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getLongValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getLongValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getLongValue());	  current.entry.setCrc(val.getEntry(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
256	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getValue(),  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getValue(),  SHORT_BUF);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getValue(),  SHORT_BUF);	  current.entry.setCrc(val.getEntry(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
257	[BUG]  [BUGGY]  current.entry.setCrc(val.getName(),  val.getValue());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getName(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getName(),  val.getValue());	  current.entry.setCrc(val.getEntry(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
258	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getEntry(),  val);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getEntry(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getEntry(),  val);	  entryEncoding.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
259	[BUG]  [BUGGY]  entryEncoding.setCrc(val,  val.getEntry());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val,  val.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val,  val.getEntry());	  entryEncoding.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
260	[BUG]  [BUGGY]  entryEncoding.setCrc(crc.getEntry());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(crc.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(crc.getEntry());	  entryEncoding.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
261	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getStart());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getStart());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getStart());	  current.entry.setValue(val.getKey(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
262	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getLength());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getLength());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getLength());	  current.entry.setValue(val.getKey(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
263	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getEnd()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getEnd()  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getEnd()  -  1);	  current.entry.setValue(val.getKey(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
264	[BUG]  [BUGGY]  entry.setValue(val.getKey(),  val.getEnd());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getKey(),  val.getEnd());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getKey(),  val.getEnd());	  current.entry.setValue(val.getKey(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
265	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getEnd()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getEnd()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getEnd()  +  1);	  current.entry.setValue(val.getKey(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
266	[BUG]  [BUGGY]  entry.setCrc(val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue()  +  1);	  entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
267	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.intValue());	  entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
268	[BUG]  [BUGGY]  entry.setCrc(val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val,  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val,  val.getValue());	  entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
269	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getSize()  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getSize()  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getSize()  -  1);	  current.entry.setValue(val.getKey(),    val.getSize());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
270	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getSize()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getSize()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getSize()  +  1);	  current.entry.setValue(val.getKey(),    val.getSize());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
271	[BUG]  [BUGGY]  entry.setValue(val.getKey(),  val.getSize());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getKey(),  val.getSize());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getKey(),  val.getSize());	  current.entry.setValue(val.getKey(),    val.getSize());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
272	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getMask());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getMask());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getMask());	  current.entry.setValue(val.getKey(),    val.getSize());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
273	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getOffset());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getOffset());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getOffset());	  current.entry.setValue(val.getKey(),    val.getSize());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
274	[BUG]  [BUGGY]  current.entry.setCrc(new  ZipLong(val),  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(new  ZipLong(val),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(new  ZipLong(val),  val);	  current.entry.setCrc(new    ZipLong(val));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
275	[BUG]  [BUGGY]  entryEncoding.setCrc(new  ZipLong(val));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(new  ZipLong(val));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(new  ZipLong(val));	  current.entry.setCrc(new    ZipLong(val));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
276	[BUG]  [BUGGY]  current.entry.setCrc(ZipLong.valueOf(val));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(ZipLong.valueOf(val));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(ZipLong.valueOf(val));	  current.entry.setCrc(new    ZipLong(val));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
277	[BUG]  [BUGGY]  current.entry.setCrc(new  ZipLong(val,  val));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(new  ZipLong(val,  val));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(new  ZipLong(val,  val));	  current.entry.setCrc(new    ZipLong(val));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
278	[BUG]  [BUGGY]  current.entry.setCrc(new  ZipLong(val,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(new  ZipLong(val,  0));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(new  ZipLong(val,  0));	  current.entry.setCrc(new    ZipLong(val));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
279	[BUG]  [BUGGY]  current.entry.setZipEncoding(val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val);	  current.entry.setZipEncoding(crc);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
280	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(val);	  current.entry.setZipEncoding(crc);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
281	[BUG]  [BUGGY]  entryEncoding.setZipEncoding(crc);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setZipEncoding(crc);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setZipEncoding(crc);	  current.entry.setZipEncoding(crc);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
282	[BUG]  [BUGGY]  val.setZipEncoding(crc);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.setZipEncoding(crc);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.setZipEncoding(crc);	  current.entry.setZipEncoding(crc);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
283	[BUG]  [BUGGY]  current.entry.setCrcEncoding(val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrcEncoding(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrcEncoding(val);	  current.entry.setZipEncoding(crc);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
284	[BUG]  [BUGGY]  new  ZipLong(val.length());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.length());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.length());	  new    ZipLong(val.longValue());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
285	[BUG]  [BUGGY]  new  ZipLong(val.longValue(),  0);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue(),  0);	  new    ZipLong(val.longValue());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
286	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG.longValue());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(ZipLong.DD_SIG.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(ZipLong.DD_SIG.longValue());	  new    ZipLong(val.longValue());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
287	[BUG]  [BUGGY]  new  ZipLong(val.longValue()  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue()  +  1);	  new    ZipLong(val.longValue());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
288	[BUG]  [BUGGY]  new  ZipLong(val.doubleValue());  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.doubleValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.doubleValue());	  new    ZipLong(val.longValue());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
289	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue()  *  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue()  *  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue()  *  1);	  current.entry.setCrc(val.getValue()    /    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
290	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue()  /  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue()  /  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue()  /  2);	  current.entry.setCrc(val.getValue()    /    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
291	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue()  /  4);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue()  /  4);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue()  /  4);	  current.entry.setCrc(val.getValue()    /    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
292	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue()  /  3);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue()  /  3);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue()  /  3);	  current.entry.setCrc(val.getValue()    /    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
293	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.remainder);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.remainder);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.remainder);	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
294	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.remainder);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.remainder);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.remainder);	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
295	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.toString());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.toString());	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
296	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.in);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.in);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.in);	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
297	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.getValue()  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.getValue()  *  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.getValue()  *  1);	  current.entry.setCrc(val.getValue(),    val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
298	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.getValue()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.getValue()  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.getValue()  -  1);	  current.entry.setCrc(val.getValue(),    val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
299	[BUG]  [BUGGY]  current.entry.setCrc(z.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(z.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(z.getValue(),  val);	  current.entry.setCrc(val.getValue(),    z);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
300	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  z);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  z);	  current.entry.setCrc(val.getValue(),    z);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
301	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.intValue());	  current.entry.setCrc(val.getValue(),    z);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
302	[BUG]  [BUGGY]  current.entry.setValue(val,  val.getKey());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.getKey());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
303	[BUG]  [BUGGY]  current.entry.setValue(val,  val.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.toString());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
304	[BUG]  [BUGGY]  current.entry.setValue(val,  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.getValue()  +  1);	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
305	[BUG]  [BUGGY]  current.entry.setValue(val,  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.toByteArray());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
306	[BUG]  [BUGGY]  current.entry.setValue(val,  val.cloneTree());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.cloneTree());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.cloneTree());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
307	[BUG]  [BUGGY]  current.entry.setValue(val,  val.next());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.next());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.next());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
308	[BUG]  [BUGGY]  entry.setCrc(val.getShortValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getShortValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getShortValue());	  entry.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
309	[BUG]  [BUGGY]  Entry  entry  =  crc.getEntry(val.getKey());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Entry  entry  =  crc.getEntry(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Entry  entry  =  crc.getEntry(val.getKey());	  entry.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
310	[BUG]  [BUGGY]  entry.setCrc(val,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val,  val);	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
311	[BUG]  [BUGGY]  entry.setCrc(val,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val,  false);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val,  false);	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
312	[BUG]  [BUGGY]  entry.setCrc(val,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val,  true);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val,  true);	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
313	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.length  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.length  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.length  -  1);	  current.entry.setValue(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
314	[BUG]  [BUGGY]  entry.setValue(val.getKey(),  val.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getKey(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getKey(),  val.length);	  current.entry.setValue(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
315	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.length,  val.length);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.length,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.length,  val.length);	  current.entry.setValue(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
316	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.length  -  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.length  -  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.length  -  2);	  current.entry.setValue(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
317	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.length  +  1,  val.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.length  +  1,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.length  +  1,  val.length);	  current.entry.setValue(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
318	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  +  1,  val.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  +  1,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  +  1,  val.length);	  current.entry.setCrc(val.getValue(),    val.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
319	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  +  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  +  2);	  current.entry.setCrc(val.getValue(),    val.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
320	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  +  3);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  +  3);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  +  3);	  current.entry.setCrc(val.getValue(),    val.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
321	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  1);	  current.entry.setSize(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
322	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  0,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  0,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  0,  val.length);	  current.entry.setSize(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
323	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  2);	  current.entry.setSize(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
324	[BUG]  [BUGGY]  current.entry.setSize(val.getValue(),  4);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue(),  4);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue(),  4);	  current.entry.setSize(val.getValue(),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
325	[BUG]  [BUGGY]  currentEntry.setValue(val.getKey(),  val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setValue(val.getKey(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setValue(val.getKey(),  val);	  current.entry.setValue(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
326	[BUG]  [BUGGY]  entry.setValue(val.getKey(),  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getKey(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getKey(),  val);	  current.entry.setValue(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
327	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val  +  1);	  current.entry.setValue(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
328	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.intValue());	  entryEncoding.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
329	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length());	  current.entry.setCrc(val.getValue(),    val.trim());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
330	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.trim());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.trim());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.trim());	  current.entry.setCrc(val.getValue(),    val.trim());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
331	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.trim());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.trim());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.trim());	  current.entry.setCrc(val.getValue(),    val.trim());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
332	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.trim());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.trim());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.trim());	  current.entry.setCrc(val.getValue(),    val.trim());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
333	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.substring(1));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.substring(1));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.substring(1));	  current.entry.setCrc(val.getValue(),    val.trim());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
334	[BUG]  [BUGGY]  entryEncoding.setValue(val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val,  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val,  val.getValue());	  entryEncoding.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
335	[BUG]  [BUGGY]  entryEncoding.setValue(val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val.getValue()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val.getValue()  +  1);	  entryEncoding.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
336	[BUG]  [BUGGY]  entryEncoding.setValue(val.getKey());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val.getKey());	  entryEncoding.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
337	[BUG]  [BUGGY]  entryEncoding.setValue(val.getValue(),  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val.getValue(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val.getValue(),  0);	  entryEncoding.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
338	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.length  -  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.length  -  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.length  -  2);	  current.entry.setValue(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
339	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.length  -  1,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.length  -  1,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.length  -  1,  val.length);	  current.entry.setValue(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
340	[BUG]  [BUGGY]  current.entry.setValue(val.toByteArray(),  val.length);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toByteArray(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toByteArray(),  val.length);	  current.entry.setValue(val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
341	[BUG]  [BUGGY]  current.entry.setValue(val.toByteArray(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toByteArray(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toByteArray(),  val.toByteArray());	  current.entry.setValue(val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
342	[BUG]  [BUGGY]  entry.setValue(val.toByteArray());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.toByteArray());	  current.entry.setValue(val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
343	[BUG]  [BUGGY]  current.entry.setValue(val.toByteArray()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toByteArray()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toByteArray()  +  1);	  current.entry.setValue(val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
344	[BUG]  [BUGGY]  currentEntry.setValue(val.toByteArray());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setValue(val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setValue(val.toByteArray());	  current.entry.setValue(val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
345	[BUG]  [BUGGY]  val.append('N');  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append('N');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append('N');	  val.append('n');    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
346	[BUG]  [BUGGY]  val.append('[');  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append('[');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append('[');	  val.append('n');    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
347	[BUG]  [BUGGY]  val.append('$');  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append('$');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append('$');	  val.append('n');    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
348	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding,  val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding,  val);	  current.entry.setZipEncoding(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
349	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  zipEncoding);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  zipEncoding);	  current.entry.setZipEncoding(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
350	[BUG]  [BUGGY]  currentEntry.setZipEncoding(val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setZipEncoding(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setZipEncoding(val);	  current.entry.setZipEncoding(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
351	[BUG]  [BUGGY]  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
352	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
353	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val  =  new  ZipLong(SHORT_BUF);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val  =  new  ZipLong(SHORT_BUF);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
354	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DS_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DS_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DS_SIG);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
355	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG,  val);	  val.append(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
356	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG  +  1);	  val.append(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
357	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG,  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG,  val.length);	  val.append(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
358	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG));	  val.append(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
359	[BUG]  [BUGGY]  current.entry.setCrc(val,  val.clone());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  val.clone());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  val.clone());	  current.entry.setCrc(val.clone());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
360	[BUG]  [BUGGY]  current.entry.setCrc(val.clone(),  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.clone(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.clone(),  val);	  current.entry.setCrc(val.clone());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
361	[BUG]  [BUGGY]  entryEncoding.setCrc(val.clone());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.clone());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.clone());	  current.entry.setCrc(val.clone());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
362	[BUG]  [BUGGY]  currentEntry.setCrc(val.clone());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.clone());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.clone());	  current.entry.setCrc(val.clone());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
363	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getStart());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getStart());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getStart());	  current.entry.setCrc(val.getEntry(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
364	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getLength());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getLength());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getLength());	  current.entry.setCrc(val.getEntry(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
365	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getEnd()  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getEnd()  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getEnd()  -  1);	  current.entry.setCrc(val.getEntry(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
366	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getCharacterEncoding());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getCharacterEncoding());	  current.entry.setCrc(val.getEntry(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
367	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getChars(0,  val.getEnd()));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getChars(0,  val.getEnd()));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getChars(0,  val.getEnd()));	  current.entry.setCrc(val.getEntry(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
368	[BUG]  [BUGGY]  current.entry.setSize(val.length);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.length);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
369	[BUG]  [BUGGY]  current.entry.setSize(val.longValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.longValue());	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
370	[BUG]  [BUGGY]  current.entry.setSize(val,  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val,  val);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
371	[BUG]  [BUGGY]  current.entry.setLength(val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setLength(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setLength(val);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
372	[BUG]  [BUGGY]  current.entry.setPosition(val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setPosition(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setPosition(val);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
373	[BUG]  [BUGGY]  current.entry.setCrc(val,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  true);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  true);	  current.entry.setCrc(val,    false);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
374	[BUG]  [BUGGY]  entryEncoding.setCrc(val,  false);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val,  false);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val,  false);	  current.entry.setCrc(val,    false);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
375	[BUG]  [BUGGY]  current.entry.setCrc(val,  false,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  false,  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  false,  0);	  current.entry.setCrc(val,    false);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
376	[BUG]  [BUGGY]  current.entry.setCrc(val,  false,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  false,  true);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  false,  true);	  current.entry.setCrc(val,    false);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
377	[BUG]  [BUGGY]  current.entry.setCrc(val,  false,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  false,  null);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  false,  null);	  current.entry.setCrc(val,    false);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
378	[BUG]  [BUGGY]  currentEntry.setCrc(val,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val,  true);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val,  true);	  current.entry.setCrc(val,    false);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
379	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  val.intValue());	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
380	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  z);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  z);	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
381	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  val.length);	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
382	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  0);	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
383	[BUG]  [BUGGY]  current.entry.setSize(val.getValue()  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getValue()  *  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getValue()  *  1);	  current.entry.setSize(val.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
384	[BUG]  [BUGGY]  current.entry.setValue(val.getEntry(),  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getEntry(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getEntry(),  val);	  current.entry.setValue(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
385	[BUG]  [BUGGY]  entry.setValue(val.getEntry());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getEntry());	  current.entry.setValue(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
386	[BUG]  [BUGGY]  current.entry.setValue(val.getUpperBound());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getUpperBound());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getUpperBound());	  current.entry.setValue(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
387	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val);	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
388	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  val.entrySet().setCrc(current.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  val.entrySet().setCrc(current.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  val.entrySet().setCrc(current.getValue());	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
389	[BUG]  [BUGGY]  readFully(ZipLong.DEFAULT_SIG);  val  =  new  ZipLong(DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  readFully(ZipLong.DEFAULT_SIG);  val  =  new  ZipLong(DEFAULT_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	readFully(ZipLong.DEFAULT_SIG);  val  =  new  ZipLong(DEFAULT_SIG);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
390	[BUG]  [BUGGY]  val  =  new  ZipLong(val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val  =  new  ZipLong(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val  =  new  ZipLong(val);	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
391	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.substring(0,  val.length));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.substring(0,  val.length));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.substring(0,  val.length));	  current.entry.setValue(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
392	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('/');  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('/');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('/');	  val.append(ZipLong.DD_SIG).append(val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
393	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('ufffd');  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('ufffd');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('ufffd');	  val.append(ZipLong.DD_SIG).append(val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
394	[BUG]  [BUGGY]  current.entry.addValue(val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.addValue(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.addValue(val);	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
395	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.toPlainString());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.toPlainString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.toPlainString());	  current.entry.setZipEncoding(val.toString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
396	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.bytesToByteArray());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.bytesToByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.bytesToByteArray());	  current.entry.setCrc(val.getValue(),    val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
397	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.getValue(),  val.length);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.getValue(),  val.length);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.getValue(),  val.length);	  current.entry.setZipEncoding(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
398	[BUG]  [BUGGY]  CurrentEntry.setCrc(zipEncoding.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry.setCrc(zipEncoding.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry.setCrc(zipEncoding.getValue(),  val);	  current.entry.setCrc(val.getValue(),    zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
399	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.longValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.longValue());	  current.entry.setCrc(val.getValue(),    val.trim());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
400	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getChars());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getChars());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getChars());	  current.entry.setValue(val.getKey(),    val.getSize());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
401	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getDelimiter());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getDelimiter());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getDelimiter());	  current.entry.setValue(val.getKey(),    val.getSize());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
402	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getUpperBound());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getUpperBound());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getUpperBound());	  current.entry.setValue(val.getKey(),    val.getSize());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
403	[BUG]  [BUGGY]  current.entry.setValue(val.toInt());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toInt());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toInt());	  current.entry.setValue(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
404	[BUG]  [BUGGY]  current.entry.setValue(val.getName());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getName());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getName());	  current.entry.setValue(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
405	[BUG]  [BUGGY]  current.entry.setValue(val.getEntry()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getEntry()  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getEntry()  +  1);	  current.entry.setValue(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
406	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  *  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  *  1);	  current.entry.setCrc(val.getValue(),    val.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
407	[BUG]  [BUGGY]  entry.setCrc(new  ZipLong(val));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(new  ZipLong(val));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(new  ZipLong(val));	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
408	[BUG]  [BUGGY]  entry.setCrc(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(zipEncoding);	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
409	[BUG]  [BUGGY]  entry.setCrc(null);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(null);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(null);	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
410	[BUG]  [BUGGY]  entry.setZipEncoding(crc);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setZipEncoding(crc);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setZipEncoding(crc);	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
411	[BUG]  [BUGGY]  entry.setCrc(val.clone());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.clone());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.clone());	  current.entry.setCrc(val.clone());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
412	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  z);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  z);	  current.entry.setCrc(val.getEntry(),    val);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
413	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  zipEncoding);	  current.entry.setCrc(val.getEntry(),    val);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
414	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  0);	  current.entry.setCrc(val.getEntry(),    val);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
415	[BUG]  [BUGGY]  current.entry.setZipEncoding(new  ZipLong(val));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(new  ZipLong(val));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(new  ZipLong(val));	  current.entry.setCrc(new    ZipLong(val));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
416	[BUG]  [BUGGY]  entryEncoding  =  crc.getZipEncoding();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding  =  crc.getZipEncoding();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding  =  crc.getZipEncoding();	  current.entry.setZipEncoding(crc);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
417	[BUG]  [BUGGY]  entryEncoding  =  crc.setZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding  =  crc.setZipEncoding(encoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding  =  crc.setZipEncoding(encoding);	  current.entry.setZipEncoding(crc);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
418	[BUG]  [BUGGY]  nextEntry.setCrc(val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  nextEntry.setCrc(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	nextEntry.setCrc(val);	  currentEntry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
419	[BUG]  [BUGGY]  val.setCrc(currentEntry);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.setCrc(currentEntry);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.setCrc(currentEntry);	  currentEntry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
420	[BUG]  [BUGGY]  val.append('n').append('n');  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append('n').append('n');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append('n').append('n');	  val.append('n');    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
421	[BUG]  [BUGGY]  entry.setCrc(zipEncoding.getEntry());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(zipEncoding.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(zipEncoding.getEntry());	  entry.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
422	[BUG]  [BUGGY]  entry.setCrc(val.getImplicitReturn());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getImplicitReturn());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getImplicitReturn());	  entry.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
423	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.encode(val));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.encode(val));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.encode(val));	  current.entry.setZipEncoding(zipEncoding.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
424	[BUG]  [BUGGY]  current.entry.setZipEncoding(encoding.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(encoding.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(encoding.getValue());	  current.entry.setZipEncoding(zipEncoding.getValue());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
425	[BUG]  [BUGGY]  current.entry.setValue(val,  ze.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  ze.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  ze.getValue());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
426	[BUG]  [BUGGY]  current.entry.setValue(val,  z.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  z.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  z.getValue());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
427	[BUG]  [BUGGY]  current.entry.setValue(val,  val.getEntry());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.getEntry());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
428	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.length  *  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.length  *  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.length  *  2);	  entry.setCrc(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
429	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setValue(val.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setValue(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setValue(val.getKey());	  current.entry.setValue(val.getKey()    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
430	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.getValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.getValue();	  current.entry.setValue(val.getKey()    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
431	[BUG]  [BUGGY]  val.write('n');  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.write('n');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.write('n');	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
432	[BUG]  [BUGGY]  val.setLength(256);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.setLength(256);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.setLength(256);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
433	[BUG]  [BUGGY]  val.setLength(0L);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.setLength(0L);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.setLength(0L);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
434	[BUG]  [BUGGY]  val  =  new  ZipLong(val.longValue());  val.longValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val  =  new  ZipLong(val.longValue());  val.longValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val  =  new  ZipLong(val.longValue());  val.longValue();	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
435	[BUG]  [BUGGY]  new  ZipLong(val.longValue()  +  1);  val.longValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue()  +  1);  val.longValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue()  +  1);  val.longValue();	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
436	[BUG]  [BUGGY]  new  ZipLong(val.doubleValue());  val.doubleValue();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.doubleValue());  val.doubleValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.doubleValue());  val.doubleValue();	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
437	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  *  2);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  *  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  *  2);	  current.entry.setCrc(val.getValue(),    val.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
438	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length  -  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.length  -  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.length  -  2);	  current.entry.setCrc(val.getValue(),    val.length    -    2);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
439	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.getLongValue());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.getLongValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.getLongValue());	  current.entry.setCrc(val.getValue(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
440	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.getChars());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.getChars());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.getChars());	  current.entry.setCrc(val.getValue(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
441	[BUG]  [BUGGY]  entry.setCrc(val.getLongValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getLongValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getLongValue());	  entry.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
442	[BUG]  [BUGGY]  current.entry.setCrc(val,  new  ZipLong(val));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  new  ZipLong(val));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  new  ZipLong(val));	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
443	[BUG]  [BUGGY]  current.entry.setCrc(val,  0L);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  0L);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  0L);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
444	[BUG]  [BUGGY]  current.entry.setCrc(val,  d);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  d);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  d);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
445	[BUG]  [BUGGY]  entry.setSize(val.getKey());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setSize(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setSize(val.getKey());	  current.entry.setSize(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
446	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  i);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  i);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  i);	  current.entry.setValue(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
447	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  d);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  d);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  d);	  current.entry.setValue(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
448	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  d);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  d);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  d);	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
449	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  x);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  x);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  x);	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
450	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  ZipLong.DD_SIG);	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
451	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val,  false);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val,  false);	  current.entry.setCrc(val,    false);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
452	[BUG]  [BUGGY]  new  ZipLong(val.intValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.intValue());	  new    ZipLong(val.longValue());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
453	[BUG]  [BUGGY]  new  ZipLong(val.longValue(),  0.5);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue(),  0.5);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue(),  0.5);	  new    ZipLong(val.longValue());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
454	[BUG]  [BUGGY]  entry.entry.setCrc(val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setCrc(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setCrc(val);	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
455	[BUG]  [BUGGY]  entry.entry.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setValue(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setValue(val.getValue());	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
456	[BUG]  [BUGGY]  entry.entry.setZipEncoding(val.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setZipEncoding(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setZipEncoding(val.getValue());	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
457	[BUG]  [BUGGY]  current.entry.setValue(val.substring(1));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.substring(1));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.substring(1));	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
458	[BUG]  [BUGGY]  current.entry.setValue(val.toPlainString());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toPlainString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toPlainString());	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
459	[BUG]  [BUGGY]  current.entry.setValue(val.toString(),  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toString(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toString(),  val);	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
460	[BUG]  [BUGGY]  current.entry.setValue(val.trim());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.trim());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.trim());	  current.entry.setValue(val.toString());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
461	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  this.zipEncoding.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  this.zipEncoding.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  this.zipEncoding.getValue());	  current.entry.setZipEncoding(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
462	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  val.substring(0,  val.length));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  val.substring(0,  val.length));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  val.substring(0,  val.length));	  current.entry.setCrc(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
463	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.trim());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.trim());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.trim());	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
464	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey()  /  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey()  /  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey()  /  1);	  current.entry.setCrc(val.getValue()    /    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
465	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue()  /  10);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue()  /  10);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue()  /  10);	  current.entry.setCrc(val.getValue()    /    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
466	[BUG]  [BUGGY]  Inflater  inf  =  currentEntry.getInstance();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  currentEntry.getInstance();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  currentEntry.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
467	[BUG]  [BUGGY]  Inflater  inf  =  ze.getInstance();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  ze.getInstance();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  ze.getInstance();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
468	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.getInstanceUTF();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  ZipLong.getInstanceUTF();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  ZipLong.getInstanceUTF();	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
469	[BUG]  [BUGGY]  current.entry.setValue(val.getValue()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue()  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue()  -  1);	  current.entry.setSize(val.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
470	[BUG]  [BUGGY]  current.entry.setValue(val.toByteArray(),  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toByteArray(),  0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toByteArray(),  0);	  current.entry.setValue(val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
471	[BUG]  [BUGGY]  current.entry.setValue(val.toByteArray(),  val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toByteArray(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toByteArray(),  val);	  current.entry.setValue(val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
472	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('[');  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('[');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('[');	  val.append(ZipLong.DD_SIG).append('n');    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
473	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('$');  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('$');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('$');	  val.append(ZipLong.DD_SIG).append('n');    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
474	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append('-');  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append('-');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append('-');	  val.append(ZipLong.DD_SIG).append('n');    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
475	[BUG]  [BUGGY]  current.entry.setZipEncoding(encoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(encoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(encoding);	  current.entry.setZipEncoding(zipEncoding);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
476	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.getBytes());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.getBytes());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.getBytes());	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
477	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getBytes( "UTF-8 "));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getBytes( "UTF-8 "));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getBytes( "UTF-8 "));	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
478	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.bytes);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.bytes);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.bytes);	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
479	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.buffer);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.buffer);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.buffer);	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
480	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.inputStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.inputStream);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.inputStream);	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
481	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getChars());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getChars());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getChars());	  current.entry.setCrc(val.getEntry(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
482	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getChronology());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getChronology());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getChronology());	  current.entry.setCrc(val.getEntry(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
483	[BUG]  [BUGGY]  entryEncoding.setCrc(entry.getEntry());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(entry.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(entry.getEntry());	  entryEncoding.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
484	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getInputStream());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getInputStream());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getInputStream());	  entryEncoding.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
485	[BUG]  [BUGGY]  val.append(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(zipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(zipLong.DD_SIG);	  val.append(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
486	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append( "n ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append( "n ");  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append( "n ");	  val.append(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
487	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG  +  File.separatorChar);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG  +  File.separatorChar);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG  +  File.separatorChar);	  val.append(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
488	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setSize(val.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setSize(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setSize(val.getValue());	  current.entry.setSize(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
489	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  ze);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  ze);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  ze);	  entryEncoding.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
490	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.getShortValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.getShortValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.getShortValue());	  current.entry.setZipEncoding(val.getShortValue());    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
491	[BUG]  [BUGGY]  entryEncoding.setValue(val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val);	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
492	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  crc.getEntryEncoding();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding  entryEncoding  =  crc.getEntryEncoding();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding  entryEncoding  =  crc.getEntryEncoding();	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
493	[BUG]  [BUGGY]  entry.setCrc(z.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(z.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(z.getValue(),  val);	  current.entry.setCrc(val.getValue(),    z);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
494	[BUG]  [BUGGY]  entry.setValue(z.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(z.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(z.getValue(),  val);	  current.entry.setCrc(val.getValue(),    z);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
495	[BUG]  [BUGGY]  entry.setCrc(zipEncoding.getValue(),  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(zipEncoding.getValue(),  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(zipEncoding.getValue(),  val);	  entry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
496	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  ze);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  ze);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  ze);	  entry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
497	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  ZERO);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  ZERO);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  ZERO);	  entry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
498	[BUG]  [BUGGY]  current.entry.setSize(val  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val  +  1);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
499	[BUG]  [BUGGY]  entry.setSize(val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setSize(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setSize(val);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
500	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.length  *  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.length  *  2);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.length  *  2);	  current.entry.setValue(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
501	[BUG]  [BUGGY]  current.entry.setCrc(val.getKey(),  zipEncoding);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getKey(),  zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getKey(),  zipEncoding);	  current.entry.setCrc(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
502	[BUG]  [BUGGY]  entryEncoding.setValue(val.toUpperCase());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val.toUpperCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val.toUpperCase());	  entryEncoding.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
503	[BUG]  [BUGGY]  entryEncoding.setValue(val.toString());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setValue(val.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setValue(val.toString());	  entryEncoding.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
504	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  *  2  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.length  *  2  +  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.length  *  2  +  1);	  current.entry.setCrc(val.getValue(),    val.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
505	[BUG]  [BUGGY]  entry.setValue(val.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.toString());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.toString());	  entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
506	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  new  ZipLong(ZipLong.DD_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  new  ZipLong(ZipLong.DD_SIG));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  new  ZipLong(ZipLong.DD_SIG));	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
507	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  ZipLong.DD_SIG);	  current.entry.setValue(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
508	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  z);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  z);	  current.entry.setValue(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
509	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setValue(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setValue(val.getValue());	  current.entry.setValue(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
510	[BUG]  [BUGGY]  CurrentEntry.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry.setValue(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry.setValue(val.getValue());	  current.entry.setValue(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
511	[BUG]  [BUGGY]  new  ZipLong(val.longValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue(),  val.intValue());	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
512	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.getEntry());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.getEntry());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
513	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getZipEncoding());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getZipEncoding());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getZipEncoding());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
514	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getZip());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getZip());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getZip());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
515	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getUpperBound());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getUpperBound());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getUpperBound());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
516	[BUG]  [BUGGY]  current.entry.setZipEncoding(zipEncoding.getKey());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(zipEncoding.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(zipEncoding.getKey());	  current.entry.setZipEncoding(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
517	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setZipEncoding(val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setZipEncoding(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setZipEncoding(val.getValue());	  current.entry.setZipEncoding(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
518	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.getEntry());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.getEntry());	  current.entry.setCrc(val.getValue(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
519	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getEntry(),  val.getEnd());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getEntry(),  val.getEnd());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getEntry(),  val.getEnd());	  current.entry.setCrc(val.getEntry(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
520	[BUG]  [BUGGY]  nextEntry.setValue(val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  nextEntry.setValue(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	nextEntry.setValue(val);	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
521	[BUG]  [BUGGY]  current.entry.writeValue(val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.writeValue(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.writeValue(val);	  current.entry.setValue(val);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
522	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append(':');  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append(':');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append(':');	  val.append(ZipLong.DD_SIG).append('n');    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
523	[BUG]  [BUGGY]  val.append(zipEncoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(zipEncoding);	  val.append(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
524	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
525	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
526	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }  else  {  return;  }  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	if(ZipLong.DD_SIG.equals(val))  {  readFully(val);  val  =  new  ZipLong(val);  }  else  {  return;  }	  readFully(val);    val    =    new    ZipLong(val);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
527	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getName());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  val.getName());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  val.getName());	  current.entry.setCrc(val.getEntry(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
528	[BUG]  [BUGGY]  val.append(ZipLong.DD_SIG).append(short);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(ZipLong.DD_SIG).append(short);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(ZipLong.DD_SIG).append(short);	  val.append(ZipLong.DD_SIG).append(val);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
529	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  zip);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  zip);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  zip);	  entryEncoding.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
530	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  encoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  encoding);	  entryEncoding.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
531	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.getEnd());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.getEnd());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  current.entry.setCrc(val.getValue(),  val.getEnd());	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
532	[BUG]  [BUGGY]  CurrentEntry  hasDataDescriptor  =  val.entrySet().setCrc(val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  hasDataDescriptor  =  val.entrySet().setCrc(val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  hasDataDescriptor  =  val.entrySet().setCrc(val.getValue());	  CurrentEntry    hasDataDescriptor    =    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
533	[BUG]  [BUGGY]  current.entry.setCrc(val.cloneTwin());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.cloneTwin());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.cloneTwin());	  current.entry.setCrc(val.clone());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
534	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getImplicitReturn());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getImplicitReturn());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getImplicitReturn());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
535	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getTarget());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getTarget());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getTarget());	  current.entry.setZipEncoding(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
536	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  crc.getEntry();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding  entryEncoding  =  crc.getEntry();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding  entryEncoding  =  crc.getEntry();	  current.entry.setZipEncoding(crc);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
537	[BUG]  [BUGGY]  current.entry.setValue(val.getKey()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey()  -  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey()  -  1);	  current.entry.setSize(val.getValue()    -    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
538	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  val.getEnd());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  val.getEnd());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  val.getEnd());	  entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
539	[BUG]  [BUGGY]  Inflater  inf  =  val.inflate(ZipLong.getInstance());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  val.inflate(ZipLong.getInstance());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  val.inflate(ZipLong.getInstance());	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
540	[BUG]  [BUGGY]  Inflater  inf  =  ZipLong.valueOf(val);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  ZipLong.valueOf(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  ZipLong.valueOf(val);	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
541	[BUG]  [BUGGY]  Inflater  inf  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  new  ZipLong(ZipLong.DD_SIG);	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
542	[BUG]  [BUGGY]  Inflater  inf  =  val.inflate(ZipLong.ZERO);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Inflater  inf  =  val.inflate(ZipLong.ZERO);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Inflater  inf  =  val.inflate(ZipLong.ZERO);	  Inflater    inf    =    ZipLong.getInstance();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
543	[BUG]  [BUGGY]  entry.entry.setCrc(val.getEntry());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.entry.setCrc(val.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.entry.setCrc(val.getEntry());	  entry.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
544	[BUG]  [BUGGY]  val.add(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.add(ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.add(ZipLong.DD_SIG);	  val.setLength(0);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
545	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.remainder);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.remainder);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.remainder);	  current.entry.setValue(val.getKey(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
546	[BUG]  [BUGGY]  entryEncoding.setCrc(val.read());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.read());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.read());	  entryEncoding.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
547	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.trim());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.trim());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.trim());	  current.entry.setValue(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
548	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.substring(0,  val.length));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.substring(0,  val.length));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.substring(0,  val.length));	  current.entry.setValue(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
549	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.remainder);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.remainder);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.remainder);	  current.entry.setValue(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
550	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  ZipLong.DD_SIG);	  entry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
551	[BUG]  [BUGGY]  entry.setCrc(val.getValue(),  d);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.getValue(),  d);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.getValue(),  d);	  entry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
552	[BUG]  [BUGGY]  current.entry.setValue(val,  val.cloneTwin());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.cloneTwin());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.cloneTwin());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
553	[BUG]  [BUGGY]  current.entry.setValue(val,  val.clone());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val,  val.clone());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val,  val.clone());	  current.entry.setValue(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
554	[BUG]  [BUGGY]  Entry  entry  =  val.getEntry();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  Entry  entry  =  val.getEntry();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	Entry  entry  =  val.getEntry();	  entryEncoding.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
555	[BUG]  [BUGGY]  current.entry.setCrc(zipEncoding.getValue(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(zipEncoding.getValue(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(zipEncoding.getValue(),  ZipLong.DD_SIG);	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
556	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  zipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  zipLong.DD_SIG);	  current.entry.setCrc(val.getValue(),    ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
557	[BUG]  [BUGGY]  current.entry.setCrc(val,  false,  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  false,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  false,  val);	  current.entry.setCrc(val,    false);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
558	[BUG]  [BUGGY]  entry.setValue(val.getValue(),  val.getEnd());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setValue(val.getValue(),  val.getEnd());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setValue(val.getValue(),  val.getEnd());	  entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
559	[BUG]  [BUGGY]  CurrentEntry  currentEntry  =  val.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  currentEntry  =  val.getValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  currentEntry  =  val.getValue();	  currentEntry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
560	[BUG]  [BUGGY]  currentEntry.setZipEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setZipEncoding(zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setZipEncoding(zipEncoding);	  currentEntry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
561	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue()  /  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue()  /  1);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue()  /  1);	  current.entry.setZipEncoding(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
562	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue()  /  2.0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue()  /  2.0);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue()  /  2.0);	  current.entry.setCrc(val.getValue()    /    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
563	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.toByteArray(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.toByteArray(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.toByteArray(),  val.toByteArray());	  current.entry.setCrc(val.getValue(),    val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
564	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.toUpperCase());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.toUpperCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.toUpperCase());	  current.entry.setCrc(val.getValue(),    val.toByteArray());    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
565	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getEntry());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getEntry());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getEntry());	  current.entry.setValue(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
566	[BUG]  [BUGGY]  current.entry.setValue(val.getName(),  val.getValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getName(),  val.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getName(),  val.getValue());	  current.entry.setValue(val.getKey(),    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
567	[BUG]  [BUGGY]  val.intValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.intValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.intValue();	  new    ZipLong(val.longValue());    val.longValue();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
568	[BUG]  [BUGGY]  current.entry.setCrc(new  ZipLong(val,  val.length));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(new  ZipLong(val,  val.length));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(new  ZipLong(val,  val.length));	  current.entry.setCrc(new    ZipLong(val));    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
569	[BUG]  [BUGGY]  current.entry.setValue(val.toLowerCase(),  val.toLowerCase());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.toLowerCase(),  val.toLowerCase());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.toLowerCase(),  val.toLowerCase());	  current.entry.setValue(val.toUpperCase());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
570	[BUG]  [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.remainder);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val.getValue(),  val.remainder);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val.getValue(),  val.remainder);	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
571	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.cloneTree());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.cloneTree());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.cloneTree());	  current.entry.setCrc(val.getValue(),    val.remainder);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
572	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.intValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.intValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.intValue(),  val.intValue());	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
573	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.shortValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.shortValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.shortValue());	  current.entry.setValue(val.getKey(),    val.intValue());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
574	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  ZipLong.DD_SIG);	  current.entry.setZipEncoding(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
575	[BUG]  [BUGGY]  current.entry.setPosition(0,  val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setPosition(0,  val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setPosition(0,  val);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
576	[BUG]  [BUGGY]  current.entry.setPath(val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setPath(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setPath(val);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
577	[BUG]  [BUGGY]  current.entry.setSize(val.longValue);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.longValue);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.longValue);	  current.entry.setSize(val);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
578	[BUG]  [BUGGY]  val.append(',');  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(',');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(',');	  val.append('n');    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
579	[BUG]  [BUGGY]  val.append(':');  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append(':');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append(':');	  val.append('n');    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
580	[BUG]  [BUGGY]  val.append('/');  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  val.append('/');  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	val.append('/');	  val.append('n');    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
581	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.toByteArray());	  current.entry.setValue(val.getKey(),    val);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
582	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  val.trim());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  val.trim());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  val.trim());	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
583	[BUG]  [BUGGY]  currentEntry.setCrc(val.getValue(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  currentEntry.setCrc(val.getValue(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	currentEntry.setCrc(val.getValue(),  val.toByteArray());	  currentEntry.setCrc(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
584	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  zipEncoding.encode(val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding  entryEncoding  =  zipEncoding.encode(val);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding  entryEncoding  =  zipEncoding.encode(val);	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
585	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  zipEncoding.getEntry();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding  entryEncoding  =  zipEncoding.getEntry();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding  entryEncoding  =  zipEncoding.getEntry();	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
586	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  getEntryEncoding();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding  entryEncoding  =  getEntryEncoding();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding  entryEncoding  =  getEntryEncoding();	  entryEncoding.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
587	[BUG]  [BUGGY]  if(val  ==  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  if(val  ==  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  return;  }  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	if(val  ==  null)  {  Inflater  inf  =  getInputStream();  if(inf!=  null)  {  return;  }	  Inflater    inf    =    getInputStream();    if(inf!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
588	[BUG]  [BUGGY]  current.entry.setSize(val.getTime());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setSize(val.getTime());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setSize(val.getTime());	  current.entry.setSize(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
589	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.trim());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getValue(),  val.trim());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getValue(),  val.trim());	  current.entry.setZipEncoding(val.getValue(),    val.length);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
590	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.toByteArray());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.toByteArray());	  current.entry.setZipEncoding(val.toString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
591	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.toUTF8());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.toUTF8());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.toUTF8());	  current.entry.setZipEncoding(val.toString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
592	[BUG]  [BUGGY]  new  ZipLong(val.longValue(),  val.longValue(),  val.longValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue(),  val.longValue(),  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue(),  val.longValue(),  val.longValue());	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
593	[BUG]  [BUGGY]  new  ZipLong(val.longValue(),  val.longValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue(),  val.longValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue(),  val.longValue(),  val.intValue());	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
594	[BUG]  [BUGGY]  new  ZipLong(val.longValue()  +  1,  val.longValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  new  ZipLong(val.longValue()  +  1,  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	new  ZipLong(val.longValue()  +  1,  val.longValue());	  new    ZipLong(val.longValue(),    val.longValue());    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
595	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.remaining());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.remaining());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.remaining());	  current.entry.setCrc(val.getValue(),    val.trim());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
596	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue(),  val.remainder());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getValue(),  val.remainder());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getValue(),  val.remainder());	  current.entry.setCrc(val.getValue(),    val.trim());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
597	[BUG]  [BUGGY]  entry.setCrc(zipLong);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(zipLong);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(zipLong);	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
598	[BUG]  [BUGGY]  entry.setZipEncoding(zipEncoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setZipEncoding(zipEncoding);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setZipEncoding(zipEncoding);	  entry.setCrc(val);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
599	[BUG]  [BUGGY]  if(val  ==  null)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  if(val  ==  null)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  return;  }  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	if(val  ==  null)  {  Inflater  inf  =  getInputStream();  if(inf  ==  null)  {  return;  }	  Inflater    inf    =    getInputStream();    if(inf    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
600	[BUG]  [BUGGY]  CurrentEntry  current.entry.setValue(val.getKey());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  current.entry.setValue(val.getKey());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  current.entry.setValue(val.getKey());	  current.entry.setValue(val.getKey()    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
601	[BUG]  [BUGGY]  CurrentEntry  current  =  val.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  CurrentEntry  current  =  val.getValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	CurrentEntry  current  =  val.getValue();	  current.entry.setValue(val.getKey()    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
602	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.toByteArray());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.toByteArray());	  current.entry.setValue(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
603	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.intValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.intValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.intValue());	  current.entry.setValue(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
604	[BUG]  [BUGGY]  current.entry.setValue(val.getValue(),  val.longValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getValue(),  val.longValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getValue(),  val.longValue());	  current.entry.setValue(val.getValue(),    val);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
605	[BUG]  [BUGGY]  current.entry.setCrc(zipEncoding.getValue(),  z);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(zipEncoding.getValue(),  z);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(zipEncoding.getValue(),  z);	  current.entry.setCrc(val.getValue(),    z);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
606	[BUG]  [BUGGY]  entry.setCrc(val.read());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.read());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.read());	  entry.setCrc(val.getKey());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
607	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  crc.getValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding  entryEncoding  =  crc.getValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding  entryEncoding  =  crc.getValue();	  entryEncoding.setCrc(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
608	[BUG]  [BUGGY]  EntryEncoding  entryEncoding  =  val.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  EntryEncoding  entryEncoding  =  val.getValue();  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	EntryEncoding  entryEncoding  =  val.getValue();	  entryEncoding.setCrc(val.getValue()    +    1);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
609	[BUG]  [BUGGY]  current.entry.setZipEncoding(val.getBytes(encoding));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val.getBytes(encoding));  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val.getBytes(encoding));	  current.entry.setZipEncoding(val.getBytes());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
610	[BUG]  [BUGGY]  current.entry.setValue(val.getKey(),  val.getEnd(),  val.getCharacterEncoding());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setValue(val.getKey(),  val.getEnd(),  val.getCharacterEncoding());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setValue(val.getKey(),  val.getEnd(),  val.getCharacterEncoding());	  current.entry.setValue(val.getKey(),    val.getEnd());    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
611	[BUG]  [BUGGY]  current.entry.setCrc(val.getEntry(),  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val.getEntry(),  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val.getEntry(),  ZipLong.DD_SIG);	  current.entry.setCrc(val.getEntry(),    val);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
612	[BUG]  [BUGGY]  entry.setCrc(val.cloneTree());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entry.setCrc(val.cloneTree());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entry.setCrc(val.cloneTree());	  entry.setCrc(val.getEntry());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
613	[BUG]  [BUGGY]  current.entry.setCrc(val,  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setCrc(val,  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setCrc(val,  ZipLong.DD_SIG);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
614	[BUG]  [BUGGY]  entryEncoding.setCrc(val,  current);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  entryEncoding.setCrc(val,  current);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	entryEncoding.setCrc(val,  current);	  current.entry.setCrc(val,    val);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
615	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  ZipLong.DD_SIG);  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  ZipLong.DD_SIG);	  current.entry.setZipEncoding(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
616	[BUG]  [BUGGY]  current.entry.setZipEncoding(val,  ZipLong.DD_SIG.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }      [BUGGY]  current.entry.setZipEncoding(val,  ZipLong.DD_SIG.getValue());  [BUGGY]                [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	736	736	2	replace	current.entry.setZipEncoding(val,  ZipLong.DD_SIG.getValue());	  current.entry.setZipEncoding(val,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
