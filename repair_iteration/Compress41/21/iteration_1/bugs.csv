bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  inf.close();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  inf.close();  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	inf.close();	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
2	[BUG]  [BUGGY]  if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  }  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  }	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
3	[BUG]  [BUGGY]  if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  throw  new  IllegalStateException( " ");  }	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
4	[BUG]  [BUGGY]  if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	if(in.close())  {  try  {  in.close();  }  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
5	[BUG]  [BUGGY]  if(in.close())  {  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  if(in.close())  {  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	if(in.close())  {  try  {  in.close();  }  catch(IOException  e)  {  }	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]    [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	  	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]  Inflater  inf  =  getInputStream();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  Inflater  inf  =  getInputStream();  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	Inflater  inf  =  getInputStream();	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
8	[BUG]  [BUGGY]  Inflater  inf.close();  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  Inflater  inf.close();  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	Inflater  inf.close();	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
9	[BUG]  [BUGGY]  ze.close();  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  ze.close();  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	ze.close();	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
10	[BUG]  [BUGGY]  Inflater  inf  =  openInputStream();  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  Inflater  inf  =  openInputStream();  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	Inflater  inf  =  openInputStream();	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
11	[BUG]  [BUGGY]  Inflater  inf  =  this.inputStream.close();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  Inflater  inf  =  this.inputStream.close();  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	Inflater  inf  =  this.inputStream.close();	in.close();  	non-compiled	[CE]  illegal  start  of  type	41	None	replace
12	[BUG]  [BUGGY]  Inflater  inf  =  createInflater(inf);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  Inflater  inf  =  createInflater(inf);  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	Inflater  inf  =  createInflater(inf);	in.close();  	non-compiled	[CE]  <identifier>  expected	41	None	replace
13	[BUG]  [BUGGY]  Inflater  inf  =  createInflater();  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  public  void  close()  throws  IOException  {  if  (!closed)  {  closed  =  true;  try  {  [BUGGY]  Inflater  inf  =  createInflater();  [BUGGY]  }  finally  {  inf.end();  }  }  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  l  length  off  offset  read  toRead  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  buffer  extraData  fileName  lfh  missedLfhBytes  CurrentEntry  current  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.3651483716701107	524	524	2	replace	Inflater  inf  =  createInflater();	in.close();  	non-compiled	[CE]  <identifier>  expected	41	None	replace
