projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnthis;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>>null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(ZipLong.LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>>null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NULL:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.longValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.intValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.doubleValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.shortValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NULL:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,msg);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,pf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getLocalName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getClass());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLowerCase();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLong();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+cSize.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){skipRemainderOfArchive();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig[Delete]null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+WORD;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getPosition());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.FIRST_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.substring(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.FLUSH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toPlainString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+WORD;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getLongValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getShortValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.toString()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?Null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,-1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()-WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?Null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("TheZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.LFH_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort.");
