bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ", ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ", ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ", ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  exception: ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  exception: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  exception: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  WORD_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  SHORT_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  max);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  max);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: "  +  max);	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  can  not  be  deprecated. ");  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  can  not  be  deprecated. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  can  not  be  deprecated. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  are  not  valid. ");  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  are  not  valid. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  are  not  valid. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
8	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
9	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
10	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
11	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
12	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
13	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
14	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding,  sig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding,  sig);	  throw    new    IllegalArgumentException(   "Failed    to    parse    Zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  zipEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  zipEncoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  zipEncoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    Zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
17	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    Zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  sig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  sig);	  throw    new    IllegalArgumentException(   "Failed    to    parse    Zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding,  msg);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding,  msg);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding,  msg);	  throw    new    IllegalArgumentException(   "Failed    to    parse    Zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
20	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    Zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
21	[BUG]  [BUGGY]  return  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(SHORT_BUF);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
22	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  SKIP_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  SKIP_BUF);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
23	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  SHORT_BUF);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
24	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  sig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  sig);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
25	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.SHORT_BUF);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
26	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.BYTE_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.BYTE_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.BYTE_SIG);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
27	[BUG]  [BUGGY]  return  new  ZipLong(WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(WRITE_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(WRITE_BUF);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
28	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
29	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
30	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
31	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
32	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
33	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.shortValue()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.shortValue()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.shortValue()  +  1;	  return(sig    ==    null)?    null    :    sig.longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
34	[BUG]  [BUGGY]  return(sig  >=  null)?  null  :  sig.longValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  >=  null)?  null  :  sig.longValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >=  null)?  null  :  sig.longValue();	  return(sig    ==    null)?    null    :    sig.longValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
35	[BUG]  [BUGGY]  return(sig!=  null)?  1  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  1  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  1  :  sig.toString();	  return(sig!=    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
36	[BUG]  [BUGGY]  return(sig!=  null)?  0,  sig.toString()  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  0,  sig.toString()  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  0,  sig.toString()  :  sig.toString();	  return(sig!=    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  return(sig!=  null)?  -1  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  -1  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  -1  :  sig.toString();	  return(sig!=    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  return(sig!=  null)?  0L  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  0L  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  0L  :  sig.toString();	  return(sig!=    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
39	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
40	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipCentralDirectory();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipCentralDirectory();  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipCentralDirectory();  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
41	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
42	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  skipRemainderOfArchive();  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  skipRemainderOfArchive();  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  skipRemainderOfArchive();  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
43	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getAbsolutePath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getAbsolutePath());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
45	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawPath());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
46	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
47	[BUG]  [BUGGY]  if(!sig.equals(ZipLong.BYTE_SIG)||!sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(!sig.equals(ZipLong.BYTE_SIG)||!sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(!sig.equals(ZipLong.BYTE_SIG)||!sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
48	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  this;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  this;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  this;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.LFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.LFH_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.FLOAT_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.FLOAT_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.FLOAT_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.CFH_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.CFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.CFH_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.getMessage());	  throw    new    IllegalArgumentException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
53	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getClass());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getClass());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getClass());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getClass());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawClass());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawClass());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawClass());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getClass());    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
55	[BUG]  [BUGGY]  if(sig.equals(ZipLong.AED_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.AED_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.AED_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
56	[BUG]  [BUGGY]  if(sig.equals(ZipLong.FOR)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.FOR)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.FOR)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
57	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getKey());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
58	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getKey());    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off),  sig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off),  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off),  sig);	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
60	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  1);	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
62	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  skipCentralDirectory();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  skipCentralDirectory();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  skipCentralDirectory();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
63	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_QUOTE))  {  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_QUOTE))  {  skipRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_QUOTE))  {  skipRemainderOfArchive();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
64	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
65	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_PREFIX))  {  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_PREFIX))  {  skipRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_PREFIX))  {  skipRemainderOfArchive();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
66	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  skipRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_BYTE))  {  skipRemainderOfArchive();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
67	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  skipRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BYTE_SIG))  {  skipRemainderOfArchive();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
68	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LP))  {  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LP))  {  skipRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LP))  {  skipRemainderOfArchive();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
69	[BUG]  [BUGGY]  return(sig!=  null)?  1  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  1  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  1  :  sig.trim();	  return(sig!=    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
70	[BUG]  [BUGGY]  return(sig!=  null)?  -1  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  -1  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  -1  :  sig.trim();	  return(sig!=    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
71	[BUG]  [BUGGY]  return(sig  >=  null)?  0  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  >=  null)?  0  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >=  null)?  0  :  sig.trim();	  return(sig!=    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
72	[BUG]  [BUGGY]  return(sig!=  null)?  0L  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  0L  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  0L  :  sig.trim();	  return(sig!=    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getValue());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLongValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLongValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLongValue());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getValue());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
75	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getValue());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
76	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  sig));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  sig));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  sig));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
77	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  WORD_BUF));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  WORD_BUF));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
78	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF),  sig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF),  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF),  sig);	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
79	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getKey(LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getKey(LFH_BUF));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getKey(LFH_BUF));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
80	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length());	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
81	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  +  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  +  WORD_BUF);	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
82	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length();	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
83	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  *  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  *  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  *  WORD_BUF);	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
84	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  sig.length());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.substring(0,  sig.length());	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
85	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  SHORT_BUF);	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
86	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  0));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  0));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  0));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    -1));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
87	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  WORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  WORD));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  WORD));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    -1));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
88	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  2));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  2));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  2));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    -1));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
90	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse   "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse   "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse   "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
91	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  encoding: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  encoding: "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong  encoding: "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
92	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
93	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
94	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.toString()));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.toString()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.toString()));	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
97	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ".);  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
98	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( ". ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
99	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( ", ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
100	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  psg);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  psg);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  psg);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
101	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.AED_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.AED_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.AED_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
102	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.FIELD_NAME);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.FIELD_NAME);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
103	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  msg);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  msg);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  msg);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
104	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_URL);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_URL);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_URL);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
105	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_NAME);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_NAME);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_NAME);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
106	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg,  e);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg,  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg,  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
107	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  sig);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  sig);	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
108	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
109	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG, ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG, ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG, ");	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
110	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG. ");	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
111	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
112	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  e);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  e);	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
113	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
114	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
115	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ".);  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
116	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( ". ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
117	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( ", ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
118	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(sig));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(sig));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( " ".equals(sig));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
119	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Current  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Current  entry  is  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( "Current  entry  is  null. ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
120	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  sig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  sig);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
121	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  sig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( " ",  sig);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
122	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  e);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( " ",  e);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
123	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
124	[BUG]  [BUGGY]  return(sig!=  null)?  0  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  0  :  sig.getValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  0  :  sig.getValue();	  return(sig    ==    null)?    0    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
125	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.getKey();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.getKey();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.getKey();	  return(sig    ==    null)?    0    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
126	[BUG]  [BUGGY]  return(sig  ==  null)?  1  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  1  :  sig.getValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  1  :  sig.getValue();	  return(sig    ==    null)?    0    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
127	[BUG]  [BUGGY]  return(sig  ==  null)?  -1  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  -1  :  sig.getValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  -1  :  sig.getValue();	  return(sig    ==    null)?    0    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
128	[BUG]  [BUGGY]  return(sig  ==  null)?  0L  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0L  :  sig.getValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0L  :  sig.getValue();	  return(sig    ==    null)?    0    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
129	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_BUF))  {  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_BUF))  {  return  new  ZipLong(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_BUF))  {  return  new  ZipLong(LFH_BUF);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
130	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.SHORT_BUF))  {  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.SHORT_BUF))  {  return  new  ZipLong(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.SHORT_BUF))  {  return  new  ZipLong(LFH_BUF);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
131	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF,  off);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
132	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF,  skipRemainderOfArchive());  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF,  skipRemainderOfArchive());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF,  skipRemainderOfArchive());	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
133	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  return  new  ZipLong(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_BYTE))  {  return  new  ZipLong(LFH_BUF);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
134	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  return  new  ZipLong(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BYTE_SIG))  {  return  new  ZipLong(LFH_BUF);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
135	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  1);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    -1);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
136	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(FH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(FH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(FH_BUF,  off);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    -1);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
137	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  1);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    -1);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
138	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  offset);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  offset);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  offset);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    -1);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
139	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.intValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.intValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.intValue();	  return(sig!=    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
140	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.doubleValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.doubleValue();	  return(sig!=    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
141	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.toLong();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.toLong();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.toLong();	  return(sig    ==    null)?    null    :    sig.toLong();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
142	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toUpperCase();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toUpperCase();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toUpperCase();	  return(sig    ==    null)?    null    :    sig.toLong();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
143	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toLongByteArray();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toLongByteArray();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toLongByteArray();	  return(sig    ==    null)?    null    :    sig.toLong();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
144	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toLong(0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toLong(0);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toLong(0);	  return(sig    ==    null)?    null    :    sig.toLong();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
145	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toLongBytes();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toLongBytes();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toLongBytes();	  return(sig    ==    null)?    null    :    sig.toLong();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
146	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "null ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "null ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "null ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
147	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "none ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "none ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "none ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
148	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  null ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  null ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  null ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
149	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: "  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: "  +  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: "  +  WORD_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
150	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: "  +  WORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: "  +  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: "  +  WORD);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
151	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "no-data ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "no-data ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "no-data ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
152	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  SHORT;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  SHORT;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim()  +  SHORT;	  return(sig    ==    null)?    null    :    sig.trim()    +    WORD;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
153	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  SHORT_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim()  +  SHORT_BUF;	  return(sig    ==    null)?    null    :    sig.trim()    +    WORD;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
154	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  *  WORD;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  *  WORD;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim()  *  WORD;	  return(sig    ==    null)?    null    :    sig.trim()    +    WORD;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
155	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getMessage());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
156	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage(),  e);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage(),  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getMessage());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
157	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_QUOTE))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_QUOTE))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_QUOTE))  {  throw  new  IllegalArgumentException( " ");	  ||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
158	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_BYTE))  {  throw  new  IllegalArgumentException( " ");	  ||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
159	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalArgumentException( " ");	  ||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
160	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_BUF))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_BUF))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_BUF))  {  throw  new  IllegalArgumentException( " ");	  ||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
161	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_FILE))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_FILE))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_FILE))  {  throw  new  IllegalArgumentException( " ");	  ||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
162	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null! ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null! ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null! ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
163	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  must  be  null. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  must  be  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  must  be  null. ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
164	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
165	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null ",  sig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null ",  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null ",  sig);	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
166	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null ",  e);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null ",  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null ",  e);	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
167	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null: "  +  sig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null: "  +  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null: "  +  sig);	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
168	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  *  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  *  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.longValue()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
169	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  SHORT_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  +  SHORT_BUF;	  return(sig    ==    null)?    null    :    sig.longValue()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
170	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.longValue()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.longValue()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.longValue()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.longValue()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
171	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  2;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  +  2;	  return(sig    ==    null)?    null    :    sig.longValue()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
172	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getLongKey();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.getLongKey();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getLongKey();	  return(sig!=    null)?    null    :    sig.getKey();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
173	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
174	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
175	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ".);  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
176	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( ". ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
177	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( ", ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
178	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
179	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
180	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
181	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
182	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
183	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ZipLong.LFH_SIG: "  +  sig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "ZipLong.LFH_SIG: "  +  sig.equals(ZipLong.LFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "ZipLong.LFH_SIG: "  +  sig.equals(ZipLong.LFH_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
184	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipLong.LFH_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipLong.LFH_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  ZipLong.LFH_SIG);	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
185	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  not  supported  by: "  +  sig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  not  supported  by: "  +  sig.equals(ZipLong.LFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  not  supported  by: "  +  sig.equals(ZipLong.LFH_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
186	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  null. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  null. ");	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
187	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  not  supported  by: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  not  supported  by: "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "ZipLong.LFH_SIG  is  not  supported  by: "  +  sig.toString());	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
188	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
189	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
190	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  return  new  ZipLong(LFH_BUF);  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
191	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  return  new  ZipLong(LFH_BUF);  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
192	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
193	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
194	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
195	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
196	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  d);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  d);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  d);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
197	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  t);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  t);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  t);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
198	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getLongValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.getLongValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getLongValue();	  return(sig    ==    null)?    null    :    sig.getLongValue();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
199	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getFullValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getFullValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getFullValue();	  return(sig    ==    null)?    null    :    sig.getLongValue();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
200	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getIntValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getIntValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getIntValue();	  return(sig    ==    null)?    null    :    sig.getLongValue();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
201	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  this;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  this;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  this;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
202	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
203	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  return  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  return  null;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
204	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  return  null;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BYTE_SIG))  {  return  null;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
205	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FLOAT_SIG))  {  return  null;  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FLOAT_SIG))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FLOAT_SIG))  {  return  null;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
206	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ACCEPT_SIZE))  {  return  null;  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ACCEPT_SIZE))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ACCEPT_SIZE))  {  return  null;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
207	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocalName());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocalName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocalName());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
208	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getRawName());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getRawName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getRawName());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
209	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getLongKey();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getLongKey();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getLongKey();	  return(sig    ==    null)?    null    :    sig.getKey();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
210	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
211	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
212	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FLOAT_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FLOAT_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FLOAT_SIG))  {  throw  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
213	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ".);  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
214	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( ". ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
215	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.doubleValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.doubleValue();	  return(sig    ==    null)?    null    :    sig.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
216	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.doubleValue()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.doubleValue()  +  1;	  return(sig    ==    null)?    null    :    sig.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
217	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.doubleValue()  +  WORD;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.doubleValue()  +  WORD;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.doubleValue()  +  WORD;	  return(sig    ==    null)?    null    :    sig.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
218	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  *  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toString()  *  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.toString()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
219	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  +  SHORT_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  +  SHORT_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toString()  +  SHORT_BUF;	  return(sig    ==    null)?    null    :    sig.toString()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
220	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.toString()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.toString()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.toString()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.toString()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
221	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  +  WORD_BUF,  off;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  +  WORD_BUF,  off;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toString()  +  WORD_BUF,  off;	  return(sig    ==    null)?    null    :    sig.toString()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
222	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  -  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  sig.length()  -  1);	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
223	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  +  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  sig.length()  +  1);	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
224	[BUG]  [BUGGY]  return  new  ZipLong(sig,  LFH_BUF.length());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(sig,  LFH_BUF.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(sig,  LFH_BUF.length());	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
225	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  -  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  -  2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  sig.length()  -  2);	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
226	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  -  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  -  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  sig.length()  -  WORD_BUF);	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
227	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.LFH_BUF,  sig.length());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.LFH_BUF,  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.LFH_BUF,  sig.length());	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
228	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  +  2);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  +  2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  sig.length()  +  2);	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
229	[BUG]  [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  WORD);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipLong.getValue(LFH_BUF,  off  +  WORD);	  sig    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
230	[BUG]  [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipLong.getValue(LFH_BUF,  off  +  SHORT_BUF);	  sig    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
231	[BUG]  [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipLong.getValue(LFH_BUF,  off  +  1);	  sig    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
232	[BUG]  [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  2);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipLong.getValue(LFH_BUF,  off  +  2);	  sig    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
233	[BUG]  [BUGGY]  sig  =  ZipLong.parse(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipLong.parse(LFH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipLong.parse(LFH_BUF,  off);	  sig    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
234	[BUG]  [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  3);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  3);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipLong.getValue(LFH_BUF,  off  +  3);	  sig    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
235	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
236	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding,  encoding);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding,  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding,  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
237	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  }	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
238	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  }	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
239	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
240	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
241	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ".);  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
242	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( ". ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
243	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( ", ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( ", ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( ", ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
244	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(2);	  return(sig    ==    null)?    null    :    sig.substring(1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
245	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  SHORT_BUF);	  return(sig    ==    null)?    null    :    sig.substring(1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
246	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  off);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  off);	  return(sig    ==    null)?    null    :    sig.substring(1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
247	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.LFH_SIG,  sig);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.LFH_SIG,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.LFH_SIG,  sig);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
248	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.FLOAT_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.FLOAT_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.FLOAT_SIG);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
249	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.SIZE);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.SIZE);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.SIZE);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
250	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.LFH_SIG,  cSize);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.LFH_SIG,  cSize);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.LFH_SIG,  cSize);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
251	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.LFH_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.LFH_SIG,  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.LFH_SIG,  SHORT_BUF);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
252	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getAbsolutePath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getAbsolutePath());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
253	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getRawPath());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getRawPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getRawPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
254	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocalPath());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocalPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocalPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
255	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getKey()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.getKey()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getKey()  +  1;	  return(sig!=    null)?    null    :    sig.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
256	[BUG]  [BUGGY]  return(sig  >>  null)?  null  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  >>  null)?  null  :  sig.getValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >>  null)?  null  :  sig.getValue();	  return(sig!=    null)?    null    :    sig.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
257	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
258	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipLong.LFH_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipLong.LFH_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipLong.LFH_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
259	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipShort.AED_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipShort.AED_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipShort.AED_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
260	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipLong.AED_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipLong.AED_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  ZipLong.AED_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
261	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  zipFlag);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  zipFlag);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  zipFlag);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
262	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  SHORT_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
263	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  JSON_SIG);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  JSON_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  JSON_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
264	[BUG]  [BUGGY]  return(sig  ==  null)?  0L  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0L  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0L  :  sig.toString();	  return(sig    ==    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
265	[BUG]  [BUGGY]  return(sig  ==  null)?  1  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  1  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  1  :  sig.toString();	  return(sig    ==    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
266	[BUG]  [BUGGY]  return(sig  ==  null)?  -1  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  -1  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  -1  :  sig.toString();	  return(sig    ==    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
267	[BUG]  [BUGGY]  return(sig  ==  null)?  0,  sig.toString()  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0,  sig.toString()  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0,  sig.toString()  :  sig.toString();	  return(sig    ==    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
268	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort.n ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort.n ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort.n ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    not    a    valid    ZipShort.   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
269	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ",  sig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ",  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ",  sig);	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    not    a    valid    ZipShort.   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
270	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort.   "  +  sig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort.   "  +  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort.   "  +  sig);	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    not    a    valid    ZipShort.   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
271	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort: "  +  sig);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort: "  +  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort: "  +  sig);	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    not    a    valid    ZipShort.   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
272	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  *  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  *  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim()  *  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.trim()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
273	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  2;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  2;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim()  +  2;	  return(sig    ==    null)?    null    :    sig.trim()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
274	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.trim()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.trim()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.trim()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.trim()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
275	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
276	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
277	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
278	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off  +  1);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
279	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
280	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off  +  2);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
281	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(FH_BUF,  off  +  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(FH_BUF,  off  +  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(FH_BUF,  off  +  SHORT_BUF);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
282	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());	  Throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
283	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());	  Throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
284	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());	  Throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
285	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");	  Throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
286	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());	  Throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
287	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.substring(1));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.substring(1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.substring(1));	  Throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
288	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLocalName());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLocalName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLocalName());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
289	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getQualifiedName());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getQualifiedName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getQualifiedName());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
290	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  sig);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  sig);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
291	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(ZipLong.LFH_BUF,  sig);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(ZipLong.LFH_BUF,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(ZipLong.LFH_BUF,  sig);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
292	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(DFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(DFH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(DFH_BUF,  off);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
293	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(ZipLong.LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(ZipLong.LFH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(ZipLong.LFH_BUF,  off);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
294	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  sig,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  sig,  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  sig,  WORD_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
295	[BUG]  [BUGGY]  return(sig  ==  null)?  LFH_BUF  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  LFH_BUF  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  LFH_BUF  :  sig.trim();	  return(sig    ==    null)?    NULL    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
296	[BUG]  [BUGGY]  return(sig!=  null)?  NULL  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  NULL  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  NULL  :  sig.trim();	  return(sig    ==    null)?    NULL    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
297	[BUG]  [BUGGY]  return(sig  ==  null)?  NUMBER  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  NUMBER  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NUMBER  :  sig.trim();	  return(sig    ==    null)?    NULL    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
298	[BUG]  [BUGGY]  return(sig  ==  null)?  UNKNOWN  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  UNKNOWN  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  UNKNOWN  :  sig.trim();	  return(sig    ==    null)?    NULL    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
299	[BUG]  [BUGGY]  return(sig  ==  null)?  NUM  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  NUM  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NUM  :  sig.trim();	  return(sig    ==    null)?    NULL    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
300	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.toPlainString();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.toPlainString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.toPlainString();	  return(sig    ==    null)?    null    :    sig.toPlainString();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
301	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainString()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainString()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toPlainString()  +  1;	  return(sig    ==    null)?    null    :    sig.toPlainString();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
302	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainInt();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainInt();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toPlainInt();	  return(sig    ==    null)?    null    :    sig.toPlainString();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
303	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.toPlainString();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.toPlainString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.toPlainString();	  return(sig    ==    null)?    null    :    sig.toPlainString();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
304	[BUG]  [BUGGY]  return(sig  ==  null)?  LFH_BUF  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  LFH_BUF  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  LFH_BUF  :  sig.toString();	  return(sig    ==    null)?    NULL    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
305	[BUG]  [BUGGY]  return(sig!=  null)?  NULL  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  NULL  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  NULL  :  sig.toString();	  return(sig    ==    null)?    NULL    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
306	[BUG]  [BUGGY]  return(sig  ==  null)?  NUMBER  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  NUMBER  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NUMBER  :  sig.toString();	  return(sig    ==    null)?    NULL    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
307	[BUG]  [BUGGY]  return(sig  ==  null)?  UNKNOWN  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  UNKNOWN  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  UNKNOWN  :  sig.toString();	  return(sig    ==    null)?    NULL    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
308	[BUG]  [BUGGY]  return(sig  ==  null)?  NUM  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  NUM  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NUM  :  sig.toString();	  return(sig    ==    null)?    NULL    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
309	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getFloatValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getFloatValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getFloatValue();	  return(sig    ==    null)?    null    :    sig.getShortValue();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
310	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getLastValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getLastValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getLastValue();	  return(sig    ==    null)?    null    :    sig.getShortValue();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
311	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
312	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
313	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ".);  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
314	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( ". ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
315	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( ", ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( ", ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( ", ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
316	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
317	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(sig.getKey()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(sig.getKey()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(sig.getKey()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
318	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse   "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse   "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse   "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
319	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
320	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
321	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.getName());	  throw    new    IllegalStateException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
322	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.getName());	  throw    new    IllegalStateException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
323	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  encoding: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  encoding: "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong  encoding: "  +  sig.getName());	  throw    new    IllegalStateException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
324	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.NULL  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.NULL  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.NULL  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
325	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.None  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.None  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.None  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
326	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipShort  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipShort  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipShort  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
327	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.NaN  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.NaN  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.NaN  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
328	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.NONE  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.NONE  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.NONE  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
329	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipShort.NULL  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipShort.NULL  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipShort.NULL  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
330	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  sig);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ",  sig);	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
331	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
332	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG, ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG, ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG, ");	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
333	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG. ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG. ");	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
334	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
335	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
336	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
337	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
338	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  1);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
339	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
340	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  2);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
341	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  -  WORD);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  -  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  -  WORD);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
342	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FIRST_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
343	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FIRST_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
344	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ".);  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FIRST_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
345	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( ". ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FIRST_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
346	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  return  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.FIRST_SIG))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.FIRST_SIG))  {  return  null;	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FIRST_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
347	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BYTE_SIG))  {  throw  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
348	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
349	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.parse(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.parse(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.parse(LFH_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
350	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  WORD_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
351	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(sig));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(sig));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(sig));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
352	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Current  entry  is  null. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Current  entry  is  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Current  entry  is  null. ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
353	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
354	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
355	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( " ".getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
356	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "' ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "' ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "' ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
357	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
358	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
359	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "'. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "'. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "'. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
360	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ' "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ' "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
361	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.substring(1));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.substring(1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.substring(1));	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
362	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getLongSize();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.getLongSize();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getLongSize();	  return(sig!=    null)?    null    :    sig.getSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
363	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getFullSize();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.getFullSize();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getFullSize();	  return(sig!=    null)?    null    :    sig.getSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
364	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getLongSize();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getLongSize();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getLongSize();	  return(sig!=    null)?    null    :    sig.getSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
365	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.getSize()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getSize()  +  1;	  return(sig!=    null)?    null    :    sig.getSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
366	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getSize());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getSize());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getSize());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getPosition());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
367	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawPosition());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawPosition());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getRawPosition());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getPosition());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
368	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLineNumber());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLineNumber());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLineNumber());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getPosition());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
369	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongPosition());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongPosition());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongPosition());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getPosition());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
370	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage(),  e);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage(),  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getMessage());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
371	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: "  +  sig.getValue());	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
372	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse   "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse   "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse   "  +  sig.getValue());	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
373	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.getValue());	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
374	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.getValue());	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
375	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.getValue()  + "' ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.getValue()  + "' ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong  ' "  +  sig.getValue()  + "' ");	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
376	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.getValue());	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
377	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.getValue()));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.getValue()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.getValue()));	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
378	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  WORD);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
379	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
380	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  SHORT);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
381	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  SHORT_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
382	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  WORD);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  -  WORD);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
383	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf,  encoding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf,  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf,  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    pf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
384	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  pf);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  pf);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  pf);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    pf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
385	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.BYTE_SIG);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.BYTE_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.BYTE_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    pf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
386	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    pf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
387	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.MIN_VALUE);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.MIN_VALUE);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.MIN_VALUE);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    pf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
388	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",   ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",   ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",   ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
389	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  bounds: ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  bounds: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  bounds: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
390	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got: ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
391	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got: ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
392	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getFullSize();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getFullSize();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getFullSize();	  return(sig    ==    null)?    null    :    sig.getSize();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
393	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getSize()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getSize()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getSize()  +  1;	  return(sig    ==    null)?    null    :    sig.getSize();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
394	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.LFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.LFH_SIG));	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
395	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.equals(ZipLong.LFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.equals(ZipLong.LFH_SIG));	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
396	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  ZipLong.LFH_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  ZipLong.LFH_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  ZipLong.LFH_SIG);	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
397	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG. ");	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
398	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig);	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
399	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
400	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
401	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getValue());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
402	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);	  Throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
403	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);	  Throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
404	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);	  Throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
405	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);	  Throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
406	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);	  Throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
407	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);	  Throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
408	[BUG]  [BUGGY]  return(sig  ==  null)?  1  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  1  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  1  :  sig.trim();	  return(sig    ==    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
409	[BUG]  [BUGGY]  return(sig  ==  null)?  0L  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0L  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0L  :  sig.trim();	  return(sig    ==    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
410	[BUG]  [BUGGY]  return(sig  ==  null)?  -1  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  -1  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  -1  :  sig.trim();	  return(sig    ==    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
411	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.trim()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.trim()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.trim()  +  1;	  return(sig    ==    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
412	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BYTE_SIG))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BYTE_SIG))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
413	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ACCEPT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ACCEPT_SIZE))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ACCEPT_SIZE))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
414	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LP))  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LP))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LP))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
415	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_FILE))  {  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_FILE))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_FILE))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
416	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.SIZE))  {  [CE]  illegal  start  of  type  [FE]                                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.SIZE))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.SIZE))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
417	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BIG))  {  [CE]  illegal  start  of  type  [FE]                                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BIG))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BIG))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
418	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());	  new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
419	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());	  new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
420	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());	  new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
421	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());	  new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
422	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");	  new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
423	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.substring(1));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.substring(1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.substring(1));	  new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
424	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  SHORT;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  SHORT;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  +  SHORT;	  return(sig    ==    null)?    null    :    sig.longValue()    +    WORD;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
425	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  *  WORD;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  *  WORD;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  *  WORD;	  return(sig    ==    null)?    null    :    sig.longValue()    +    WORD;    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
426	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    sig);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
427	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    sig);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
428	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.length);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.length);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    sig);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
429	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  e);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    sig);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
430	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getName());	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    sig);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
431	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.substring(1));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.substring(1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.substring(1));	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    sig);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
432	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.intValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.intValue()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.intValue()  +  1;	  return(sig    ==    null)?    null    :    sig.intValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
433	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.intValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.intValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.intValue();	  return(sig    ==    null)?    null    :    sig.intValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
434	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.nextValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.nextValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.nextValue();	  return(sig    ==    null)?    null    :    sig.intValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
435	[BUG]  [BUGGY]  return(sig  >=  null)?  null  :  sig.substring(0,  sig.length());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  >=  null)?  null  :  sig.substring(0,  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >=  null)?  null  :  sig.substring(0,  sig.length());	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
436	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  +  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  +  1);	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
437	[BUG]  [BUGGY]  return(sig  ==  null)?  Null  :  sig.substring(0,  sig.length());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  Null  :  sig.substring(0,  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  Null  :  sig.substring(0,  sig.length());	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
438	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  continue;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  continue;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  continue;	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
439	[BUG]  [BUGGY]  if(!sig.equals(ZipLong.BYTE_SIG)||!sig.equals(ZipLong.AED_SIG))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(!sig.equals(ZipLong.BYTE_SIG)||!sig.equals(ZipLong.AED_SIG))  {  continue;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(!sig.equals(ZipLong.BYTE_SIG)||!sig.equals(ZipLong.AED_SIG))  {  continue;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
440	[BUG]  [BUGGY]  while(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  while(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	while(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
441	[BUG]  [BUGGY]  Context.checkState(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Context.checkState(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Context.checkState(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
442	[BUG]  [BUGGY]  while(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  while(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	while(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
443	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    sig);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
444	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.LFH_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.LFH_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.LFH_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    sig);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
445	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.AED_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.AED_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.AED_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    sig);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
446	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  sig,  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  sig,  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  sig,  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    sig);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
447	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  TWO_DWORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  TWO_DWORD_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
448	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  SHORT_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
449	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  SKIP_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig,  SKIP_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
450	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_ZIP_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_ZIP_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_ZIP_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
451	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  FH_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  FH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  FH_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
452	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipLong.LFH_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
453	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getShortName());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getShortName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getShortName());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getLocalName());    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
454	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.NULL  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.NULL  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.NULL  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
455	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipShort.NULL  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipShort.NULL  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipShort.NULL  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
456	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.NaN  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.NaN  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.NaN  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
457	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.None  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.None  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.None  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
458	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipShort  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipShort  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipShort  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
459	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.LFH_SIG,  sig.toString()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.LFH_SIG,  sig.toString()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(ZipLong.LFH_SIG,  sig.toString()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
460	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.FLOAT_SIG,  sig.toString()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.FLOAT_SIG,  sig.toString()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(ZipLong.FLOAT_SIG,  sig.toString()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
461	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse   "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse   "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse   "  +  sig.toString());	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
462	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  a  ZipLong.LFH_SIG. "  +  sig.toString());	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
463	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.shortValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.shortValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.shortValue();	  return(sig    ==    null)?    null    :    sig.shortValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
464	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.shortValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.shortValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.shortValue());	  return(sig    ==    null)?    null    :    sig.shortValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
465	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.sintValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.sintValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.sintValue();	  return(sig    ==    null)?    null    :    sig.shortValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
466	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.shortValue();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.shortValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.shortValue();	  return(sig    ==    null)?    null    :    sig.shortValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
467	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  0);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  0);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  0);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
468	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  1);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
469	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
470	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
471	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.toLowerCase();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.toLowerCase();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.toLowerCase();	  return(sig    ==    null)?    null    :    sig.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
472	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toLowerCase()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toLowerCase()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toLowerCase()  +  1;	  return(sig    ==    null)?    null    :    sig.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
473	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.toLowerCase();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.toLowerCase();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.toLowerCase();	  return(sig    ==    null)?    null    :    sig.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
474	[BUG]  [BUGGY]  return(sig  >=  null)?  null  :  sig.toLowerCase();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  >=  null)?  null  :  sig.toLowerCase();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >=  null)?  null  :  sig.toLowerCase();	  return(sig    ==    null)?    null    :    sig.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
475	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.substring(2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.substring(2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.substring(2);	  return(sig!=    null)?    null    :    sig.substring(1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
476	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  sig.length()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  sig.length()  -  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.substring(0,  sig.length()  -  1);	  return(sig!=    null)?    null    :    sig.substring(1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
477	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  zipFlag);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  zipFlag);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  zipFlag);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
478	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
479	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString(),  e);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString(),  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
480	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.AED_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.AED_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.AED_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
481	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.FIELD_NAME);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.FIELD_NAME);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
482	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipLong.LFH_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipLong.LFH_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipLong.LFH_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
483	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.EMPTY_STRING);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.EMPTY_STRING);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.EMPTY_STRING);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
484	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.LFH_BUF));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.LFH_BUF));	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
485	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  ZipLong.LFH_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  ZipLong.LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  ZipLong.LFH_BUF);	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
486	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_BUF  is  null. ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_BUF  is  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_BUF  is  null. ");	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
487	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_BUF. ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_BUF. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_BUF. ");	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
488	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
489	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  sig.length()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  sig.length()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  sig.length()));	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
490	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(2));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(2));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(2));	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
491	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  sig.length()  -  1));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  sig.length()  -  1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  sig.length()  -  1));	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
492	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  off));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  off));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  off));	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
493	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  1);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
494	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1),  sig.length());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1),  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1),  sig.length());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
495	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
496	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
497	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ".);  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
498	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( ". ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
499	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  return  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LFH_SIG))  {  return  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LFH_SIG))  {  return  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
500	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SKIP_BUF));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SKIP_BUF));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
501	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF),  sig);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF),  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF),  sig);	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
502	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getKey()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getKey()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getKey()  +  1;	  return(sig    ==    null)?    null    :    sig.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
503	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.getMessage());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    cSize.toString());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
504	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize,  sig.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize,  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize,  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    cSize.toString());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
505	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    cSize.toString());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
506	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.getValue());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    cSize.toString());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
507	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.substring(1));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.substring(1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.substring(1));	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    cSize.toString());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
508	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getClass());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getClass());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getClass());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getMessage());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
509	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLineNumber());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLineNumber());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLineNumber());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getMessage());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
510	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(sig));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(sig));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(sig));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
511	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( ", ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
512	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
513	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse: ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
514	[BUG]  [BUGGY]  return(sig!=  null)?  Null  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  Null  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  Null  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
515	[BUG]  [BUGGY]  return(sig!=  null)?  ZipShort  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  ZipShort  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  ZipShort  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
516	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.handleMissingException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
517	[BUG]  [BUGGY]  sweepRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sweepRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sweepRemainderOfArchive();	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
518	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsStatementException( " ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsStatementException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsStatementException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
519	[BUG]  [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.handleMalformedException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
520	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
521	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.handleMoreGuaranteed();	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
522	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwInternal();	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
523	[BUG]  [BUGGY]  returns(sig  ==  null)?  null  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  returns(sig  ==  null)?  null  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	returns(sig  ==  null)?  null  :  sig.toString();	  return(sig    ==    null)?    null    :    sig.toString()    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
524	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toLong()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toLong()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toLong()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.toLong();    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
525	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toLowerCase()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toLowerCase()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toLowerCase()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
526	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  new  ZipLong(sig.toLowerCase());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  new  ZipLong(sig.toLowerCase());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  new  ZipLong(sig.toLowerCase());	  return(sig    ==    null)?    null    :    sig.toLowerCase();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
527	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getLength();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.getLength();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getLength();	  return(sig!=    null)?    null    :    sig.getSize();    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
528	[BUG]  [BUGGY]  return  new  ZipLong(sig);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(sig);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
529	[BUG]  [BUGGY]  return  new  ZipLong(CFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(CFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(CFH_BUF);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
530	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Thread.currentThread().interrupt();	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
531	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getNextEntry());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getNextEntry());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Thread.currentThread().setContextClassLoader(getNextEntry());	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
532	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getLength();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getLength();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getLength();	  return(sig    ==    null)?    null    :    sig.getSize();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
533	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length()  +  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  sig.length()  +  WORD_BUF);	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
534	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
535	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  2);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
536	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  off);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  off);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
537	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  ZipSize: "  +  sig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  ZipSize: "  +  sig.equals(ZipLong.LFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Invalid  ZipSize: "  +  sig.equals(ZipLong.LFH_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
538	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_QUOTE))  {  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_QUOTE))  {  return  new  ZipLong(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_QUOTE))  {  return  new  ZipLong(LFH_BUF);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
539	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.LP))  {  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.LP))  {  return  new  ZipLong(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.LP))  {  return  new  ZipLong(LFH_BUF);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
540	[BUG]  [BUGGY]  allowSkip(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  allowSkip(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	allowSkip(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
541	[BUG]  [BUGGY]  safeThan  <  ZipLong>  sig  =  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  safeThan  <  ZipLong>  sig  =  new  ZipLong(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	safeThan  <  ZipLong>  sig  =  new  ZipLong(LFH_BUF);	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
542	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  [Delete]  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	[Delete]	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
543	[BUG]  [BUGGY]  safeThan  <  ZipLong>  sig  =  new  SafeThan  <  ZipLong>(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  safeThan  <  ZipLong>  sig  =  new  SafeThan  <  ZipLong>(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	safeThan  <  ZipLong>  sig  =  new  SafeThan  <  ZipLong>(LFH_BUF);	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
544	[BUG]  [BUGGY]  safeThan  <  ZipLong>  sig  =  new  SafeThan  <  ZipLong>();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  safeThan  <  ZipLong>  sig  =  new  SafeThan  <  ZipLong>();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	safeThan  <  ZipLong>  sig  =  new  SafeThan  <  ZipLong>();	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
545	[BUG]  [BUGGY]  safely())  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  safely())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	safely())  {  throw  new  IllegalStateException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
546	[BUG]  [BUGGY]  allowSkip(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  allowSkip(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	allowSkip(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
547	[BUG]  [BUGGY]  safeName  =  ZipShort.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  safeName  =  ZipShort.getValue(LFH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	safeName  =  ZipShort.getValue(LFH_BUF,  off);	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
548	[BUG]  [BUGGY]  safeName  =  ZipShort.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  safeName  =  ZipShort.getValue(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	safeName  =  ZipShort.getValue(LFH_BUF);	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
549	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsIgnoredException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsIgnoredException( " ");	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
550	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.equals(ZipLong.LFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.equals(ZipLong.LFH_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
551	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.equals(ZipLong.LFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.equals(ZipLong.LFH_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
552	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  at  index ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  at  index ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  at  index ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
553	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  bytes: ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  bytes: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  bytes: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
554	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected  size: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
555	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  bytes  of  type   ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  bytes  of  type   ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  bytes  of  type   ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
556	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  from  the  following  line. ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  from  the  following  line. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  from  the  following  line. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
557	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.FLOAT_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.FLOAT_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.FLOAT_SIG));	  throw    new    IllegalStateException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
558	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.getName());	  throw    new    IllegalStateException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
559	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  1));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  1));	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
560	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1),  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1),  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1),  WORD_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
561	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  JSON_SIZE));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  JSON_SIZE));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(0,  JSON_SIZE));	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.substring(1));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
562	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLineno());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLineno());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLineno());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getValue());    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
563	[BUG]  [BUGGY]  wires.put(ZipLong.BYTE_SIG,  sig);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  wires.put(ZipLong.BYTE_SIG,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	wires.put(ZipLong.BYTE_SIG,  sig);	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
564	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
565	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getName());	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
566	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getPosition());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getPosition());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getPosition());	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
567	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getPath());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.getPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
568	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf.getName(),  encoding);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf.getName(),  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  pf.getName(),  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    pf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
569	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.NONE);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.NONE);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.NONE);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    pf);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
570	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
571	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
572	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
573	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  SHORT_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
574	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(WRITE_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(WRITE_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
575	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.shortValue()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.shortValue()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.shortValue()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.shortValue();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
576	[BUG]  [BUGGY]  returns(sig  ==  null)?  null  :  sig.substring(0,  sig.length());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  returns(sig  ==  null)?  null  :  sig.substring(0,  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	returns(sig  ==  null)?  null  :  sig.substring(0,  sig.length());	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
577	[BUG]  [BUGGY]  return(sig  ==  null)?  NULL  :  sig.substring(0,  sig.length());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  NULL  :  sig.substring(0,  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NULL  :  sig.substring(0,  sig.length());	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    1);    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
578	[BUG]  [BUGGY]  return(sig  [Delete]  null)?  null  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  [Delete]  null)?  null  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  [Delete]  null)?  null  :  sig.trim();	  return(sig    >=    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
579	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  -1L);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  -1L);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  -1L);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    -1);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
580	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  -1);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  -1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(Long.MAX_VALUE,  -1);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    -1);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
581	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSertionError( "msg.illegal.key ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsSertionError( "msg.illegal.key ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsSertionError( "msg.illegal.key ");	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
582	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  was  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  was  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  was  null. ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
583	[BUG]  [BUGGY]  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
584	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  does  not  exist: ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  does  not  exist: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  does  not  exist: ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
585	[BUG]  [BUGGY]  return(sig!=  null)?  Null  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  Null  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  Null  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
586	[BUG]  [BUGGY]  return(sig!=  null)?  ZipShort  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  ZipShort  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  ZipShort  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
587	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.NUMBER  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.NUMBER  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.NUMBER  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
588	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  WORD_BUF);	  return(sig    ==    null)?    null    :    sig.trim()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
589	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLong());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLong());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLong());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
590	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
591	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LP)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.LP)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LP)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
592	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  cSize);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  cSize);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  cSize);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
593	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: ",  sig.getName(),  e);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: ",  sig.getName(),  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: ",  sig.getName(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
594	[BUG]  [BUGGY]  nisip  =  ZipShort.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  nisip  =  ZipShort.getValue(LFH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	nisip  =  ZipShort.getValue(LFH_BUF,  off);	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
595	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSwitch( "msg.illegal.length ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsSwitch( "msg.illegal.length ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsSwitch( "msg.illegal.length ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
596	[BUG]  [BUGGY]  nisip  =  ZipShort.parse(zipFlag);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  nisip  =  ZipShort.parse(zipFlag);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	nisip  =  ZipShort.parse(zipFlag);	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
597	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSwitch( "msg.illegal.key ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsSwitch( "msg.illegal.key ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsSwitch( "msg.illegal.key ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
598	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSwitchThrough( "msg.illegal.length ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsSwitchThrough( "msg.illegal.length ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsSwitchThrough( "msg.illegal.length ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.ALLOW_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
599	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
600	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipShort: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipShort: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipShort: "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
601	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: ".equals(sig.getValue()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: ".equals(sig.getValue()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: ".equals(sig.getValue()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
602	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipShort: ".equals(sig.getValue()));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipShort: ".equals(sig.getValue()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipShort: ".equals(sig.getValue()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
603	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
604	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  null ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  null ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  null ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
605	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  on  the  same  line. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  on  the  same  line. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  on  the  same  line. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
606	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  on  the  right  line. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  on  the  right  line. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  on  the  right  line. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
607	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  2);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  2);	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
608	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  10);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  10);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  10);	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
609	[BUG]  [BUGGY]  return(sig  ==  null)?  NULL  :  sig.toString()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  NULL  :  sig.toString()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NULL  :  sig.toString()  +  WORD_BUF;	  return(sig    ==    null)?    NULL    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
610	[BUG]  [BUGGY]  return(sig  ==  null)?  NULL  :  sig.substring(1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  NULL  :  sig.substring(1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NULL  :  sig.substring(1);	  return(sig    ==    null)?    NULL    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
611	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_SKIP_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipShort.DEFAULT_SKIP_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
612	[BUG]  [BUGGY]  ||!sig.equals(ZipLong.AED_SIG))  {  return  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||!sig.equals(ZipLong.AED_SIG))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||!sig.equals(ZipLong.AED_SIG))  {  return  null;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
613	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  return  null;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_BYTE))  {  return  null;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
614	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  entryEncoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  entryEncoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    Zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
615	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getLongValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getLongValue()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getLongValue()  +  1;	  return(sig    ==    null)?    null    :    sig.getLongValue();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
616	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  3);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  3);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off  +  3);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
617	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
618	[BUG]  [BUGGY]  sig  =  ZipShort.parse(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.parse(LFH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.parse(LFH_BUF,  off);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
619	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.substring(1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.substring(1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.substring(1);	  return(sig    ==    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
620	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    not    a    valid    ZipShort.   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
621	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort! ");  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort! ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort! ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    not    a    valid    ZipShort.   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
622	[BUG]  [BUGGY]  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    not    a    valid    ZipShort.   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
623	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort: ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort: ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    not    a    valid    ZipShort.   ");    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
624	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
625	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  3;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  3;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  +  3;	  return(sig    ==    null)?    null    :    sig.longValue()    +    WORD_BUF;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
626	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.intValue()  +  WORD;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.intValue()  +  WORD;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.intValue()  +  WORD;	  return(sig    ==    null)?    null    :    sig.intValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
627	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.intValue()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.intValue()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.intValue()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.intValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
628	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  0L);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  0L);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  0L);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
629	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.getLongValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.getLongValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.getLongValue();	  return(sig    ==    null)?    0    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
630	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  SHORT_BUF);	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
631	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off  +  1));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off  +  1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off  +  1));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
632	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off  +  SHORT_BUF));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
633	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off)+  WORD);	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    off));    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
634	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getKey());	  Throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
635	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  JSON_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  JSON_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  JSON_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
636	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name:  ' "  +  encoding);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name:  ' "  +  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name:  ' "  +  encoding);	  Throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
637	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  continue;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  continue;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
638	[BUG]  [BUGGY]  if(!sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(!sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(!sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
639	[BUG]  [BUGGY]  while(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  while(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	while(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
640	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  continue;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  continue;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
641	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCrc());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCrc());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Thread.currentThread().setContextClassLoader(getCrc());	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
642	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext());	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
643	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong. ");	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
644	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
645	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG "  +  zipFileName);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG "  +  zipFileName);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG "  +  zipFileName);	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
646	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.longValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.longValue()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.longValue()  +  1;	  return(sig!=    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
647	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  LONG_SIG));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  LONG_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  LONG_SIG));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
648	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skippeRemainderOfArchive();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skippeRemainderOfArchive();  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skippeRemainderOfArchive();  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
649	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  skipRemainderOfArchive();  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  skipRemainderOfArchive();  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  skipRemainderOfArchive();  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
650	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.substring(0,  WORD_BUF);	  return(sig!=    null)?    null    :    sig.substring(1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
651	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.substring(0,  1);	  return(sig!=    null)?    null    :    sig.substring(1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
652	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  1));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  1));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  1));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    -1));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
653	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -2));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -2));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -2));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    -1));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
654	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -3));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -3));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -3));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    -1));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
655	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainString()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainString()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toPlainString()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.toPlainString();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
656	[BUG]  [BUGGY]  if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(entryEncoding!=  null)  {  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  }	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
657	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.separator.trim();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.separator.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.separator.trim();	  return(sig    ==    null)?    null    :    sig.trim()    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
658	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig,  LFH_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
659	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(WRITE_BUF,  sig);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(WRITE_BUF,  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(WRITE_BUF,  sig);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
660	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LPH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LPH_BUF,  off);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LPH_BUF,  off);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
661	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong. ");	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
662	[BUG]  [BUGGY]  Throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
663	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "The  ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "The  ZipLong  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalStateException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
664	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.doubleValue()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.doubleValue()  +  WORD_BUF;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.doubleValue()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
665	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
666	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.getValue());	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
667	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipShort: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipShort: "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipShort: "  +  sig.getValue());	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
668	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.getValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.getValue());	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
669	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)&&  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
670	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
671	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ADJECT_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
672	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.toString());	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
673	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG. "  +  sig.toString());	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
674	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.toString()));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.toString()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG ",  sig.toString()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
675	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong.LFH_SIG "  +  sig.toString());	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
676	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong. "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong. "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  ZipLong. "  +  sig.toString());	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
677	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLong());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLong());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLong());	  new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
678	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getText());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getText());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getText());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
679	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  1);	  return(sig    ==    null)?    null    :    sig.substring(1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
680	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  size: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
681	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  length: "  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  length: "  +  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  length: "  +  WORD_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
682	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  length: ");  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  length: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  expected  length: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
683	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  of  type ");  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  of  type ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  bytes  of  type ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
684	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  WORD_BUF);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
685	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  3);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  3);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  3);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
686	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  -  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  -  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  -  SHORT_BUF);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
687	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_ARRAY))  {  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_ARRAY))  {  skipRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_ARRAY))  {  skipRemainderOfArchive();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
688	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( ", ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
689	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
690	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.SHORT_BUF))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.SHORT_BUF))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.SHORT_BUF))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
691	[BUG]  [BUGGY]  ||!sig.equals(ZipLong.AED_SIG))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||!sig.equals(ZipLong.AED_SIG))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||!sig.equals(ZipLong.AED_SIG))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
692	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_BYTE))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_BYTE))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
693	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_PREFIX))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_PREFIX))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_PREFIX))  {  throw  new  IllegalArgumentException( " ");	  ||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
694	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_KEY))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_KEY))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_KEY))  {  throw  new  IllegalArgumentException( " ");	  ||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
695	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  cSize);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
696	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  DEFAULT_ZIP_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  DEFAULT_ZIP_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  DEFAULT_ZIP_SIG);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    msg);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
697	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.LP);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.LP);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.LP);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
698	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.DEFAULT_SIZE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.DEFAULT_SIZE);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.DEFAULT_SIZE);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
699	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.SHORT);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.SHORT);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.SHORT);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
700	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.ZERO);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.ZERO);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.ZERO);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
701	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipLong.NONE  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipLong.NONE  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipLong.NONE  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
702	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipShort.NONE  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipShort.NONE  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipShort.NONE  :  sig.toString();	  return(sig    ==    null)?    Null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
703	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + ",' ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + ",' ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + ",' ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
704	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + ".' ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + ".' ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + ".' ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:    '   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
705	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainBytes();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainBytes();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toPlainBytes();	  return(sig    ==    null)?    null    :    sig.toPlainString();    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
706	[BUG]  [BUGGY]  sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
707	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  sig.length()  -  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.substring(0,  sig.length()  -  WORD_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.substring(0,  sig.length()  -  WORD_BUF);	  return(sig    ==    null)?    null    :    sig.substring(0,    sig.length()    -    WORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
708	[BUG]  [BUGGY]  return  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
709	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null:  ' "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null:  ' "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null:  ' "  +  sig.getName());	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
710	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null: ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null: ");	  throw    new    IllegalStateException(   "ZipLong.LFH_SIG    is    null.   ");    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
711	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  but  got: ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  but  got: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + ",  but  got: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
712	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  from  the  following  line. ");  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  from  the  following  line. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "  from  the  following  line. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
713	[BUG]  [BUGGY]  return(sig  ==  null)?  DEFAULT_SIG  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  DEFAULT_SIG  :  sig.toString();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  DEFAULT_SIG  :  sig.toString();	  return(sig    ==    null)?    NULL    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
714	[BUG]  [BUGGY]  return(sig  >=  null)?  null  :  sig.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  >=  null)?  null  :  sig.doubleValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >=  null)?  null  :  sig.doubleValue();	  return(sig    ==    null)?    null    :    sig.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
715	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipEncoding.UTF8);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipEncoding.UTF8);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  ZipEncoding.UTF8);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
716	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongName());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongName());	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
717	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString(),  e);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString(),  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
718	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.NONE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.NONE);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  ZipShort.NONE);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString(),    e);    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
719	[BUG]  [BUGGY]  return(sig  ==  null)?  ZipShort.NONE  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  ZipShort.NONE  :  sig.trim();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  ZipShort.NONE  :  sig.trim();	  return(sig    ==    null)?    Null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
720	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( " ");  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsIAE( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsIAE( " ");	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
721	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.bad.internal ",  e);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsIAE( "msg.bad.internal ",  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsIAE( "msg.bad.internal ",  e);	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
722	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName(),  sig);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName(),  sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName(),  sig);	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
723	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "',' ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "',' ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString()  + "',' ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
724	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected: ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  expected: ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
725	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  was  expecting  closing  the  file  name. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  was  expecting  closing  the  file  name. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  was  expecting  closing  the  file  name. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   ",   ");    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
726	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  11);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off  +  11);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off  +  11);	  sig    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
727	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);	  Throwables.throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
728	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getValue()  *  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.getValue()  *  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getValue()  *  1;	  return(sig!=    null)?    null    :    sig.getValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
729	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIgnoredIOException( " ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  aughtExceptionHandler.throwAsIgnoredIOException( " ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	aughtExceptionHandler.throwAsIgnoredIOException( " ");	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.FLUSH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
730	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ED_SIG))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ED_SIG))  {  continue;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ED_SIG))  {  continue;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
731	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  continue;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  continue;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
732	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ACCEPT_SIG))  {  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ACCEPT_SIG))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ACCEPT_SIG))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
733	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ASSIGN))  {  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ASSIGN))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ASSIGN))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
734	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.SCRIPT_BYTE_SIG))  {  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.SCRIPT_BYTE_SIG))  {  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.SCRIPT_BYTE_SIG))  {	  ||    sig.equals(ZipLong.AED_SIG))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
735	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name:  ' "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name:  ' "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name:  ' "  +  sig.toString());	  Throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
736	[BUG]  [BUGGY]  if(sig.equals(ZipLong.DLH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.DLH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.DLH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
737	[BUG]  [BUGGY]  if(sig.equals(ZipLong.DEFAULT_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.DEFAULT_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.DEFAULT_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.LFH_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
738	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  sig.length()));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  sig.length()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  sig.length()));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
739	[BUG]  [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	[Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
740	[BUG]  [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	[Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
741	[BUG]  [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ASSIGN_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ASSIGN_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	[Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ASSIGN_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
742	[BUG]  [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AAED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AAED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	[Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AAED_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
743	[BUG]  [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  [Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	[Delete]  else  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
744	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_BUF. "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_BUF. "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "Failed  to  parse  ZipLong.LFH_BUF. "  +  sig.toString());	  throw    new    IllegalStateException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
745	[BUG]  [BUGGY]  return(sig!=  null)?  0  :  sig.substring(1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  0  :  sig.substring(1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  0  :  sig.substring(1);	  return(sig!=    null)?    0    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
746	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name:  ' "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name:  ' "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name:  ' "  +  sig.toString());	  new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
747	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.intValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.intValue());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.intValue());	  return(sig    ==    null)?    null    :    sig.intValue();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
748	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipShort.getValue(sig.getValue()));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipShort.getValue(sig.getValue()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  ZipShort.getValue(sig.getValue()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
749	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  zipEncoding.equals(sig.getValue()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  zipEncoding.equals(sig.getValue()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  zipEncoding.equals(sig.getValue()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
750	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipShort.getValue(LFH_BUF,  sig.getValue()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipShort.getValue(LFH_BUF,  sig.getValue()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  ZipShort.getValue(LFH_BUF,  sig.getValue()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
751	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name:  ' "  +  encoding);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name:  ' "  +  encoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name:  ' "  +  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    Zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
752	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e.getMessage());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e.getMessage());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName(),    e);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
753	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  0);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  0);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig,  0);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
754	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(WRITE_BUF,  0);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(WRITE_BUF,  0);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(WRITE_BUF,  0);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
755	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse  zip  file  name: ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
756	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Current  entry  is  not  supported. ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Current  entry  is  not  supported. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( "Current  entry  is  not  supported. ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
757	[BUG]  [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  11);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off  +  11);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipLong.getValue(LFH_BUF,  off  +  11);	  sig    =    ZipLong.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
758	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  SHORT_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig,  SHORT_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
759	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  LH_BUF);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  LH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig,  LH_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
760	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  CFH_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  CFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig,  CFH_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
761	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  ZipLong.LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  ZipLong.LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig,  ZipLong.LFH_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
762	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  ZipLong.CFH_BUF);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  ZipLong.CFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig,  ZipLong.CFH_BUF);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    sig);    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
763	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF,  sig));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF,  sig));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF,  sig));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
764	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  short));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  short));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  short));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
765	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
766	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse:  n "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse:  n "  +  sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse:  n "  +  sig.toString());	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
767	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ", ");  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ", ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ", ");	  Throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
768	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipShort.toString(sig.toString()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipShort.toString(sig.toString()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  ZipShort.toString(sig.toString()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
769	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(sig.toString()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(sig.toString()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ").equals(sig.toString()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
770	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(sig.toString());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(sig.toString());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ").equals(sig.toString());	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
771	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipLong.toString(sig.toString()));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  ZipLong.toString(sig.toString()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  ZipLong.toString(sig.toString()));	  throw    new    IllegalArgumentException(   "   ".equals(sig.toString()));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
772	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(ZipLong.DEFAULT_SIG);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.DEFAULT_SIG);	  return    new    ZipLong(ZipLong.LFH_SIG);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
773	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.CFH_SIG));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.CFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(ZipLong.CFH_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
774	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.getName());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.getName());	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
775	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.LP_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.LP_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(ZipLong.LP_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(ZipLong.LFH_SIG));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
776	[BUG]  [BUGGY]  sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    null;    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
777	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  WORD);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  WORD);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  WORD);	  return(sig    ==    null)?    null    :    sig.trim()    +    WORD;    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
778	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.toString()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.toString()  +  1;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.toString()  +  1;	  return(sig    ==    null)?    0    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
779	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.split( "n ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.split( "n ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.split( "n ");	  return(sig    ==    null)?    null    :    sig.trim()    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
780	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.split( "u000 ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  null  :  sig.split( "u000 ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.split( "u000 ");	  return(sig    ==    null)?    null    :    sig.trim()    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
781	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF  +  1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF  +  1);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
782	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SUB))  {  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SUB))  {  return  new  ZipLong(LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SUB))  {  return  new  ZipLong(LFH_BUF);	  ||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
783	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.FIRST_SIG));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.FIRST_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.FIRST_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
784	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.AED_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.AED_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " "  +  sig.equals(ZipLong.AED_SIG));	  throw    new    IllegalArgumentException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
785	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "] ");  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "] ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "] ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
786	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  null. ");  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  null. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  null. ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
787	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  not  supported. ");  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  not  supported. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "The  ZipShort  is  not  supported. ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
788	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLongPath());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLongPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLongPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
789	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getSize());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getSize());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getSize());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
790	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocation());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocation());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getLocation());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
791	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  10));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  10));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  10));	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    an    instance    of       "    +    ZipShort.getValue(LFH_BUF,    -1));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
792	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
793	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.ACCEPT_SIG))  {  return  null;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.ACCEPT_SIG))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.ACCEPT_SIG))  {  return  null;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
794	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  this;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  this;  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  this;  }	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
795	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.BED_SIG))  {  return  null;  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.BED_SIG))  {  return  null;  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.BED_SIG))  {  return  null;	  ||    sig.equals(ZipLong.AED_SIG))    {    return    null;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
796	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_BUF  is  not  supported  by: "  +  sig.equals(ZipLong.LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_BUF  is  not  supported  by: "  +  sig.equals(ZipLong.LFH_BUF));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_BUF  is  not  supported  by: "  +  sig.equals(ZipLong.LFH_BUF));	  throw    new    IllegalStateException(   "   ".equals(ZipLong.LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
797	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name:  ' "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name:  ' "  +  entryEncoding);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name:  ' "  +  entryEncoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    entryEncoding);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
798	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  4);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  4);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off  +  4);	  fileNameLen    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
799	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  -1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(sig,  -1);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(sig,  -1);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    -1);    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
800	[BUG]  [BUGGY]  return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF,  off));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF,  off));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF,  off));	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
801	[BUG]  [BUGGY]  return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF));	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
802	[BUG]  [BUGGY]  return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF),  sig.length());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF),  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(sig,  ZipShort.getValue(LFH_BUF),  sig.length());	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
803	[BUG]  [BUGGY]  return  new  ZipLong(SHORT_BUF,  sig.length());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(SHORT_BUF,  sig.length());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(SHORT_BUF,  sig.length());	  return    new    ZipLong(LFH_BUF,    sig.length());    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
804	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(sig.getKey()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(sig.getKey()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " ".equals(sig.getKey()));	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
805	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  ZipShort.getValue(LFH_BUF,  sig.getValue()));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  ZipShort.getValue(LFH_BUF,  sig.getValue()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  ZipShort.getValue(LFH_BUF,  sig.getValue()));	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
806	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  ZipShort.getValue(sig.getValue()));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  ZipShort.getValue(sig.getValue()));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  ZipShort.getValue(sig.getValue()));	  throw    new    IllegalStateException(   "   ".equals(sig.getValue()));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
807	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  1,  sig.length);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  1,  sig.length);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off  +  1,  sig.length);	  lastStoredEntry    =    ZipShort.getValue(LFH_BUF,    off);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
808	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.FH_SIG ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.FH_SIG ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.FH_SIG ");	  throw    new    IllegalArgumentException(   "The    ZipShort    is    not    a    valid    ZipLong.LFH_SIG   ");    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
809	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.getSize();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig  ==  null)?  0  :  sig.getSize();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.getSize();	  return(sig    ==    null)?    0    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
810	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_QUOTE))  {  skipCentralDirectory();  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_QUOTE))  {  skipCentralDirectory();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_QUOTE))  {  skipCentralDirectory();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
811	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_FIRST))  {  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ||  sig.equals(ZipLong.AED_FIRST))  {  skipRemainderOfArchive();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_FIRST))  {  skipRemainderOfArchive();	  ||    sig.equals(ZipLong.AED_SIG))    {    skipRemainderOfArchive();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
812	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  of  type ");  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  of  type ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  of  type ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
813	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got   ");  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got   ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ",  but  got   ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
814	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  from  the  ZipShort. ");  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  from  the  ZipShort. ");  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "  from  the  ZipShort. ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString()    +   "n   ");    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
815	[BUG]  [BUGGY]  return  new  ZipLong(sig,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(sig,  LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(sig,  LFH_BUF);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
816	[BUG]  [BUGGY]  return  new  ZipLong(sig.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(sig.length);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(sig.length);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
817	[BUG]  [BUGGY]  return  new  ZipLong(SHORT_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return  new  ZipLong(SHORT_BUF,  LFH_BUF);  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(SHORT_BUF,  LFH_BUF);	  return    new    ZipLong(LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
818	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getShortValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  return(sig!=  null)?  null  :  sig.getShortValue();  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getShortValue();	  return(sig    ==    null)?    null    :    sig.getShortValue();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
819	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.CFH_SIG));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.CFH_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.CFH_SIG));	  throw    new    IllegalStateException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
820	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.AED_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.AED_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.AED_SIG));	  throw    new    IllegalStateException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
821	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.FIRST_SIG));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.FIRST_SIG));  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " "  +  sig.equals(ZipLong.FIRST_SIG));	  throw    new    IllegalStateException(   "   ".equals(sig));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
822	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
823	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
824	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
825	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
826	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
827	[BUG]  [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa	  if(sig.equals(ZipLong.LFH_SIG))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
828	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongPath());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongPath());  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLongPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getPath());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
829	[BUG]  [BUGGY]  if(sig.equals(ZipLong.AED_SIG)||  sig.equals(ZipLong.BYTE_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {      [BUGGY]  if(sig.equals(ZipLong.AED_SIG)||  sig.equals(ZipLong.BYTE_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [BUGGY]      }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.AED_SIG)||  sig.equals(ZipLong.BYTE_SIG))  {  return  new  ZipLong(LFH_BUF);  }	  if(sig.equals(ZipLong.BYTE_SIG)||    sig.equals(ZipLong.AED_SIG))    {    return    new    ZipLong(LFH_BUF);    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
