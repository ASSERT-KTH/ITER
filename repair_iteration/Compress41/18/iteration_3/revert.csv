projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnthis;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>>null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(ZipLong.LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>>null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NULL:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.longValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.intValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.doubleValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.shortValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NULL:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,msg);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,pf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getLocalName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getClass());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLowerCase();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLong();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+cSize.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){skipRemainderOfArchive();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig[Delete]null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+WORD;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getPosition());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.FIRST_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.substring(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.FLUSH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toPlainString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+WORD;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getLongValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getShortValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.toString()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?Null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,-1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()-WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?Null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("TheZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.LFH_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",exception:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",expectedsize:"+WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",expectedsize:"+SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",expectedsize:"+max);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"bytescannotbedeprecated.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"bytesarenotvalid.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:"+encoding,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:"+zipEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("FailedtoparseZipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:"+encoding,msg);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("FailedtoparseZipfilename:"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.BYTE_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:'"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+cSize.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.shortValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.longValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?1:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0,sig.toString():sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?-1:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0L:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){skipRemainderOfArchive();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){skipCentralDirectory();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)&&sig.equals(ZipLong.AED_SIG)){skipRemainderOfArchive();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ALLOW_SIG)){skipRemainderOfArchive();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getAbsolutePath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getRawPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(!sig.equals(ZipLong.BYTE_SIG)||!sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){returnthis;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.equals(ZipLong.FLOAT_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.equals(ZipLong.CFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getClass());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getRawClass());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.AED_SIG)||sig.equals(ZipLong.LFH_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.FOR)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off),sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("ZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off)+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){skipCentralDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_QUOTE)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){hitCentralDirectory=true;skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_PREFIX)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_BYTE)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BYTE_SIG)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LP)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?1:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?-1:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?0:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0L:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getLongValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,WORD_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF),sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getKey(LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()+WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()*WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.substring(0,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()-SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,0));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,WORD));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,2));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("Failedtoparsezipfilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("Failedtoparse"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLongencoding:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG."+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseaZipLong.LFH_SIG."+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong'"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG",sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("".);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException(",");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,psg);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.AED_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.FIELD_NAME);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig,msg);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.DEFAULT_URL);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.DEFAULT_NAME);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,msg,e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("TheZipShortisnotavalidZipLong.LFH_SIG",sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLongisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("TheZipShortisnotavalidZipLong.LFH_SIG,");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("TheZipShortisnotavalidZipLong.LFH_SIG.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("TheZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("TheZipShortisnotavalidZipLong.LFH_SIG",e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalArgumentException("".);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalArgumentException(",");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("".equals(sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("Currententryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("Failedtoparse:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("",sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("",e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException(""));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.getKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?1:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?-1:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0L:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_BUF)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.SHORT_BUF)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF,skipRemainderOfArchive());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_BYTE)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BYTE_SIG)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(FH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,offset);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.intValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.doubleValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.toLong();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toUpperCase();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLongByteArray();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLong(0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLongBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"null");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"none");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",null");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",expectedsize:"+WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",expectedsize:"+WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"no-data");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+SHORT;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+SHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()*WORD;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getMessage(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_QUOTE)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_BYTE)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BYTE_SIG)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_BUF)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_FILE)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnull!");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGmustbenull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalStateException("ZipLong.LFH_SIGisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnull",sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnull",e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnull:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()*WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+SHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.longValue()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getLongKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException("".);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalArgumentException(",");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("ZipLong.LFH_SIG:"+sig.equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+ZipLong.LFH_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("ZipLong.LFH_SIGisnotsupportedby:"+sig.equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("ZipLong.LFH_SIGisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("ZipLong.LFH_SIGisnotsupportedby:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)&&sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ADJECT_SIG)){returnnewZipLong(LFH_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ALLOW_SIG)){returnnewZipLong(LFH_BUF);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,cSize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,msg);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,d);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,t);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getLongValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getFullValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getIntValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnthis;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){return;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BYTE_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FLOAT_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ACCEPT_SIZE)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getLocalName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getRawName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getLongKey();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FLUSH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FLUSH_SIG)){thrownewIllegalStateException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FLOAT_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FLUSH_SIG)){thrownewIllegalStateException("".);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FLUSH_SIG)){thrownewIllegalStateException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.doubleValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.doubleValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.doubleValue()+WORD;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString()*WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString()+SHORT_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.toString()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toString()+WORD_BUF,off;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig.length()-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig.length()+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(sig,LFH_BUF.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig.length()-2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig.length()-WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.LFH_BUF,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig.length()+2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.getValue(LFH_BUF,off+WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.getValue(LFH_BUF,off+SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.getValue(LFH_BUF,off+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.getValue(LFH_BUF,off+2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.parse(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.getValue(LFH_BUF,off+3);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+entryEncoding,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(entryEncoding!=null){thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(entryEncoding!=null){thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException("".);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){thrownewIllegalStateException(",");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.LFH_SIG,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.FLOAT_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.LFH_SIG,cSize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.LFH_SIG,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getAbsolutePath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getRawPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getLocalPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getKey()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>>null)?null:sig.getValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),ZipLong.LFH_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),ZipShort.AED_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),ZipLong.AED_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),zipFlag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),JSON_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0L:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?1:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?-1:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0,sig.toString():sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort.n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort.",sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort."+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()*WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.trim()+2;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.trim()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BYTE_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off+SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off+WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off+SHORT);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off+2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(FH_BUF,off+SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getLocalName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getQualifiedName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(Long.MAX_VALUE,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(ZipLong.LFH_BUF,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(DFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(ZipLong.LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,sig,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?LFH_BUF:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?NULL:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NUMBER:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?UNKNOWN:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NUM:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.toPlainString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toPlainString()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toPlainInt();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.toPlainString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?LFH_BUF:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?NULL:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NUMBER:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?UNKNOWN:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NUM:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getFloatValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getLastValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalStateException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalStateException("".);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalStateException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalStateException(",");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(sig.getKey()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseaZipLong.LFH_SIG."+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipLong.LFH_SIG."+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("Failedtoparsezipfilename:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong'"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLongencoding:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.NULL:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.None:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipShort:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.NaN:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.NONE:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipShort.NULL:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.LFH_SIG",sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("ZipLongisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.LFH_SIG,");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.LFH_SIG.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("ZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off+WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off+SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off+SHORT);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off+2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off-WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FIRST_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FIRST_SIG)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FIRST_SIG)){thrownewIllegalArgumentException("".);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FIRST_SIG)){thrownewIllegalArgumentException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.FIRST_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BYTE_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(Long.MAX_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.parse(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("".equals(sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Currententryisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("".getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString()+"'");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString()+"'.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse'"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getLongSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getFullSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getLongSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getSize()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getSize());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getRawPosition());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getLineNumber());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getLongPosition());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getMessage(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("Failedtoparsezipfilename:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("Failedtoparse"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseaZipLong.LFH_SIG."+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG."+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong'"+sig.getValue()+"'");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG",sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG",sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off+WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off+SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off+SHORT);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off-SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off-WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+pf,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig,pf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.BYTE_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+pf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.MIN_VALUE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",bounds:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",butgot:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",butgot:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getFullSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getSize()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG",sig.equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+ZipLong.LFH_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG",sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,msg);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,pf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,cSize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:"+entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?1:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0L:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?-1:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.trim()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BYTE_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ACCEPT_SIZE)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LP)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_FILE)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.SIZE)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+SHORT;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()*WORD;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig,e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.intValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.intValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.nextValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.substring(0,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?Null:sig.substring(0,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){continue;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(!sig.equals(ZipLong.BYTE_SIG)||!sig.equals(ZipLong.AED_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249while(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Context.checkState(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249while(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){continue;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipLong.LFH_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipLong.AED_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:"+sig,encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,TWO_DWORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig,SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.DEFAULT_ZIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,FH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipLong.LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getShortName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.NULL:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipShort.NULL:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.NaN:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.None:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipShort:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(ZipLong.LFH_SIG,sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(ZipLong.FLOAT_SIG,sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseaZipLong.LFH_SIG."+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.shortValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.shortValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.sintValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.shortValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(Long.MAX_VALUE,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.toLowerCase();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLowerCase()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.toLowerCase();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.toLowerCase();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.substring(2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.substring(0,sig.length()-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),zipFlag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+cSize.toString(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),ZipShort.AED_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),ZipShort.FIELD_NAME);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),ZipLong.LFH_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),ZipShort.EMPTY_STRING);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.equals(ZipLong.LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+ZipLong.LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_BUFisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_BUF.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(0,sig.length()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(2));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(0,sig.length()-1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(0,off));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(0,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(1),sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalStateException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalStateException("".);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){thrownewIllegalStateException(".");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LFH_SIG)){returnnewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,SKIP_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,SHORT_BUF),sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getKey()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+cSize.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+cSize,sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+cSize.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+cSize.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+cSize.substring(1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getClass());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getLineNumber());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("".equalsIgnoreCase(sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException(",");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("")
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("Failedtoparse:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?Null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?ZipShort:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.handleMissingException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sweepRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsStatementException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.handleMalformedException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsIOException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.handleMoreGuaranteed();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwInternal();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returns(sig==null)?null:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLong()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toLowerCase()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:newZipLong(sig.toLowerCase());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getLength();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(CFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Thread.currentThread().interrupt();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Thread.currentThread().setContextClassLoader(getNextEntry());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getLength();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(LFH_BUF,sig.length()+WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off+WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off+2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(Long.MAX_VALUE,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("InvalidZipSize:"+sig.equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_QUOTE)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.LP)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249allowSkip(ZipLong.LFH_SIG)){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249safeThan<ZipLong>sig=newZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249[Delete]
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249safeThan<ZipLong>sig=newSafeThan<ZipLong>(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249safeThan<ZipLong>sig=newSafeThan<ZipLong>();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249safely()){thrownewIllegalStateException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249allowSkip(ZipLong.LFH_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249safeName=ZipShort.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249safeName=ZipShort.getValue(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsIgnoredException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig.equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipLong.LFH_SIG"+sig.equals(ZipLong.LFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"atindex");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"bytes:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",expectedsize:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"bytesoftype");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"fromthefollowingline.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.equals(ZipLong.FLOAT_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(0,1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(1),WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.substring(0,JSON_SIZE));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getLineno());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249wires.put(ZipLong.BYTE_SIG,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwUnquotedException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.getPosition());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+pf.getName(),encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.NONE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.getPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(WRITE_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.shortValue()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returns(sig==null)?null:sig.substring(0,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NULL:sig.substring(0,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig[Delete]null)?null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,-1L);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(Long.MAX_VALUE,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsSertionError("msg.illegal.key");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGwasnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalStateException("ZipLong.LFH_SIGisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGdoesnotexist:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?Null:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?ZipShort:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.NUMBER:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getLong());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.LP)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),cSize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:",sig.getName(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249nisip=ZipShort.getValue(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsSwitch("msg.illegal.length");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249nisip=ZipShort.parse(zipFlag);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsSwitch("msg.illegal.key");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsSwitchThrough("msg.illegal.length");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipShort:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:".equals(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipShort:".equals(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipLong.LFH_SIG"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",null");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",onthesameline.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",ontherightline.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()-2);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.length()-10);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NULL:sig.toString()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?NULL:sig.substring(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipShort.DEFAULT_SKIP_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||!sig.equals(ZipLong.AED_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_BYTE)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:"+entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getLongValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off+3);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off+WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.parse(LFH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.substring(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort!");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnotavalidZipShort:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.longValue()+3;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.intValue()+WORD;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.intValue()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,0L);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.getLongValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off)+SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off+1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off+SHORT_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,off)+WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getKey());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),JSON_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsezipfilename:'"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)&&sig.equals(ZipLong.AED_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(!sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249while(sig.equals(ZipLong.BYTE_SIG)&&sig.equals(ZipLong.AED_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ADJECT_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Thread.currentThread().setContextClassLoader(getCrc());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Thread.currentThread().setContextClassLoader(getCurrentThreadContext());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.LFH_SIG"+zipFileName);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.longValue()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,LONG_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){skippeRemainderOfArchive();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ADJECT_SIG)){skipRemainderOfArchive();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.substring(0,WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.substring(0,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,1));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,-2));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,-3));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toPlainString()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(entryEncoding!=null){thrownewIllegalArgumentException("Failedtoparsezipfilename:"+entryEncoding);}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.separator.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(WRITE_BUF,sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LPH_BUF,off);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("TheZipShortisnotavalidZipLong.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalStateException("TheZipShortisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("TheZipLongisnotavalidZipLong.LFH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.doubleValue()+WORD_BUF;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("Failedtoparse:"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipShort:"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_SIG"+sig.getValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)&&sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ADJECT_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipLong.LFH_SIG."+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipLong.LFH_SIG",sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipLong.LFH_SIG"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipLong."+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:"+sig.getLong());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getText());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",expectedsize:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",expectedlength:"+WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",expectedlength:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"bytesoftype");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off+WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off+3);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off-SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_ARRAY)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException(",");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("")
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.SHORT_BUF)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||!sig.equals(ZipLong.AED_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_BYTE)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_PREFIX)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_KEY)){thrownewIllegalArgumentException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,cSize);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,DEFAULT_ZIP_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.LP);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.DEFAULT_SIZE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.SHORT);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.ZERO);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipLong.NONE:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipShort.NONE:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString()+",'");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString()+".'");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.toPlainBytes();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){skipRemainderOfArchive();}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.substring(0,sig.length()-WORD_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewIllegalStateException("ZipLong.LFH_SIGisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnull:'"+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_SIGisnull:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+",butgot:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.toString()+"fromthefollowingline.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?DEFAULT_SIG:sig.toString();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig>=null)?null:sig.doubleValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,ZipEncoding.UTF8);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparse:"+sig.getLongName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),ZipShort.NONE);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?ZipShort.NONE:sig.trim();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsIAE("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsIAE("msg.bad.internal",e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getName(),sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:'"+sig.toString()+"','");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",expected:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",butwasexpectingclosingthefilename.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipShort.getValue(LFH_BUF,off+11);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("Failedtoparsezipfilename:"+encoding,pf);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.getValue()*1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249aughtExceptionHandler.throwAsIgnoredIOException("");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ED_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.ALLOW_SIG)){continue;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ACCEPT_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ASSIGN)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.SCRIPT_BYTE_SIG)){
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparsefilename:'"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.DLH_SIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.DEFAULT_SIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,sig.length()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249[Delete]elseif(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AED_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249[Delete]elseif(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.ALLOW_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249[Delete]elseif(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.ASSIGN_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249[Delete]elseif(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AAED_SIG)){thrownewIllegalArgumentException("");}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249[Delete]elseif(sig.equals(ZipLong.LFH_SIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("FailedtoparseZipLong.LFH_BUF."+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?0:sig.substring(1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249newIllegalArgumentException("Failedtoparsefilename:'"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,sig.intValue());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+ZipShort.getValue(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+zipEncoding.equals(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+ZipShort.getValue(LFH_BUF,sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("FailedtoparseZipfilename:'"+encoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getName(),e.getMessage());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(WRITE_BUF,0);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("Failedtoparsezipfilename:");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalStateException("Currententryisnotsupported.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig=ZipLong.getValue(LFH_BUF,off+11);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig,SHORT_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig,LH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig,CFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig,ZipLong.LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig,ZipLong.CFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,SHORT_BUF,sig));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,short));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.toString(),e);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:n"+sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ThrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+ZipShort.toString(sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("").equals(sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("").equals(sig.toString());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+ZipLong.toString(sig.toString()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(ZipLong.DEFAULT_SIG);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(ZipLong.CFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.getName());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("".equals(ZipLong.LP_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249sig.equals(ZipLong.BYTE_SIG)||sig.equals(ZipLong.AED_SIG)){returnnull;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.substring(0,WORD);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.toString()+1;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.split("n");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?null:sig.split("u000");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnnewZipLong(LFH_BUF+1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SUB)){returnnewZipLong(LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.equals(ZipLong.FIRST_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException(""+sig.equals(ZipLong.AED_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("]");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("TheZipShortisnull.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249Throwables.thrownewIllegalArgumentException("TheZipShortisnotsupported.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getLongPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getSize());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsefilename:"+sig.getLocation());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotaninstanceof"+ZipShort.getValue(LFH_BUF,10));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.ACCEPT_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_SIG)){returnthis;}
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.BED_SIG)){returnnull;
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("ZipLong.LFH_BUFisnotsupportedby:"+sig.equals(ZipLong.LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparsezipfilename:'"+entryEncoding);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249fileNameLen=ZipShort.getValue(LFH_BUF,off+4);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(sig,-1);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(sig,ZipShort.getValue(LFH_BUF,off));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(sig,ZipShort.getValue(LFH_BUF));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(sig,ZipShort.getValue(LFH_BUF),sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(SHORT_BUF,sig.length());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException("".equals(sig.getKey()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+ZipShort.getValue(LFH_BUF,sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+ZipShort.getValue(sig.getValue()));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249lastStoredEntry=ZipShort.getValue(LFH_BUF,off+1,sig.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("TheZipShortisnotavalidZipLong.FH_SIG");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig==null)?0:sig.getSize();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_QUOTE)){skipCentralDirectory();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249||sig.equals(ZipLong.AED_FIRST)){skipRemainderOfArchive();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"oftype");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+",butgot");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.toString()+"fromtheZipShort.");
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(sig,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(sig.length);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249returnnewZipLong(SHORT_BUF,LFH_BUF);
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249return(sig!=null)?null:sig.getShortValue();
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.equals(ZipLong.CFH_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.equals(ZipLong.AED_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalStateException(""+sig.equals(ZipLong.FIRST_SIG));
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249thrownewIllegalArgumentException("Failedtoparse:"+sig.getLongPath());
projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java249if(sig.equals(ZipLong.AED_SIG)||sig.equals(ZipLong.BYTE_SIG)){returnnewZipLong(LFH_BUF);}
