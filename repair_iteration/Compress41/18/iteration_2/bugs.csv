bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return(sig  >=  null)?  null  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  >=  null)?  null  :  sig.trim();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >=  null)?  null  :  sig.trim();	  return(sig!=    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  return(sig!=  null)?  0  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig!=  null)?  0  :  sig.trim();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  0  :  sig.trim();	  return(sig!=    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
3	[BUG]  [BUGGY]  return(sig  >>  null)?  null  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  >>  null)?  null  :  sig.trim();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >>  null)?  null  :  sig.trim();	  return(sig!=    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(ZipLong.LFH_SIG));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " ".equals(ZipLong.LFH_SIG));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(sig));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(sig));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " ".equals(sig));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(sig.getValue()));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(sig.getValue()));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " ".equals(sig.getValue()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(sig.toString()));  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(sig.toString()));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " ".equals(sig.toString()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(ZipLong.LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalStateException( " ".equals(ZipLong.LFH_BUF));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " ".equals(ZipLong.LFH_BUF));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getKey();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig!=  null)?  null  :  sig.getKey();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getKey();	  return(sig!=    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  return(sig  >=  null)?  null  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  >=  null)?  null  :  sig.getValue();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >=  null)?  null  :  sig.getValue();	  return(sig!=    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getKey();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.getKey();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getKey();	  return(sig!=    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  return(sig  >=  null)?  null  :  sig.toString();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  >=  null)?  null  :  sig.toString();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >=  null)?  null  :  sig.toString();	  return(sig!=    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  return(sig  >>  null)?  null  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  >>  null)?  null  :  sig.toString();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  >>  null)?  null  :  sig.toString();	  return(sig!=    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  return(sig!=  null)?  0  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig!=  null)?  0  :  sig.toString();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  0  :  sig.toString();	  return(sig!=    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.getValue()  +  1;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getValue()  +  1;	  return(sig    ==    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  0  :  sig.getValue();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.getValue();	  return(sig    ==    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  +  1;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toString()  +  1;	  return(sig    ==    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.toString();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  0  :  sig.toString();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.toString();	  return(sig    ==    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  return(sig  ==  null)?  NULL  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  NULL  :  sig.toString();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NULL  :  sig.toString();	  return(sig    ==    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.longValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig!=  null)?  null  :  sig.longValue();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.longValue();	  return(sig    ==    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.intValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.intValue();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.intValue();	  return(sig    ==    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
23	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  1;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  +  1;	  return(sig    ==    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.doubleValue();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.doubleValue();	  return(sig    ==    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
25	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.shortValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.shortValue();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.shortValue();	  return(sig    ==    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
26	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.LFH_SIG));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(ZipLong.LFH_SIG));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(ZipLong.LFH_SIG));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(sig));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(sig));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(sig));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(sig.getValue()));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(sig.getValue()));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(sig.getValue()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(sig.toString()));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(sig.toString()));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ".equals(sig.toString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  1;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim()  +  1;	  return(sig    ==    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
32	[BUG]  [BUGGY]  return(sig  ==  null)?  0  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  0  :  sig.trim();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  0  :  sig.trim();	  return(sig    ==    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
33	[BUG]  [BUGGY]  return(sig  ==  null)?  NULL  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  NULL  :  sig.trim();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  NULL  :  sig.trim();	  return(sig    ==    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  sig);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  sig);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  msg);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  pf);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLocalName());  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLocalName());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getLocalName());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
43	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getKey());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
44	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getClass());  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getClass());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getClass());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
47	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getName());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString()  + "n ");	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  fileNameLen  =  ZipShort.getValue(LFH_BUF,  off);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	fileNameLen  =  ZipShort.getValue(LFH_BUF,  off);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  null;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  null;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  sig  =  ZipLong.getValue(LFH_BUF,  off);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipLong.getValue(LFH_BUF,  off);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
57	[BUG]  [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  ||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
58	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toLowerCase();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.toLowerCase();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toLowerCase();	  return    this;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toLong();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.toLong();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toLong();	  return    this;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + "n ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  cSize.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.substring(1));	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	Throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
65	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  SKIP_BUF);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding,  SKIP_BUF);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  entryEncoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  skipRemainderOfArchive();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
68	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  new  ZipLong(LFH_BUF);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.BYTE_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  return(sig  [Delete]  null)?  null  :  sig.toString();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  [Delete]  null)?  null  :  sig.toString();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  [Delete]  null)?  null  :  sig.toString();	  return(sig!=    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(1);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(1);	  return(sig    ==    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
75	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  WORD_BUF;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
76	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  WORD;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.trim()  +  WORD;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim()  +  WORD;	  return(sig    ==    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
77	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.getName());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
78	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPath());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
79	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPosition());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPosition());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getPosition());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  return  null;  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.FIRST_SIG))  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.substring(1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig!=  null)?  null  :  sig.substring(1);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.substring(1);	  return(sig!=    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getValue()  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig!=  null)?  null  :  sig.getValue()  +  1;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getValue()  +  1;	  return(sig!=    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
89	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.AED_SIG))  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
90	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.LFH_SIG))  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
91	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.ALLOW_SIG))  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
92	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	if(sig.equals(ZipLong.LFH_SIG)||  sig.equals(ZipLong.FLUSH_SIG))  {  throw  new  IllegalStateException( " ");  }	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
93	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.toString()  +  WORD_BUF;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toString()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
94	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainString();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.toPlainString();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toPlainString();	  return(sig    ==    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
95	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  WORD_BUF;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  WORD_BUF;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  +  WORD_BUF;	  return(sig    ==    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
96	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  WORD;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue()  +  WORD;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue()  +  WORD;	  return(sig    ==    null)?    null    :    sig.longValue();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
97	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
98	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getLongValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.getLongValue();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getLongValue();	  return(sig    ==    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
99	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getShortValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.getShortValue();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getShortValue();	  return(sig    ==    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
100	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getSize();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.getSize();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getSize();	  return(sig    ==    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
101	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.toString()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig!=  null)?  null  :  sig.toString()  +  1;  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.toString()  +  1;	  return(sig!=    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  return(sig  ==  null)?  Null  :  sig.toString();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  Null  :  sig.toString();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  Null  :  sig.toString();	  return(sig!=    null)?    null    :    sig.toString();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
103	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  Zip  file  name: "  +  encoding);	  throw    new    IllegalArgumentException(   "Failed    to    parse    zip    file    name:   "    +    encoding);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
104	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getSize();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig!=  null)?  null  :  sig.getSize();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getSize();	  return(sig!=    null)?    null    :    sig.getValue();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
105	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  SHORT_BUF));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
106	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
107	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  off));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -1));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -1));  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "The  ZipShort  is  not  an  instance  of   "  +  ZipShort.getValue(LFH_BUF,  -1));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  sig  =  ZipShort.getValue(LFH_BUF,  off);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	sig  =  ZipShort.getValue(LFH_BUF,  off);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
111	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  off);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
112	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  sig);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  sig);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  sig);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  -1);  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  -1);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  -1);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
115	[BUG]  [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  0);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	lastStoredEntry  =  ZipShort.getValue(LFH_BUF,  0);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
116	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  WORD_BUF);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  WORD_BUF);	  return(sig    ==    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
117	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  1);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.substring(0,  sig.length()  -  1);	  return(sig    ==    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
118	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse:  ' "  +  sig.toString());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
119	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ", ");  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ", ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString()  + ", ");	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
120	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString(),  e);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
121	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.getValue());	  throw    new    IllegalArgumentException(   "Failed    to    parse    file    name:   "    +    sig.toString());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
122	[BUG]  [BUGGY]  return(sig  ==  null)?  Null  :  sig.trim();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return(sig  ==  null)?  Null  :  sig.trim();  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  Null  :  sig.trim();	  return(sig!=    null)?    null    :    sig.trim();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
123	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "The  ZipShort  is  not  a  valid  ZipLong.LFH_SIG ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
124	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return  new  ZipLong(LFH_BUF);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
125	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  null. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
126	[BUG]  [BUGGY]  return  new  ZipLong(ZipLong.LFH_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return  new  ZipLong(ZipLong.LFH_SIG);  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(ZipLong.LFH_SIG);	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
127	[BUG]  [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length());  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  return  new  ZipLong(LFH_BUF,  sig.length());  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  new  ZipLong(LFH_BUF,  sig.length());	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
128	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {    [BUGGY]  throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");  [BUGGY]    }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( "ZipLong.LFH_SIG  is  not  a  valid  ZipShort. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
