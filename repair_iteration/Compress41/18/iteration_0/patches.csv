bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this;  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  return  this;  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return  this;	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( " ");	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalStateException( " ");	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.toString());	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  file  name: "  +  sig.toString());	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  sig.getName());	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	throw  new  IllegalArgumentException( "Failed  to  parse  zip  file  name: "  +  encoding);	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]    [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	  	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
9	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  return(sig  ==  null)?  null  :  sig.getValue();  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.getValue();	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.getValue();  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  return(sig!=  null)?  null  :  sig.getValue();  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.getValue();	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.toString();  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  return(sig  ==  null)?  null  :  sig.toString();  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.toString();	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
12	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.toString();  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  return(sig!=  null)?  null  :  sig.toString();  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.toString();	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
13	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim();  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  return(sig  ==  null)?  null  :  sig.trim();  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.trim();	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
14	[BUG]  [BUGGY]  return(sig!=  null)?  null  :  sig.trim();  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  return(sig!=  null)?  null  :  sig.trim();  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig!=  null)?  null  :  sig.trim();	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
15	[BUG]  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue();  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  }  catch  (final  EOFException  e)  {  return  null;  }  final  ZipLong  sig  =  new  ZipLong(LFH_BUF);  if  (sig.equals(ZipLong.CFH_SIG)  ||  sig.equals(ZipLong.AED_SIG))  {  hitCentralDirectory  =  true;  skipRemainderOfArchive();  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  [BUGGY]  return(sig  ==  null)?  null  :  sig.longValue();  [BUGGY]  }  int  off  =  WORD;  current  =  new  CurrentEntry();  final  int  versionMadeBy  =  ZipShort.getValue(LFH_BUF,  off);  off  +=  SHORT;  current.entry.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  GeneralPurposeBit  gpFlag  =  GeneralPurposeBit.parse(LFH_BUF,  off);  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  GeneralPurposeBit  gpFlag  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  entriesRead  extraLen  fileNameLen  off  versionMadeBy  long  TWO_EXP_32  bytesRead  bytesReadFromStream  max  pos  size  time  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  extraData  fileName  CurrentEntry  current  ZipLong  cSize  sig  size  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  EOFException  e  ZipArchiveEntry  entry  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.4472135954999579	249	249	2	replace	return(sig  ==  null)?  null  :  sig.longValue();	return  null;  	non-compiled	[CE]  illegal  start  of  type	35	None	replace
