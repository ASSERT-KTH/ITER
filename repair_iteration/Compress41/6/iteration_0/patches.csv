bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(SHORT_BUF);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(SHORT_BUF);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(SHORT_BUF);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(TWO_DWORD_BUF);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(TWO_DWORD_BUF);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.SHORT_BUF);  [CE]  illegal  start  of  type  [FE]        AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.SHORT_BUF);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.SHORT_BUF);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DECEMBER);  [CE]  illegal  start  of  type  [FE]          AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DECEMBER);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DECEMBER);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT);  [CE]  illegal  start  of  type  [FE]              AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DEFAULT);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.valueOf(sHORT_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.valueOf(sHORT_BUF));  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.valueOf(sHORT_BUF));	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]    [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	  	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(SKIP_BUF);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(SKIP_BUF);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(SKIP_BUF);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.ZERO);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.ZERO);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.ZERO);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(sHORT_BUF);  [CE]  illegal  start  of  type  [FE]    AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(sHORT_BUF);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(sHORT_BUF);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  [BUGGY]  ZipLong  val  =  new  ZipLong(ZipLong.DD);  [BUGGY]  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);  val  =  new  ZipLong(WORD_BUF);  }  current.entry.setCrc(val.getValue());      [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	730	730	2	replace	ZipLong  val  =  new  ZipLong(ZipLong.DD);	ZipLong  val  =  new  ZipLong(WORD_BUF);  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
