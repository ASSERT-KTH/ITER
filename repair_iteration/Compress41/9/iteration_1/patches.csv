bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  val);	  val    =    new    ZipLong(ZipLong.DL_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DL_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DL_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE_SIG);	  val    =    new    ZipLong(ZipLong.DL_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(TWO_EXP_32);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_EXP_32);	  val    =    new    ZipLong(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(WRITE_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WRITE_BUF);	  val    =    new    ZipLong(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG);	  val    =    new    ZipLong(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  0);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  0);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF  +  1);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  1);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SKIP_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  val);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG  +  1);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  val  =  new  ZipLong(DECEMBER_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DECEMBER_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DECEMBER_SIG);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG,  val);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue());  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.getValue());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG);  val.setValue(val.getValue());  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  val.setValue(val.getValue());	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
35	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  true);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  true);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  true);	  val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  SHORT_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  SHORT_BUF);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  1);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  0);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  0);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  0);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  1);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.entry);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.entry);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  val);	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
44	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  0);	  val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  1;  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  1;	  val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE);	  val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  0);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  0);	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  1;  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG)+  1;	  val    =    new    ZipLong(ZipLong.DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  LFH_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  LFH_BUF);	  val    =    new    ZipLong(SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  val  =  new  ZipLong(DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DD_SIG  +  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DD_SIG  +  1);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  val  =  new  ZipLong(DS_SIG);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DS_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DS_SIG);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  val  =  new  ZipLong(JAR_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(JAR_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(JAR_SIG);	  val    =    new    ZipLong(DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  -1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  -1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  -1);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
57	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG);	  val    =    new    ZipLong(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
59	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  val;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  val;  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry  =  val;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  0);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  0);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  0);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(val));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(val));  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(val));	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
64	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  0);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  0);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  0);	  val    =    new    ZipLong(ZipLong.DL_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
65	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  1;  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG)+  1;	  val    =    new    ZipLong(ZipLong.DL_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
66	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  -1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  -1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  -1);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(val));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(val));  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(val));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  1);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  1);	  val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
69	[BUG]  [BUGGY]  val  =  new  ZipLong(FIRST_BUF);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(FIRST_BUF);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(FIRST_BUF);	  val    =    new    ZipLong(SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  val);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  val);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF,  val);	  val    =    new    ZipLong(TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
71	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DSK_SIG);	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  1;  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)+  1;	  val    =    new    ZipLong(ZipLong.SDK_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  return;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  return;  }  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(zipLong.DD_SIG.equals(val))  {  return;  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
76	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  writeFully(val);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  writeFully(val);  }  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(zipLong.DD_SIG.equals(val))  {  writeFully(val);  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  readFully(val);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  readFully(val);  }  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(zipLong.DD_SIG.equals(val))  {  readFully(val);  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
78	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG  [CE]  illegal  start  of  type  [FE]                            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  if(zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
79	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length);  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length);	  val    =    new    ZipLong(ZipLong.SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);    [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  1;  [BUGGY]    }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  1;	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
