bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  2);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
2	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  3);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
3	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  4);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
4	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  16);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  16);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  16);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
5	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  10);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  10);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  10);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
6	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.entry.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.entry.getValue());	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
7	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.fileName);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.fileName);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.fileName);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
8	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.bytes);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.bytes);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.bytes);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
9	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.getValue());	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
10	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.value);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.value);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.value);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
11	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.in);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.in);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.in);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
12	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  val.length);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
13	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val.intValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val.intValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  val.intValue());	  val    =    new    ZipLong(ZipLong.SDK_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
14	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  val  +  1);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
15	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  val.getValue());	  val    =    new    ZipLong(ZipLong.SDK_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
16	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHARP_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHARP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHARP_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
18	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG  +  1);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
19	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD_SIG,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WORD_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WORD_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WORD_BUF));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
21	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WRITE_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WRITE_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WRITE_BUF));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
22	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WORD_BUF),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WORD_BUF),  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(WORD_BUF),  val);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
23	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_SIZE));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_SIZE));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_SIZE));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
24	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(DECEMBER_SIG));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(DECEMBER_SIG));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(DECEMBER_SIG));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
25	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_SIG));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_SIG));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
26	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
27	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  DD);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  DD);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  DD);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
28	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  ZipLong.SDK_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  ZipLong.SDK_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  ZipLong.SDK_SIG);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
29	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
30	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  2;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG)+  2;	  val    =    new    ZipLong(ZipLong.DS_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
31	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  4;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG)+  4;	  val    =    new    ZipLong(ZipLong.DS_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
32	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  3;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  3;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG)+  3;	  val    =    new    ZipLong(ZipLong.DS_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
33	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)/  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)/  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG)/  1;	  val    =    new    ZipLong(ZipLong.DS_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
34	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  5;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG)+  5;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG)+  5;	  val    =    new    ZipLong(ZipLong.DS_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
35	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0,  val.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  0,  val.length);	  val    =    new    ZipLong(ZipLong.DD_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
36	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  +  1);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val.length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
37	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  -  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  -  1);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val.length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
38	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  +  2);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val.length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
39	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  -  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  -  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  -  2);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val.length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
40	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  *  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  *  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length  *  2);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val.length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
41	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  TWO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  TWO_DWORD_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  TWO_DWORD_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
42	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  SHORT_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  1);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  4);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  4);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
46	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  2);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  10);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  10);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  10);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  3);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  3);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  16);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  16);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  16);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  12);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  12);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  12);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
51	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DS_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
52	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DS_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
53	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  DD);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  DD);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  DD);	  val    =    new    ZipLong(ZipLong.DS_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
54	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  *  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  *  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  *  1);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
55	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis())+  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis())+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis())+  1;	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
56	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  *  1000);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  *  1000);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  *  1000);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
57	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  2);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
58	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.length);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
59	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.intValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.intValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.intValue());	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val  +  1);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
61	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val.getValue());	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	current.entry  =  new  ZipLong(ZipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
63	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG,  val);	  readFully(ZipLong.DD_SIG);    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
64	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
65	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  WORD_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  WORD_BUF);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
66	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  SKIP_BUF);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
67	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  10);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  10);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  10);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
68	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  16);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  16);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  16);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
69	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  DATE_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  DATE_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  DATE_BUF);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
70	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER);	  val    =    new    ZipLong(ZipLong.DOUBLE);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
71	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DOUBLE);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
72	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE,  val);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE,  val);	  val    =    new    ZipLong(ZipLong.DOUBLE);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
73	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SIG);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SIG);	  val    =    new    ZipLong(ZipLong.DOUBLE);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
74	[BUG]  [BUGGY]  writeFully(val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  writeFully(val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	writeFully(val);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
75	[BUG]  [BUGGY]  readFully(val);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(val);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
76	[BUG]  [BUGGY]  Writer  val  =  new  Writer(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  Writer  val  =  new  Writer(zipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	Writer  val  =  new  Writer(zipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
77	[BUG]  [BUGGY]  WriteFully(val);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  WriteFully(val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	WriteFully(val);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
78	[BUG]  [BUGGY]  Writer  val  =  writeFully(val);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  Writer  val  =  writeFully(val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	Writer  val  =  writeFully(val);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
79	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
80	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  DD);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  DD);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  DD);	  val    =    new    ZipLong(ZipLong.DL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
83	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
84	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  ZipLong.DECIMAL_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  ZipLong.DECIMAL_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  ZipLong.DECIMAL_SIG);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  DD);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  DD);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  DD);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
86	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.val.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  current.val.setValue(val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.val.setValue(val.getValue());	  readFully(ZipLong.DD_SIG);    val.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
87	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_EXP_32);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_EXP_32);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
88	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
89	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  TWO_DWORD_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  false);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  false);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
91	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  null);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  null);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
92	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  0,  true);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  0,  true);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
93	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  true,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  true,  false);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  true,  false);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
94	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  1);	  val    =    new    ZipLong(ZipLong.DL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
95	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  10);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  10);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  10);	  val    =    new    ZipLong(ZipLong.DL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
96	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  0,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  0,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  0,  val.length);	  val    =    new    ZipLong(ZipLong.DL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
97	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  2);	  val    =    new    ZipLong(ZipLong.DL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
98	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  4);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  4);	  val    =    new    ZipLong(ZipLong.DL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
99	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  3);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  3);	  val    =    new    ZipLong(ZipLong.DL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
100	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  16);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  16);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  16);	  val    =    new    ZipLong(ZipLong.DL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
101	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  2;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)+  2;	  val    =    new    ZipLong(ZipLong.SDK_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
102	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  4;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)+  4;	  val    =    new    ZipLong(ZipLong.SDK_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
103	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  3;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  3;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)+  3;	  val    =    new    ZipLong(ZipLong.SDK_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
104	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)/  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)/  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)/  1;	  val    =    new    ZipLong(ZipLong.SDK_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
105	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  5;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  5;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)+  5;	  val    =    new    ZipLong(ZipLong.SDK_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
106	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  10;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  10;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)+  10;	  val    =    new    ZipLong(ZipLong.SDK_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
107	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  1);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
108	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  10);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  10);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  10);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
109	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  2);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
110	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  4);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  4);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
111	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  0,  val.length);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  0,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  0,  val.length);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
112	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  3);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  3);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
113	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  32);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  32);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  32);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
114	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
115	[BUG]  [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
116	[BUG]  [BUGGY]  ||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
117	[BUG]  [BUGGY]  ||  val.equals(ZipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  val.equals(ZipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  val.equals(ZipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
118	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  10);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  10);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  10);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
119	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  4);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  4);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
120	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  2);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  2);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
121	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  val.length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  val.length);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
122	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  3);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  3);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
123	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  16);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  16);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  16);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
124	[BUG]  [BUGGY]  if(val.equals(zipLong.DD_SIG))  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(val.equals(zipLong.DD_SIG))  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(val.equals(zipLong.DD_SIG))  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
125	[BUG]  [BUGGY]  ||  val.equals(zipLong.DD_SIG))  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  val.equals(zipLong.DD_SIG))  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  val.equals(zipLong.DD_SIG))  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
126	[BUG]  [BUGGY]  val.setValue(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val.setValue(zipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val.setValue(zipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
127	[BUG]  [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  return;  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  zipLong.DD_SIG.equals(val))  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
128	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  return;  }  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(ZipLong.DD_SIG.equals(val))  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(ZipLong.DD_SIG.equals(val))  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
129	[BUG]  [BUGGY]  val.setValue(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val.setValue(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val.setValue(ZipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
130	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DSK_SIG,  val);	  val    =    new    ZipLong(ZipLong.DSK_SIG);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
131	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DSK_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DSK_SIG);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
132	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DSK_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DSK_SIG);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
133	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  val.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val,  val.getValue());	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
134	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val,  current.entry.getValue());	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
135	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  current.entry);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val,  current.entry);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
136	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val,  1);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
137	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val,  true);  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val,  true);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val,  true);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
138	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG,  val);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
139	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG  +  1);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
140	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue()  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue()  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.getValue()  +  1);	  readFully(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
141	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.getKey());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.getKey());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.getKey());	  readFully(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
142	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue(),  current.entry);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.getValue(),  current.entry);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.getValue(),  current.entry);	  readFully(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
143	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.toString());  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.toString());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.toString());	  readFully(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
144	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WORD_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WORD_BUF));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
145	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WORD_BUF),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WORD_BUF),  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WORD_BUF),  val);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
146	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WRITE_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WRITE_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(WRITE_BUF));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
147	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(BYTE_EXP_32));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(BYTE_EXP_32));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(BYTE_EXP_32));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
148	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(VAR_SIZE));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(VAR_SIZE));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(VAR_SIZE));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
149	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.length);	  readFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
150	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  2);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
151	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  3);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  3);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
152	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  4);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG  +  4);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
153	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  val.length);	  val    =    new    ZipLong(ZipLong.DL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
154	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val.intValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val.intValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  val.intValue());	  val    =    new    ZipLong(ZipLong.DL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
155	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  val.getValue());	  val    =    new    ZipLong(ZipLong.DL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
156	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  val  +  1);	  val    =    new    ZipLong(ZipLong.DL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
157	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  val);	  val    =    new    ZipLong(ZipLong.DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
158	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
159	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
160	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  1);	  val    =    new    ZipLong(ZipLong.DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
161	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  current.entry.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  current.entry.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  current.entry.getValue());	  val    =    new    ZipLong(ZipLong.DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
162	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  0);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  0);	  val    =    new    ZipLong(ZipLong.DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
163	[BUG]  [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
164	[BUG]  [BUGGY]  ||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
165	[BUG]  [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  zipLong.DD_SIG.equals(val))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
166	[BUG]  [BUGGY]  ||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	||  val.equals(zipLong.DD_SIG))  {  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
167	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG  +  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG  +  2);	  val    =    new    ZipLong(ZipLong.DL_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
168	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG  +  3);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG  +  3);	  val    =    new    ZipLong(ZipLong.DL_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
169	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG  +  4);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG  +  4);	  val    =    new    ZipLong(ZipLong.DL_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
170	[BUG]  [BUGGY]  val  =  new  ZipLong(DD_SIG  +  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DD_SIG  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DD_SIG  +  2);	  val    =    new    ZipLong(DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
171	[BUG]  [BUGGY]  val  =  new  ZipLong(DD_SIG  +  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DD_SIG  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DD_SIG  +  3);	  val    =    new    ZipLong(DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
172	[BUG]  [BUGGY]  val  =  new  ZipLong(DD_SIG  +  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DD_SIG  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DD_SIG  +  4);	  val    =    new    ZipLong(DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
173	[BUG]  [BUGGY]  val  =  new  ZipLong(SKIP_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SKIP_BUF,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SKIP_BUF,  SHORT_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
174	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
175	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  WORD_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  WORD_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  WORD_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
176	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DATE_SIG);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DATE_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DATE_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DATE_SIG);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
177	[BUG]  [BUGGY]  readFully(ZipLong.DATE_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DATE_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DATE_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DATE_SIG);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
178	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG,  val);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG,  val);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DATE_SIG);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
179	[BUG]  [BUGGY]  readFully(ZipLong.DATE_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DATE_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DATE_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DATE_SIG);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
180	[BUG]  [BUGGY]  val  =  new  ZipLong(FIRST_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(FIRST_BUF,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(FIRST_BUF,  SHORT_BUF);	  val    =    new    ZipLong(FIRST_BUF);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
181	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  2;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG)+  2;	  val    =    new    ZipLong(ZipLong.DL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
182	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  4;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  4;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG)+  4;	  val    =    new    ZipLong(ZipLong.DL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
183	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  3;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  3;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG)+  3;	  val    =    new    ZipLong(ZipLong.DL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
184	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)/  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)/  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG)/  1;	  val    =    new    ZipLong(ZipLong.DL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
185	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  5;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  5;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG)+  5;	  val    =    new    ZipLong(ZipLong.DL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
186	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  10;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  10;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG)+  10;	  val    =    new    ZipLong(ZipLong.DL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
187	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  2;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  2;	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
188	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  4;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  4;	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
189	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  3;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  3;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  3;	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
190	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)/  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)/  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG)/  1;	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
191	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  5;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  5;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  5;	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
192	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  10;  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  10;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG)+  10;	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
193	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  2;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  2;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
194	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  4;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  4;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  4;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
195	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  3;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  3;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  3;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
196	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)/  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)/  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)/  1;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
197	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  5;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  5;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  5;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
198	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  10;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  10;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  10;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
199	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getKey());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getKey());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getKey());	  readFully(ZipLong.DD_SIG);    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
200	[BUG]  [BUGGY]  current.entry.setCrc(val.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  current.entry.setCrc(val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	current.entry.setCrc(val.getValue());	  readFully(ZipLong.DD_SIG);    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
201	[BUG]  [BUGGY]  val  =  new  ZipLong(LFH_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(LFH_BUF,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(LFH_BUF,  SHORT_BUF);	  val    =    new    ZipLong(SHORT_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
202	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  LFH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  LFH_BUF);	  val    =    new    ZipLong(SHORT_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
203	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WORD_BUF,  LFH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WORD_BUF,  LFH_BUF);	  val    =    new    ZipLong(SHORT_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
204	[BUG]  [BUGGY]  val  =  new  ZipLong(DECEMBER_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DECEMBER_SIG,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DECEMBER_SIG,  SHORT_BUF);	  val    =    new    ZipLong(DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
205	[BUG]  [BUGGY]  val  =  new  ZipLong(DECEMBER_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DECEMBER_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DECEMBER_SIG  +  1);	  val    =    new    ZipLong(DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
206	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF,  SHORT_BUF);	  val    =    new    ZipLong(TWO_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
207	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  val);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  val);	  val    =    new    ZipLong(TWO_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
208	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF,  val);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WORD_BUF,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WORD_BUF,  val);	  val    =    new    ZipLong(TWO_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
209	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_EXP_32,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_EXP_32,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_EXP_32,  val);	  val    =    new    ZipLong(TWO_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
210	[BUG]  [BUGGY]  ReadFully(val);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ReadFully(val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	ReadFully(val);	  if(zipLong.DD_SIG.equals(val))    {    readFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
211	[BUG]  [BUGGY]  val  =  readFully(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  readFully(zipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  readFully(zipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
212	[BUG]  [BUGGY]  val  =  readFully(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  readFully(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  readFully(ZipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
213	[BUG]  [BUGGY]  Reader  reader  =  new  Reader(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  Reader  reader  =  new  Reader(zipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	Reader  reader  =  new  Reader(zipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
214	[BUG]  [BUGGY]  val  =  new  ZipLong(JAR_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(JAR_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(JAR_SIG  +  1);	  val    =    new    ZipLong(JAR_SIG);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
215	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val.length);	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
216	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.intValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.intValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val.intValue());	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
217	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val  +  1);	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
218	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val.getValue());	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
219	[BUG]  [BUGGY]  current.entry.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  current.entry.setValue(val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	current.entry.setValue(val.getValue());	  readFully(ZipLong.DD_SIG);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
220	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  2);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    -1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
221	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  4);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    -1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
222	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  3);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  3);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    -1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
223	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  32);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  32);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  32);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    -1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
224	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  val.length);	  val    =    new    ZipLong(ZipLong.DS_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
225	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  val  +  1);	  val    =    new    ZipLong(ZipLong.DS_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
226	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val.intValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val.intValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  val.intValue());	  val    =    new    ZipLong(ZipLong.DS_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
227	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  val.getValue());	  val    =    new    ZipLong(ZipLong.DS_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
228	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  2);	  val    =    new    ZipLong(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
229	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  3);	  val    =    new    ZipLong(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
230	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  4);	  val    =    new    ZipLong(ZipLong.DD_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
231	[BUG]  [BUGGY]  current.entry  =  val;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  current.entry  =  val;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	current.entry  =  val;	  readFully(ZipLong.DD_SIG);    current.entry    =    val;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
232	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val);  current.entry  =  val;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val);  current.entry  =  val;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val);  current.entry  =  val;	  readFully(ZipLong.DD_SIG);    current.entry    =    val;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
233	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG);  current.entry  =  val;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ReadFully(ZipLong.DD_SIG);  current.entry  =  val;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	ReadFully(ZipLong.DD_SIG);  current.entry  =  val;	  readFully(ZipLong.DD_SIG);    current.entry    =    val;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
234	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
235	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF  +  1);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
236	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF,  current.entry);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF,  current.entry);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SHORT_BUF,  current.entry);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
237	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  csize);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  csize);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  csize);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    max);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
238	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max  +  1);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    max);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
239	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  zsize);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  zsize);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  zsize);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    max);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
240	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  MAX_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  MAX_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  MAX_SIG);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    max);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
241	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max,  current.entry);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max,  current.entry);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  max,  current.entry);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    max);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
242	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  DD);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
243	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  z);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  z);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  z);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
244	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF,  SKIP_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
245	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  SHORT_BUF  +  1);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
246	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  0);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  0);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    -1);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
247	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF  +  2);	  val    =    new    ZipLong(ZipLong.SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
248	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val  +  1);	  val    =    new    ZipLong(ZipLong.SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
249	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  3);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF  +  3);	  val    =    new    ZipLong(ZipLong.SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
250	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  4);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF  +  4);	  val    =    new    ZipLong(ZipLong.SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
251	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  new  ZipLong(ZipLong.DD_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG,  val);	  new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
252	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG,  val.getValue());  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  new  ZipLong(ZipLong.DD_SIG,  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG,  val.getValue());	  new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
253	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  new  ZipLong(ZipLong.DD_SIG));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG));	  new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
254	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  new  ZipLong(ZipLong.DD_SIG,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG,  val.length);	  new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
255	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_EXP_32  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_EXP_32  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_EXP_32  +  1);	  val    =    new    ZipLong(TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
256	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_EXP_64);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_EXP_64);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_EXP_64);	  val    =    new    ZipLong(TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
257	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  false);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  false);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
258	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  null);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  null);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  null);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
259	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true,  false);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true,  false);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true,  false);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
260	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  true);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  true);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  0,  true);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
261	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  2);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG  +  2);	  val    =    new    ZipLong(ZipLong.SDK_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
262	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  3);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG  +  3);	  val    =    new    ZipLong(ZipLong.SDK_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
263	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  4);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG  +  4);	  val    =    new    ZipLong(ZipLong.SDK_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
264	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  val);	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
265	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
266	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  0);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  0);	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
267	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
268	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  true);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  true);	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
269	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  val.length);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  val.length);	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
270	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WRITE_BUF,  SHORT_BUF);	  val    =    new    ZipLong(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
271	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF  +  2);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
272	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  3);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF  +  3);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
273	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  4);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF  +  4);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
274	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WORD_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WORD_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
275	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  12);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  12);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  12);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    0);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
276	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  val);	  val    =    new    ZipLong(ZipLong.DOUBLE_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
277	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.DOUBLE_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
278	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE_SIG  +  1);	  val    =    new    ZipLong(ZipLong.DOUBLE_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
279	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  1);	  val    =    new    ZipLong(ZipLong.DS_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
280	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  0,  val.length);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  0,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  0,  val.length);	  val    =    new    ZipLong(ZipLong.DS_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
281	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  10);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  10);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  10);	  val    =    new    ZipLong(ZipLong.DS_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
282	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  2);	  val    =    new    ZipLong(ZipLong.DS_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
283	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  4);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  4);	  val    =    new    ZipLong(ZipLong.DS_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
284	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  3);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  3);	  val    =    new    ZipLong(ZipLong.DS_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
285	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  16);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  16);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  16);	  val    =    new    ZipLong(ZipLong.DS_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
286	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  32);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  32);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  32);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
287	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG  +  2);	  val    =    new    ZipLong(ZipLong.DS_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
288	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  3);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG  +  3);	  val    =    new    ZipLong(ZipLong.DS_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
289	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  4);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG  +  4);	  val    =    new    ZipLong(ZipLong.DS_SIG    +    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
290	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF,  SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF,  SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SKIP_BUF,  SHORT_BUF);	  val    =    new    ZipLong(ZipLong.SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
291	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF,  val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SKIP_BUF,  val);	  val    =    new    ZipLong(ZipLong.SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
292	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SKIP_BUF  +  1);	  val    =    new    ZipLong(ZipLong.SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
293	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SKIP_BUF,  0);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SKIP_BUF,  0);	  val    =    new    ZipLong(ZipLong.SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
294	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  0);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE_SIG,  0);	  val    =    new    ZipLong(ZipLong.DOUBLE_SIG);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
295	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  32);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  32);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  32);	  val    =    new    ZipLong(ZipLong.DD_SIG,    1);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
296	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  WRITE_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  WRITE_BUF);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
297	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  SHORT_BUF  +  1);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
298	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  LFH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  LFH_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
299	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SLASH_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  SLASH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  SLASH_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
300	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  FIELD_NAME);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  FIELD_NAME);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  FIELD_NAME);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
301	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
302	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  entry;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  entry;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry  =  entry;	  readFully(ZipLong.DD_SIG);    current.entry    =    val;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
303	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(val);	  readFully(ZipLong.DD_SIG);    current.entry    =    val;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
304	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  WRITE_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  WRITE_BUF);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
305	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.length)+  1;	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val.length);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
306	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  WRITE_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  WRITE_BUF);	  val    =    new    ZipLong(ZipLong.DS_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
307	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  SHORT_BUF  +  1);	  val    =    new    ZipLong(ZipLong.DS_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
308	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  WRITE_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  WRITE_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
309	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO_WORD_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO_WORD_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO_WORD_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
310	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO_DWORD_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO_DWORD_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  ZERO_DWORD_BUF);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    TWO_DWORD_BUF);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
311	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }	  readFully(ZipLong.DD_SIG);    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
312	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  else  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  else  {  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  else  {	  readFully(ZipLong.DD_SIG);    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
313	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  -1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  -1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  -1);	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
314	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  1);	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
315	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_EXP_32  +  2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_EXP_32  +  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_EXP_32  +  2);	  val    =    new    ZipLong(TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
316	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_EXP_32  +  4);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_EXP_32  +  4);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_EXP_32  +  4);	  val    =    new    ZipLong(TWO_EXP_32);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
317	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  16);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  16);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  16);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
318	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG  +  val.getValue());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG  +  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG  +  val.getValue());	  readFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
319	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ReadFully(ZipLong.DD_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	ReadFully(ZipLong.DD_SIG,  val);	  readFully(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
320	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  readFully(val));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  readFully(val));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  readFully(val));	  val    =    new    ZipLong(ZipLong.DS_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
321	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  readFully(val);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  readFully(val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  readFully(val);	  val    =    new    ZipLong(ZipLong.DS_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
322	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  FS_SIG);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  FS_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  FS_SIG);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
323	[BUG]  [BUGGY]  val  =  writeFully(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  writeFully(zipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  writeFully(zipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
324	[BUG]  [BUGGY]  val.writeFully(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val.writeFully(zipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val.writeFully(zipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
325	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  6;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)+  6;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)+  6;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
326	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  WRITE_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  WRITE_BUF);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
327	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  ZERO_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  ZERO_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  ZERO_BUF);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
328	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DOUBLE  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DOUBLE  +  1);	  val    =    new    ZipLong(ZipLong.DOUBLE);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
329	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.FIELD_NAME);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.FIELD_NAME);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.FIELD_NAME);	  val    =    new    ZipLong(ZipLong.DOUBLE);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
330	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }	  readFully(ZipLong.DD_SIG);    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
331	[BUG]  [BUGGY]  if(!hasDataDescriptor)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(!hasDataDescriptor)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(!hasDataDescriptor)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }	  readFully(ZipLong.DD_SIG);    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
332	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(ZipLong.DD_SIG.equals(val)||  ZipLong.DD_SIG.equals(val))  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
333	[BUG]  [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  zipLong.DD_SIG.equals(val))  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(ZipLong.DD_SIG.equals(val)||  zipLong.DD_SIG.equals(val))  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(ZipLong.DD_SIG.equals(val)||  zipLong.DD_SIG.equals(val))  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
334	[BUG]  [BUGGY]  if(val.equals(zipLong))  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(val.equals(zipLong))  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(val.equals(zipLong))  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
335	[BUG]  [BUGGY]  readFully(zipLong.getValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(zipLong.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(zipLong.getValue());	  if(zipLong.DD_SIG.equals(val))    {    readFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
336	[BUG]  [BUGGY]  val  =  new  ZipLong(DS_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DS_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DS_SIG  +  1);	  val    =    new    ZipLong(DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
337	[BUG]  [BUGGY]  val  =  new  ZipLong(DS_SIG,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DS_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DS_SIG,  val);	  val    =    new    ZipLong(DS_SIG);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
338	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  sh);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  sh);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  sh);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
339	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry.setPath(val.getValue());  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry.setPath(val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry.setPath(val.getValue());	  readFully(ZipLong.DD_SIG);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
340	[BUG]  [BUGGY]  val  =  new  ZipLong(LFH_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(LFH_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(LFH_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
341	[BUG]  [BUGGY]  val  =  new  ZipLong(SLASH_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SLASH_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SLASH_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
342	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WRITE_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
343	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG,  0);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DSK_SIG,  0);	  val    =    new    ZipLong(ZipLong.DSK_SIG);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
344	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG,  readFully(val));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG,  readFully(val));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DSK_SIG,  readFully(val));	  val    =    new    ZipLong(ZipLong.DSK_SIG);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
345	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(diff));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(diff));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(diff));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
346	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(YEAR_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(YEAR_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(YEAR_BUF));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
347	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(VAR_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(VAR_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(VAR_BUF));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
348	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  val);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  val);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
349	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  this.current.entry);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  this.current.entry);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  this.current.entry);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
350	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  readFully(val));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  readFully(val));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  readFully(val));	  val    =    new    ZipLong(ZipLong.DL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
351	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  readFully(val));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  readFully(val));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG,  readFully(val));	  val    =    new    ZipLong(ZipLong.DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
352	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WRITE_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WRITE_BUF  +  1);	  val    =    new    ZipLong(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
353	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.WRITE_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.WRITE_BUF);	  val    =    new    ZipLong(WRITE_BUF);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
354	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  WRITE_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  WRITE_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  WRITE_BUF);	  val    =    new    ZipLong(ZipLong.DL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
355	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  SHORT_BUF  +  1);	  val    =    new    ZipLong(ZipLong.DL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
356	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  6;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG)+  6;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG)+  6;	  val    =    new    ZipLong(ZipLong.SDK_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
357	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  readFully(val));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  readFully(val));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  readFully(val));	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
358	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  1,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG  +  1,  true);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG  +  1,  true);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
359	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  6;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG)+  6;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG)+  6;	  val    =    new    ZipLong(ZipLong.DL_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
360	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  3);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  3);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()  +  3);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
361	[BUG]  [BUGGY]  readFully(ZipLong.LP);  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.LP);  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.LP);  val  =  new  ZipLong(ZipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
362	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ReadFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	ReadFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
363	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  DD_SIG);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  DD_SIG);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
364	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  val);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WRITE_BUF,  val);	  val    =    new    ZipLong(TWO_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
365	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF,  SKIP_BUF);	  val    =    new    ZipLong(TWO_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
366	[BUG]  [BUGGY]  val  =  new  ZipLong(SKIP_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SKIP_BUF,  LFH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SKIP_BUF,  LFH_BUF);	  val    =    new    ZipLong(SHORT_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
367	[BUG]  [BUGGY]  val  =  new  ZipLong(LPH_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(LPH_BUF,  LFH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(LPH_BUF,  LFH_BUF);	  val    =    new    ZipLong(SHORT_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
368	[BUG]  [BUGGY]  val  =  new  ZipLong(SLASH_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SLASH_BUF,  LFH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SLASH_BUF,  LFH_BUF);	  val    =    new    ZipLong(SHORT_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
369	[BUG]  [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WRITE_BUF,  LFH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WRITE_BUF,  LFH_BUF);	  val    =    new    ZipLong(SHORT_BUF,    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
370	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val));	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
371	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val  +  1);	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
372	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.substring(1));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.substring(1));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.substring(1));	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
373	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  false);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG,  false);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
374	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(diff));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(diff));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(diff));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
375	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(DECEMBER_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(DECEMBER_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(DECEMBER_BUF));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
376	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(VAR_BUF));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
377	[BUG]  [BUGGY]  ReadFully(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  ReadFully(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	ReadFully(ZipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
378	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG;  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG;	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
379	[BUG]  [BUGGY]  val  =  new  ZipLong(SKIP_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SKIP_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SKIP_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
380	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.getDescriptor());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.getDescriptor());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.getDescriptor());	  readFully(ZipLong.DD_SIG,    val.getValue());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
381	[BUG]  [BUGGY]  readFully(ZipLong.DATE_SIG,  val);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DATE_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DATE_SIG,  val);	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DATE_SIG);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
382	[BUG]  [BUGGY]  reader.readFully(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  reader.readFully(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	reader.readFully(ZipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
383	[BUG]  [BUGGY]  val  =  new  ZipLong(JAR_SIG,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(JAR_SIG,  0);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(JAR_SIG,  0);	  val    =    new    ZipLong(JAR_SIG);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
384	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.JAR_SIG);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.JAR_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.JAR_SIG);	  val    =    new    ZipLong(JAR_SIG);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
385	[BUG]  [BUGGY]  val  =  new  ZipLong(JAR_SIG,  JAR_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(JAR_SIG,  JAR_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(JAR_SIG,  JAR_BUF);	  val    =    new    ZipLong(JAR_SIG);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
386	[BUG]  [BUGGY]  val  =  new  ZipLong(FIRST_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(FIRST_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(FIRST_BUF,  SKIP_BUF);	  val    =    new    ZipLong(FIRST_BUF);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
387	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG  +  val.getValue());  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  new  ZipLong(ZipLong.DD_SIG  +  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG  +  val.getValue());	  new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
388	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG),  val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  new  ZipLong(ZipLong.DD_SIG),  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG),  val);	  new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
389	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  new  ZipLong(ZipLong.DD_SIG  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG  +  1);	  new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
390	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  val)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  val)+  1;	  val    =    new    ZipLong(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
391	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }	  readFully(ZipLong.DD_SIG);    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
392	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  else  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  else  {  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(ZipLong.DD_SIG);  }  else  {	  readFully(ZipLong.DD_SIG);    current.entry    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
393	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG)+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DEFAULT_SIG)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DEFAULT_SIG)+  1;	  val    =    new    ZipLong(ZipLong.DEFAULT_SIG);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
394	[BUG]  [BUGGY]  new  ZipLong(ZipLong.DD_SIG,  val));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  new  ZipLong(ZipLong.DD_SIG,  val));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	new  ZipLong(ZipLong.DD_SIG,  val));	  new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
395	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true,  val);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  true,  val);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
396	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.inputStream);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.inputStream);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  current.inputStream);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    current.entry);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
397	[BUG]  [BUGGY]  if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DATE_SIG);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
398	[BUG]  [BUGGY]  if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }  else  {  return  val;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }  else  {  return  val;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }  else  {  return  val;  }	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DATE_SIG);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
399	[BUG]  [BUGGY]  if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DATE_SIG);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DATE_SIG);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
400	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry  ==  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }	  readFully(ZipLong.DD_SIG);    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
401	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  else  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  else  {  return;  }	  readFully(ZipLong.DD_SIG);    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
402	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  else  {  in.close();  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  else  {  in.close();  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setCrc(val.getValue());  }  else  {  in.close();  }	  readFully(ZipLong.DD_SIG);    current.entry.setCrc(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
403	[BUG]  [BUGGY]  val  =  new  ZipLong(JAR_SIG,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(JAR_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(JAR_SIG,  val);	  val    =    new    ZipLong(JAR_SIG);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
404	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DSK_SIG)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DSK_SIG)+  1;	  val    =    new    ZipLong(ZipLong.DSK_SIG);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
405	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD);	  val    =    new    ZipLong(ZipLong.DOUBLE);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
406	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHARP_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHARP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SHARP_BUF);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
407	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SLASH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SLASH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  SLASH_BUF);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
408	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF  +  1);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF  +  1);	  val    =    new    ZipLong(SHORT_BUF    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
409	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  val)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  val)+  1;	  val    =    new    ZipLong(ZipLong.DL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
410	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SLASH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DL_SIG,  SLASH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DL_SIG,  SLASH_BUF);	  val    =    new    ZipLong(ZipLong.DL_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
411	[BUG]  [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SLASH_BUF);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(SHORT_BUF,  SLASH_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(SHORT_BUF,  SLASH_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
412	[BUG]  [BUGGY]  val.setValue(val.getValue());  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val.setValue(val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val.setValue(val.getValue());	  readFully(ZipLong.DD_SIG);    val.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
413	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  val.setPath(val.getValue());  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  val.setPath(val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  val.setPath(val.getValue());	  readFully(ZipLong.DD_SIG);    val.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
414	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)-  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG)-  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG)-  1;	  val    =    new    ZipLong(ZipLong.DD_SIG)+    1;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
415	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  val)+  1;	  val    =    new    ZipLong(ZipLong.DS_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
416	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val  *  2);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DS_SIG,  val  *  2);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DS_SIG,  val  *  2);	  val    =    new    ZipLong(ZipLong.DS_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
417	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis()));	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
418	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis();  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis();	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis()    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
419	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG)+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECEMBER_SIG)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECEMBER_SIG)+  1;	  val    =    new    ZipLong(ZipLong.DECEMBER_SIG);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
420	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  }  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
421	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  return  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  return  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  return  else  {  val  =  new  ZipLong(ZipLong.DD_SIG);  }	  if(zipLong.DD_SIG.equals(val))    {    readFully(ZipLong.DD_SIG);    }    else    {    val    =    new    ZipLong(ZipLong.DD_SIG);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
422	[BUG]  [BUGGY]  val.setLong(ZipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val.setLong(ZipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val.setLong(ZipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
423	[BUG]  [BUGGY]  val.setLong(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val.setLong(zipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val.setLong(zipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    readFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
424	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.intValue());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.intValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.intValue());	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
425	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.getValue());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.getValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.getValue());	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
426	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.toByteArray());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  val.toByteArray());	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
427	[BUG]  [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  bytesReadFromStream);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  bytesReadFromStream);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(DateTimeUtils.currentTimeMillis(),  bytesReadFromStream);	  val    =    new    ZipLong(DateTimeUtils.currentTimeMillis(),    max);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
428	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  val)+  1;	  val    =    new    ZipLong(ZipLong.SDK_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
429	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  val));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  val));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
430	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(wORD_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(wORD_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(wORD_BUF));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
431	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(short));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(short));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  readFully(short));	  val    =    new    ZipLong(ZipLong.SDK_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
432	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  v);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  v);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  v);	  val    =    new    ZipLong(ZipLong.DD_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
433	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  12);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  12);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  12);	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    0);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
434	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  val.length);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  val.length);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF,  val.length);	  val    =    new    ZipLong(TWO_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
435	[BUG]  [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  val.intValue());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(TWO_DWORD_BUF,  val.intValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(TWO_DWORD_BUF,  val.intValue());	  val    =    new    ZipLong(TWO_DWORD_BUF,    val);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
436	[BUG]  [BUGGY]  Writer  writer  =  new  Writer(zipLong.DD_SIG);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  Writer  writer  =  new  Writer(zipLong.DD_SIG);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	Writer  writer  =  new  Writer(zipLong.DD_SIG);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
437	[BUG]  [BUGGY]  Writer  writer  =  new  Writer(zipLong.DD_SIG,  val);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  Writer  writer  =  new  Writer(zipLong.DD_SIG,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	Writer  writer  =  new  Writer(zipLong.DD_SIG,  val);	  if(zipLong.DD_SIG.equals(val))    {    writeFully(val);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
438	[BUG]  [BUGGY]  val  =  new  ZipLong(WORD_BUF,  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(WORD_BUF,  SKIP_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(WORD_BUF,  SKIP_BUF);	  val    =    new    ZipLong(SHORT_BUF,    SKIP_BUF);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
439	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.intValue());  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.intValue());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.intValue());	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
440	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG,  val.toByteArray());  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG,  val.toByteArray());  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG,  val.toByteArray());	  readFully(ZipLong.DD_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
441	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  vs);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SHORT_BUF,  vs);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SHORT_BUF,  vs);	  val    =    new    ZipLong(ZipLong.SHORT_BUF,    DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
442	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  val;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  val;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry  =  val;  }	  readFully(ZipLong.DD_SIG);    current.entry    =    val;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
443	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  entryEncoding;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  entryEncoding;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry  =  entryEncoding;	  readFully(ZipLong.DD_SIG);    current.entry    =    val;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
444	[BUG]  [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(TWO_EXP_32);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(TWO_EXP_32);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	readFully(ZipLong.DD_SIG);  current.entry  =  new  ZipLong(TWO_EXP_32);	  readFully(ZipLong.DD_SIG);    current.entry    =    val;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
445	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val)+  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val)+  1;  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  val)+  1;	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    val);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
446	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(wORD_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(wORD_BUF));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(wORD_BUF));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
447	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(short));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(short));  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DECIMAL_SIG,  readFully(short));	  val    =    new    ZipLong(ZipLong.DECIMAL_SIG,    readFully(val));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
448	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  VALUE_SHORT_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.SDK_SIG,  VALUE_SHORT_BUF);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.SDK_SIG,  VALUE_SHORT_BUF);	  val    =    new    ZipLong(ZipLong.SDK_SIG,    SHORT_BUF);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
449	[BUG]  [BUGGY]  if(!zipLong.DD_SIG.equals(val))  {  return;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(!zipLong.DD_SIG.equals(val))  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(!zipLong.DD_SIG.equals(val))  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
450	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(zipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(zipLong.DD_SIG.equals(val)||  val.getValue()!=  null)  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
451	[BUG]  [BUGGY]  if(zipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {  return;  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(zipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(zipLong.DD_SIG.equals(val)||  val.getValue()  ==  null)  {  return;  }	  if(zipLong.DD_SIG.equals(val))    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
452	[BUG]  [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  true,  val);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  val  =  new  ZipLong(ZipLong.DD_SIG,  true,  val);  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	val  =  new  ZipLong(ZipLong.DD_SIG,  true,  val);	  val    =    new    ZipLong(ZipLong.DD_SIG,    true);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
453	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());  }	  readFully(ZipLong.DD_SIG);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
454	[BUG]  [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());  }  else  {  return;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());  }  else  {  return;  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(current.entry!=  null)  {  readFully(ZipLong.DD_SIG);  current.entry.setValue(val.getValue());  }  else  {  return;  }	  readFully(ZipLong.DD_SIG);    current.entry.setValue(val.getValue());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
455	[BUG]  [BUGGY]  if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      private  void  readDataDescriptor()  throws  IOException  {  readFully(WORD_BUF);  ZipLong  val  =  new  ZipLong(WORD_BUF);  if  (ZipLong.DD_SIG.equals(val))  {  readFully(WORD_BUF);      [BUGGY]  if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  }  [BUGGY]      }  current.entry.setCrc(val.getValue());        [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	734	734	2	replace	if(val  ==  null)  {  readFully(ZipLong.DD_SIG);  val  =  new  ZipLong(ZipLong.DD_SIG);  }	  readFully(ZipLong.DD_SIG);    val    =    new    ZipLong(ZipLong.DD_SIG);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
