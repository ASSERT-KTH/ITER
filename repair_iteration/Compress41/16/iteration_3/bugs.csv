bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSI_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSI_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSI_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WSI_BUF));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  0));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIG));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
6	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE  +  1));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE  +  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE  +  1));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
7	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE  -  1));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE  -  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_SIZE  -  1));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
8	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
9	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
10	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.set  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.set  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.set	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
11	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
12	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
13	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(potentialSig.equals(ZipLong.CFH_SIG))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
14	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  TWO_EXP_32));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  TWO_EXP_32));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
16	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  val));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  val));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  val));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DB));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
17	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DB));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
18	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DFH));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DFH));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DFH));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DB));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
19	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DB));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
20	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  0));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD,  LFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD)+  1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DWORD)+  1);	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
24	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  10));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  10));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  10));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS  +  1));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS  +  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS  +  1));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WS));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
28	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS),  CFH_LEN);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS),  CFH_LEN);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS),  CFH_LEN);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WS));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
29	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
30	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SMALL_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SMALL_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SMALL_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
31	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  KEY_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  KEY_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  KEY_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
32	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DFH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF),  LFH_BUF);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SKIP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
36	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SLASH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SLASH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SLASH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
37	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSAP_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSAP_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSAP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
38	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  10));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  10));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  10));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    0));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
39	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  1));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  1));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    0));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
40	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  12));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  12));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  12));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    0));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
41	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  2));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  2));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  2));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    0));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
42	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  1));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  1));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    10));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
43	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  12));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  12));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  12));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    10));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
44	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  16));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  16));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  16));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    10));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
45	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  3));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  3));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  3));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    1));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
46	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSIZE));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSIZE));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSIZE));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    1));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
47	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  4));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  4));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  4));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    2));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
49	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  5));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  5));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  5));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    2));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
50	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    2));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
51	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1,  LFH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF),  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  CFH_BUF),  LFH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
53	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF),  LFH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
54	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DFH_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DFH_BUF),  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DFH_BUF),  LFH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
55	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DLH_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DLH_BUF),  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DLH_BUF),  LFH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
56	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSHORT_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSHORT_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSHORT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WSH_BUF));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
57	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32),  0);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32),  0);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_2));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_2));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_2));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  2);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  2);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
60	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  3);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  3);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
61	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  4);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  4);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
62	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
63	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)/  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)/  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)/  1);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
64	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  0));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
65	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
66	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_LEN));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
67	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
68	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
69	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
70	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  2);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  2);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
71	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_BUF)+  1);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
72	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  3);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  3);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  3);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
73	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  4);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  4);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DWORD)+  4);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
74	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DFH));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DFH));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DFH));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
75	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DFH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
76	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  CFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  CFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
77	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DD));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DD));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DS));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
78	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LB_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LB_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LB_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LBH_BUF));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
79	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF),  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF),  0);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LBH_BUF));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
80	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  LFH_LEN));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
81	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  CFH_LEN));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
82	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  TWO_EXP_32));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  TWO_EXP_32));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
84	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  CFH_LEN));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  CFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  CFH_LEN));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SKIP_BUF));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
85	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
86	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0.0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0.0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0.0));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
87	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DB_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DB_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DB_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  2));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  2));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  2));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
89	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
90	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  16));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  16));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  16));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    12));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
91	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME),  0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME),  0);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_NAME));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
92	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
93	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
94	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  }  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  }  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  }	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
95	[BUG]  [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.set  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.set  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(potentialSig.equals(ZipLong.CFH_LEN))  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.set	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
96	[BUG]  [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setPosition(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
97	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
98	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
99	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  10));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  10));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  10));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
100	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0.0));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0.0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0.0));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
101	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  1),  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  1),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  1),  0);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
102	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0,  0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  0,  0));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
103	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  10),  0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  10),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  10),  0);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
104	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  2),  0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  2),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  2),  0);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
105	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  12),  0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  12),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  12),  0);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    0),    0);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
106	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
107	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  1));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  1));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
108	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  12));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  12));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  12));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
109	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  2));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  2));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  2));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
110	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  10));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  10));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  10));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
111	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF),  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF),  LFH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
112	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF),  SLASH_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF),  SLASH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF),  SLASH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SLASH_BUF));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSAP_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSAP_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  WSAP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SLASH_BUF));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  LFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  LFH_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
115	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  CFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  CFH_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
116	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DFH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DFH_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
117	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_WORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
118	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF));  [CE]  illegal  start  of  type  [FE]                                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
119	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_WORD_BUF,  DWORD));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
120	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
121	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getVal  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getVal  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getVal	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
122	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DW  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DW  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DW	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
123	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValu  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValu  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValu	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
124	[BUG]  [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry!=  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
125	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SKIP_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
126	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
127	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS),  WS);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS),  WS);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WS),  WS);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WS));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
128	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SLASH_BUF));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SLASH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SLASH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SLASH_BUF));    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
129	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  32));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  32));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  32));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    10));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
130	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF)+  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH_BUF)+  1);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
131	[BUG]  [BUGGY]  current.entry.setPosition(ZipEightByteInteger.getValue(TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setPosition(ZipEightByteInteger.getValue(TWO_DWORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setPosition(ZipEightByteInteger.getValue(TWO_DWORD_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
132	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  SKIP_BUF);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  SKIP_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  SHORT_BUF),  SKIP_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
133	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH)+  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LFH)+  1);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    LFH));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
134	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LBH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LBH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LBH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LBH_BUF));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
135	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF)+  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF)+  1);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LBH_BUF));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
136	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF),  LFH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
137	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1);	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
138	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DEFAULT_SIZE));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
139	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSI_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSI_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSI_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    WSI_BUF));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
140	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  CFH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  CFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  CFH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    CFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
141	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DB));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DB));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DB));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DB));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
142	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LB));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LB));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LB));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DB));    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
143	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LB));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LB));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LB));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LB));    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
144	[BUG]  [BUGGY]  current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LFH_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
145	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_SIZE,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_SIZE,  DEFAULT_SIZE));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_SIZE,  DEFAULT_SIZE));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
146	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIZE));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIZE));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  DEFAULT_SIZE));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_SIZE));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
147	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  DWORD));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
148	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
149	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LFH_LEN));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
150	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF)+  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  LFH_BUF)+  1);	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
151	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DEFAULT_NAME));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_NAME));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
152	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,  LFH));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
153	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  LFH));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
154	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_EXP_32));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
155	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  16));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  16));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  16));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    0));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
156	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SMALL_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SMALL_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  SMALL_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    SMALL_BUF));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
157	[BUG]  [BUGGY]  current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  0));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
158	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_KEY_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_KEY_BUF,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_KEY_BUF,  DWORD));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
159	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  0));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_HEIGHT_BUF,  0));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
160	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD)+  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DWORD)+  1);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
161	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_SHORT_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_SHORT_BUF,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_SHORT_BUF,  DWORD));	  current.entry.setValue(ZipLong.getValue(TWO_WORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
162	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD)+  1);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
163	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
164	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BU  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BU  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BU	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
165	[BUG]  [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
166	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD,  DWORD)+  1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD,  DWORD)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD,  DWORD)+  1);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    DWORD)+    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
167	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DS));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DS));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DS));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DS));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
168	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DS));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DS));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  DS));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DS));    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
169	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD  +  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  DWORD  +  1));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
170	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WS));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
171	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DB));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DB));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  DB));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
172	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0),  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  0),  0);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    0));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
173	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  0),  0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  0),  0);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  0),  0);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    0));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
174	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WSDL_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WSDL_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WSDL_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SKIP_BUF));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
175	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF),  LFH_BUF);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF),  LFH_BUF);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  SLASH_BUF),  LFH_BUF);	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
176	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DLH_BUF));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DLH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DLH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF),    LFH_BUF);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
177	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF)+  1);	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    SHORT_BUF));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
178	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setPreferredSize(ZipLong.getValue(TWO_DWORD_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
179	[BUG]  [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF,  SHORT_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
180	[BUG]  [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setFileName(ZipLong.getValue(TWO_DWORD_BUF));	  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
181	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WSH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WSH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  WSH_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
182	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValu  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValu  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValu	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
183	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
184	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getVal  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getVal  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry  ==  null)  {  if(current.entry!=  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getVal	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
185	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSORD_BUF));  [CE]  illegal  start  of  type  [FE]                                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSORD_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
186	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME  +  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  DEFAULT_NAME  +  1));	  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    DEFAULT_NAME));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
187	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LPH));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LPH));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LPH));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    LFH));    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
188	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32),  DWORD);  [CE]  illegal  start  of  type  [FE]                                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32),  DWORD);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32),  DWORD);	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
189	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  0));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
190	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD  +  1));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD  +  1));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD  +  1));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
191	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_EXP_32,  DWORD,  DWORD));	  current.entry.setValue(ZipLong.getValue(TWO_EXP_32,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
192	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setPreferredSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setPreferredSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
193	[BUG]  [BUGGY]  current.entry.setPreferredSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setPreferredSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setPreferredSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));	  current.entry.setCompressedSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    DWORD));    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
194	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSH));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSH));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,  WSH));	  current.entry.setSize(ZipLong.getValue(TWO_WORD_BUF,    WS));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
195	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LBH_BUF));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LBH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  LBH_BUF));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
196	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DB));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DB));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DB));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
197	[BUG]  [BUGGY]  current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipEightByteInteger.getValue(TWO_DWORD_BUF,  DWORD));	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
198	[BUG]  [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF),  DWORD);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF),  DWORD);  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF),  DWORD);	  current.entry.setSize(ZipEightByteInteger.getValue(TWO_DWORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
199	[BUG]  [BUGGY]  if(current.entry  ==  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  if(current.entry  ==  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	if(current.entry  ==  null)  {  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));  current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,	  if(current.entry!=    null)    {    current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));    current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF,    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
200	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WSH_BUF));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WSH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  WSH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
201	[BUG]  [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,  LBH_BUF));	  current.entry.setValue(ZipLong.getValue(TWO_DWORD_BUF,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
202	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSDL_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSDL_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  WSDL_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    WORD_BUF));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
203	[BUG]  [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LBH_BUF));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (potentialSig.equals(ZipLong.CFH_SIG)  ||  potentialSig.equals(ZipLong.LFH_SIG))  {  pushback(TWO_DWORD_BUF,  DWORD,  DWORD);  current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));      [BUGGY]  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LBH_BUF));  [BUGGY]      }  else  {  current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));  current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF,  DWORD));  }  [CLASS]  ZipArchiveInputStream  CurrentEntry  BoundedInputStream  [METHOD]  readDataDescriptor  [RETURN_TYPE]  void  [VARIABLES]  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  String  encoding  ByteBuffer  buf  int  CFH_LEN  LFH_LEN  count  diff  entriesRead  extraLen  fileNameLen  i  l  length  off  offset  read  toRead  versionMadeBy  x  long  TWO_EXP_32  bytesRead  bytesReadFromStream  csize  inB  max  n  pos  rem  remaining  size  skipped  time  value  byte[]  CFH  DD  LFH  LFH_BUF  SHORT_BUF  SKIP_BUF  TWO_DWORD_BUF  WORD_BUF  b  buffer  expected  extraData  fileName  lfh  missedLfhBytes  signature  CurrentEntry  current  ZipLong  potentialSig  val  boolean  allowStoredEntriesWithDataDescriptor  closed  firstEntry  hasDataDescriptor  hasUTF8Flag  hitCentralDirectory  useUnicodeExtraFields  usesZip64  ByteArrayInputStream  lastStoredEntry  ZipArchiveEntry  entry  ze  Inflater  inf  	projects/Compress41/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	0.5	754	754	2	replace	current.entry.setSize(ZipLong.getValue(TWO_EXP_32,  LBH_BUF));	  current.entry.setSize(ZipLong.getValue(TWO_EXP_32,    LFH_BUF));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
